<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>are only available on JDK 1.5 and higher 错误（低版本spring在jdk1.8下的错误修复）</title>
    <link href="/articles/are-only-available-on-JDK-1-5-and-higher-%E9%94%99%E8%AF%AF%EF%BC%88%E4%BD%8E%E7%89%88%E6%9C%ACspring%E5%9C%A8jdk1-8%E4%B8%8B%E7%9A%84%E9%94%99%E8%AF%AF%E4%BF%AE%E5%A4%8D%EF%BC%89.html"/>
    <url>/articles/are-only-available-on-JDK-1-5-and-higher-%E9%94%99%E8%AF%AF%EF%BC%88%E4%BD%8E%E7%89%88%E6%9C%ACspring%E5%9C%A8jdk1-8%E4%B8%8B%E7%9A%84%E9%94%99%E8%AF%AF%E4%BF%AE%E5%A4%8D%EF%BC%89.html</url>
    
    <content type="html"><![CDATA[<h2 id="前景提要"><a href="#前景提要" class="headerlink" title="前景提要"></a>前景提要</h2><p>我本地的jdk版本1.8,项目使用的spring版本2.5.6</p><p>最近在给别人跑项目的过程中出现了一个如下的错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Unexpected exception parsing XML document from <span class="hljs-keyword">class</span> <span class="hljs-title class_">path</span> resource [applicationContext-dao.xml]; nested exception is java.lang.IllegalStateException: Context namespace element ‘annotation-config’ and its parser class [org.springframework.context.annotation.AnnotationConfigBeanDefinitionParser] are only available on JDK <span class="hljs-number">1.5</span> and higher<br></code></pre></td></tr></table></figure><h2 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h2><p>发现报错之后,我找到最重要的一句话翻译了一下<code>are only available on JDK 1.5 and higher</code>,大概意思就是仅在JDK 1.5和更高版本上可用,但是其实我本地版本1.8绝对高于1.5的,网上查了之后,大概的意思是org.springframework.context.annotation.AnnotationConfigBeanDefinitionParser自动检测，jdk版本检测时需要jre1.5以上版本，但是JdkVersion只检查到了1.7，jre1.8 时不匹配任何jdk,所以就会出现上述错误,接下来就是copy网上的代码进行一个代码覆盖就完事</p><p>1、在项目中创建一个package为org.springframework.core<br>2、在该package下面新建JdkVersion.java，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdkVersion</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">JAVA_13</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">JAVA_14</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">JAVA_15</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">JAVA_16</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">JAVA_17</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">//for jre 1.8</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">JAVA_18</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">javaVersion</span> <span class="hljs-operator">=</span> System<br>            .getProperty(<span class="hljs-string">&quot;java.version&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> majorJavaVersion;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getJavaVersion</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> javaVersion;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMajorJavaVersion</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> majorJavaVersion;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAtLeastJava14</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAtLeastJava15</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getMajorJavaVersion() &gt;= <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAtLeastJava16</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getMajorJavaVersion() &gt;= <span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">//for jre 1.8</span><br>        <span class="hljs-keyword">if</span> (javaVersion.indexOf(<span class="hljs-string">&quot;1.8.&quot;</span>) != -<span class="hljs-number">1</span>) &#123;<br>            majorJavaVersion = <span class="hljs-number">5</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (javaVersion.indexOf(<span class="hljs-string">&quot;1.7.&quot;</span>) != -<span class="hljs-number">1</span>) &#123;<br>            majorJavaVersion = <span class="hljs-number">4</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (javaVersion.indexOf(<span class="hljs-string">&quot;1.6.&quot;</span>) != -<span class="hljs-number">1</span>) &#123;<br>            majorJavaVersion = <span class="hljs-number">3</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (javaVersion.indexOf(<span class="hljs-string">&quot;1.5.&quot;</span>) != -<span class="hljs-number">1</span>) &#123;<br>            majorJavaVersion = <span class="hljs-number">2</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            majorJavaVersion = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>问题倒还好,也没什么,主要是提示令人一脸懵逼,这个问题也提醒我们,在写代码的时候可以适当考虑一些前瞻性的问题,对于未来的版本可以适当做一些容错性</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h2><p><a href="https://blog.csdn.net/u011974797/article/details/52457936">https://blog.csdn.net/u011974797/article/details/52457936</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>derby 数据库</title>
    <link href="/articles/derby-%E6%95%B0%E6%8D%AE%E5%BA%93.html"/>
    <url>/articles/derby-%E6%95%B0%E6%8D%AE%E5%BA%93.html</url>
    
    <content type="html"><![CDATA[<h2 id="基本简介"><a href="#基本简介" class="headerlink" title="基本简介"></a><strong>基本简介</strong></h2><p>1.derby是一个完全用java编写的数据库,<a href="https://baike.baidu.com/item/Derby/7656169">https://baike.baidu.com/item/Derby/7656169</a></p><p>2.官网:<a href="http://db.apache.org/derby/">http://db.apache.org/derby/</a></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a><strong>基本使用</strong></h2><p>前提:在使用derby之前一定要确保自己的java环境配置正确,要不然在使用中可能会出现一些问题</p><p>1.去官网下载derby</p><p>2.对下载的压缩包进行解压,用cmd进入到其bin目录</p><p>3.启动ij.bat(ij相当于derby数据库的客户端操作命令行)</p><p>4.进入ij终端之后,使用语句<code>connect&#39;jdbc:derby:mydb;create=true&#39;;</code>连接mydb数据库，create&#x3D;true语句说明如果不存在mydb数据库就进行创建，因为ij在本目录创建数据库，所以路径不需要写入，如果要将数据库创建在别的目录就需要将完整地址名写入。如果创建过该数据库，会提示已存在mydb数据库</p><p>5.对于建表,语句实例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> svse <br>( <br>uid <span class="hljs-type">int</span> generated <span class="hljs-keyword">by</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">identity</span>, <br>Uname <span class="hljs-type">varchar</span>(<span class="hljs-number">5</span>) , <br>Upass <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>), <br><span class="hljs-keyword">constraint</span> P_KEY_1 <span class="hljs-keyword">primary</span> key (uid) <br>) <br></code></pre></td></tr></table></figure><p>6.对于数据库建立完毕,表结构建立完毕,数据初始化完毕,退出终端</p><p>7.启动derby网络监听</p><p>用cmd进入到derby得bin目录</p><p>建立网络数据库连接<br>networkservercontrol.bat start </p><p>修改网络数据库连接的端口<br>networkservercontrol.bat start -p 3607 </p><p>修改网络数据库连接的IP与端口<br>networkservercontrol.bat start -h 127.0.0.1 -p 3607 </p><p>8.为了方便使用derby,我们可以将Eclipse与Derby集成</p><p>1).安装derby_core_plugin和derby_ui_plugin eclipse插件</p><p>2).不做摘录,参考:<a href="https://blog.csdn.net/u012179540/article/details/42063843">https://blog.csdn.net/u012179540/article/details/42063843</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>derby进入ij终端部分:<a href="https://blog.csdn.net/scauljr/article/details/79323336">https://blog.csdn.net/scauljr/article/details/79323336</a></p><p>derby sql语法部分:<a href="https://blog.csdn.net/sollider/article/details/9256999">https://blog.csdn.net/sollider/article/details/9256999</a></p><p>eclipse和derby集成部分:<a href="https://blog.csdn.net/u012179540/article/details/42063843">https://blog.csdn.net/u012179540/article/details/42063843</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>数据库</tag>
      
      <tag>derby</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原生js获取radio的值</title>
    <link href="/articles/%E5%8E%9F%E7%94%9Fjs%E8%8E%B7%E5%8F%96radio%E7%9A%84%E5%80%BC.html"/>
    <url>/articles/%E5%8E%9F%E7%94%9Fjs%E8%8E%B7%E5%8F%96radio%E7%9A%84%E5%80%BC.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>获取radio的值<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> radios = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;loan&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> value = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;radios.<span class="hljs-property">length</span>;i++)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(radios[i].<span class="hljs-property">checked</span> == <span class="hljs-literal">true</span>)&#123;</span><br><span class="language-javascript">                    value = radios[i].<span class="hljs-property">value</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(value);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loan&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;test()&quot;</span>&gt;</span>男<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loan&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;test()&quot;</span>&gt;</span>女<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loan&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;test()&quot;</span>&gt;</span>保密<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/jjkang_/article/details/80992005">https://blog.csdn.net/jjkang_/article/details/80992005</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用工具推荐</title>
    <link href="/articles/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90.html"/>
    <url>/articles/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90.html</url>
    
    <content type="html"><![CDATA[<p>Google Play 商店apk下载</p><p><a href="https://apps.evozi.com/apk-downloader/">https://apps.evozi.com/apk-downloader/</a></p><p>Google Chrome ctx插件下载</p><p><a href="https://chrome-extension-downloader.com/">https://chrome-extension-downloader.com/</a></p><p>内网穿透</p><p><a href="http://ngrok.ciqiuwl.cn/">http://ngrok.ciqiuwl.cn/</a></p><p>画图</p><p><a href="https://www.draw.io/">https://www.draw.io/</a></p><p>脑图</p><p><a href="http://naotu.baidu.com/home">http://naotu.baidu.com/home</a></p><p>json</p><p><a href="https://www.bejson.com/jsonviewernew/">https://www.bejson.com/jsonviewernew/</a></p><p><a href="http://jsoneditoronline.org/">http://jsoneditoronline.org/</a></p><p>jsonToCsv</p><p><a href="https://json-csv.com/">https://json-csv.com/</a></p><p>Mac Crack Software</p><p><a href="https://www.osxwin.com/">https://www.osxwin.com/</a></p><p><a href="https://xclient.info/">https://xclient.info</a></p><p><a href="https://cmacapps.com/">https://cmacapps.com/</a></p><p><a href="https://www.macbed.com/">https://www.macbed.com/</a></p><p>apk在线反编译</p><p><a href="http://www.javadecompilers.com/">http://www.javadecompilers.com/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Golang神奇的2006-01-02 15:04:05</title>
    <link href="/articles/Golang%E7%A5%9E%E5%A5%87%E7%9A%842006-01-02-15-04-05.html"/>
    <url>/articles/Golang%E7%A5%9E%E5%A5%87%E7%9A%842006-01-02-15-04-05.html</url>
    
    <content type="html"><![CDATA[<h2 id="热身"><a href="#热身" class="headerlink" title="热身"></a>热身</h2><p>在讲这个问题之前，先来看一道代码题：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    timeString := time.Now().Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>)<br>    fmt.Println(timeString)<br>    fmt.Println(time.Now().Format(<span class="hljs-string">&quot;2017-09-07 18:05:32&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码的输出是什么（假定运行时刻的时间是2017-09-07 18:05:32）？</p><h2 id="一、神奇的日期"><a href="#一、神奇的日期" class="headerlink" title="一、神奇的日期"></a>一、神奇的日期</h2><p>刚接触Golang时，阅读代码的时候总会在代码中发现这么一个日期，<br>2006-01-02 15:04:05</p><p>刚看到这段代码的时候，我当时想：这个人好随便啊，随便写一个日期在这里，但是又感觉还挺方便的，格式清晰一目了然。也没有更多的在意了。<br>之后一次做需求的时候轮到自己要格式化时间了，仿照它的样子，写了一个日期格式来格式化，差不多就是上面代码题上写的那样。殊不知，运行完毕后，结果令人惊呆。。。</p><p>运行结果如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2017</span>-<span class="hljs-number">09</span>-<span class="hljs-number">07</span> <span class="hljs-number">18</span>:<span class="hljs-number">06</span>:<span class="hljs-number">43</span><br><span class="hljs-attribute">7097</span>-<span class="hljs-number">09</span>+<span class="hljs-number">08</span> <span class="hljs-number">98</span>:<span class="hljs-number">43</span>:<span class="hljs-number">67</span><br></code></pre></td></tr></table></figure><p>顿时就犯糊涂了：怎么就变成这个鸟样子了？format不认识我的日期？这么标准的日期都不认识？</p><h2 id="二、开始探究"><a href="#二、开始探究" class="headerlink" title="二、开始探究"></a>二、开始探究</h2><p>查阅了资料，发现原来这个日期就是写死的一个日期，不是这个日期就不认识，就不能正确的格式化。记住就好了。</p><p>但是，还是觉得有点纳闷。为什么输出日期是这个乱的？仔细观察这个日期，06年，1月2日下午3点4分5秒，查阅相关资料还有 -7时区，Monday，数字1~7都有了，而且都不重复。难道有什么深刻含义？还是单纯的为了方便记忆？</p><p>晚上睡觉前一直在心里想。突然想到：这些数字全都不重复，那岂不就是说，每个数字就能代表你需要格式化的属性了？比如，解析格式化字符串的时候，遇到了1，就说明这个地方要填的是月份，遇到了4，说明这个位置是分钟？</p><p>不禁觉得，发明这串时间数字的人还是很聪明的。2006-01-02 15:04:05这个日期，不但挺好记的，而且用起来也比较方便。这个比其他编程语言的yyyy-MM-dd HH:mm:ss这种东西好记多了。（楼主就曾经把yyyy大小写弄错了，弄出一个大bug，写成YYYY，结果，当时没测出来，到了十二月左右的时候，年份多了一年。。。）</p><h2 id="三、深入探究"><a href="#三、深入探究" class="headerlink" title="三、深入探究"></a>三、深入探究</h2><p>为了一窥这个时间格式化的究竟，我们还是得阅读go的time包源代码。在$GOROOT&#x2F;src&#x2F;time&#x2F;format.go文件中，我们可以找到如下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    _                        = <span class="hljs-literal">iota</span><br>    stdLongMonth             = <span class="hljs-literal">iota</span> + stdNeedDate  <span class="hljs-comment">// &quot;January&quot;</span><br>    stdMonth                                       <span class="hljs-comment">// &quot;Jan&quot;</span><br>    stdNumMonth                                    <span class="hljs-comment">// &quot;1&quot;</span><br>    stdZeroMonth                                   <span class="hljs-comment">// &quot;01&quot;</span><br>    stdLongWeekDay                                 <span class="hljs-comment">// &quot;Monday&quot;</span><br>    stdWeekDay                                     <span class="hljs-comment">// &quot;Mon&quot;</span><br>    stdDay                                         <span class="hljs-comment">// &quot;2&quot;</span><br>    stdUnderDay                                    <span class="hljs-comment">// &quot;_2&quot;</span><br>    stdZeroDay                                     <span class="hljs-comment">// &quot;02&quot;</span><br>    stdHour                  = <span class="hljs-literal">iota</span> + stdNeedClock <span class="hljs-comment">// &quot;15&quot;</span><br>    stdHour12                                      <span class="hljs-comment">// &quot;3&quot;</span><br>    stdZeroHour12                                  <span class="hljs-comment">// &quot;03&quot;</span><br>    stdMinute                                      <span class="hljs-comment">// &quot;4&quot;</span><br>    stdZeroMinute                                  <span class="hljs-comment">// &quot;04&quot;</span><br>    stdSecond                                      <span class="hljs-comment">// &quot;5&quot;</span><br>    stdZeroSecond                                  <span class="hljs-comment">// &quot;05&quot;</span><br>    stdLongYear              = <span class="hljs-literal">iota</span> + stdNeedDate  <span class="hljs-comment">// &quot;2006&quot;</span><br>    stdYear                                        <span class="hljs-comment">// &quot;06&quot;</span><br>    stdPM                    = <span class="hljs-literal">iota</span> + stdNeedClock <span class="hljs-comment">// &quot;PM&quot;</span><br>    stdpm                                          <span class="hljs-comment">// &quot;pm&quot;</span><br>    stdTZ                    = <span class="hljs-literal">iota</span>                <span class="hljs-comment">// &quot;MST&quot;</span><br>    stdISO8601TZ                                   <span class="hljs-comment">// &quot;Z0700&quot;  // prints Z for UTC</span><br>    stdISO8601SecondsTZ                            <span class="hljs-comment">// &quot;Z070000&quot;</span><br>    stdISO8601ShortTZ                              <span class="hljs-comment">// &quot;Z07&quot;</span><br>    stdISO8601ColonTZ                              <span class="hljs-comment">// &quot;Z07:00&quot; // prints Z for UTC</span><br>    stdISO8601ColonSecondsTZ                       <span class="hljs-comment">// &quot;Z07:00:00&quot;</span><br>    stdNumTZ                                       <span class="hljs-comment">// &quot;-0700&quot;  // always numeric</span><br>    stdNumSecondsTz                                <span class="hljs-comment">// &quot;-070000&quot;</span><br>    stdNumShortTZ                                  <span class="hljs-comment">// &quot;-07&quot;    // always numeric</span><br>    stdNumColonTZ                                  <span class="hljs-comment">// &quot;-07:00&quot; // always numeric</span><br>    stdNumColonSecondsTZ                           <span class="hljs-comment">// &quot;-07:00:00&quot;</span><br>    stdFracSecond0                                 <span class="hljs-comment">// &quot;.0&quot;, &quot;.00&quot;, ... , trailing zeros included</span><br>    stdFracSecond9                                 <span class="hljs-comment">// &quot;.9&quot;, &quot;.99&quot;, ..., trailing zeros omitted</span><br></code></pre></td></tr></table></figure><p>上面就是所能见到的所有关于日期时间的片段。基本能够涵盖所有的关于日期格式化的请求。</p><p>可以总结如下：<br>格式 含义 01、 1、Jan、January 月 02、 2、_2 日，这个_2表示如果日期是只有一个数字，则表示出来的日期前面用个空格占位。 03、 3、15 时 04、4 分 05、5 秒 2006、06、6 年 -070000、 -07:00:00、 -0700、 -07:00、 -07<br>Z070000、Z07:00:00、 Z0700、 Z07:00 时区 PM、pm 上下午 Mon、Monday 星期 MST 美国时间，如果机器设置的是中国时间则表示为UTC</p><p>看完了这些，心里对日期格式问题已经有数了。<br>所以，我们回头看一下开头的问题，我用</p><p>2017-09-07 18:05:32</p><p>这串数字来格式化这个日期</p><p>2017-09-07 18:05:32</p><p>得到的结果就是</p><p>7097-09+08 98:43:67</p><p>看了这个我就在想，如果是我，我会怎么解析这个格式呢？不禁想起来了学习《编译原理》时候的词法分析器，这个肯定需要构造一个语法树。至于文法什么的，暂时我也还弄不清。既然这样，那不如我们直接看GO源代码一窥究竟，看看golang语言团队的人是怎么解析的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">nextStdChunk</span><span class="hljs-params">(layout <span class="hljs-type">string</span>)</span></span> (prefix <span class="hljs-type">string</span>, std <span class="hljs-type">int</span>, suffix <span class="hljs-type">string</span>) &#123;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(layout); i++ &#123;<br>        <span class="hljs-keyword">switch</span> c := <span class="hljs-type">int</span>(layout[i]); c &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;J&#x27;</span>: <span class="hljs-comment">// January, Jan</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">3</span> &amp;&amp; layout[i:i+<span class="hljs-number">3</span>] == <span class="hljs-string">&quot;Jan&quot;</span> &#123;<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">7</span> &amp;&amp; layout[i:i+<span class="hljs-number">7</span>] == <span class="hljs-string">&quot;January&quot;</span> &#123;<br>                    <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdLongMonth, layout[i+<span class="hljs-number">7</span>:]<br>                &#125;<br>                <span class="hljs-keyword">if</span> !startsWithLowerCase(layout[i+<span class="hljs-number">3</span>:]) &#123;<br>                    <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdMonth, layout[i+<span class="hljs-number">3</span>:]<br>                &#125;<br>            &#125;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;M&#x27;</span>: <span class="hljs-comment">// Monday, Mon, MST</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">3</span> &#123;<br>                <span class="hljs-keyword">if</span> layout[i:i+<span class="hljs-number">3</span>] == <span class="hljs-string">&quot;Mon&quot;</span> &#123;<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">6</span> &amp;&amp; layout[i:i+<span class="hljs-number">6</span>] == <span class="hljs-string">&quot;Monday&quot;</span> &#123;<br>                        <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdLongWeekDay, layout[i+<span class="hljs-number">6</span>:]<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> !startsWithLowerCase(layout[i+<span class="hljs-number">3</span>:]) &#123;<br>                        <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdWeekDay, layout[i+<span class="hljs-number">3</span>:]<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> layout[i:i+<span class="hljs-number">3</span>] == <span class="hljs-string">&quot;MST&quot;</span> &#123;<br>                    <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdTZ, layout[i+<span class="hljs-number">3</span>:]<br>                &#125;<br>            &#125;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-comment">// 01, 02, 03, 04, 05, 06</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">2</span> &amp;&amp; <span class="hljs-string">&#x27;1&#x27;</span> &lt;= layout[i+<span class="hljs-number">1</span>] &amp;&amp; layout[i+<span class="hljs-number">1</span>] &lt;= <span class="hljs-string">&#x27;6&#x27;</span> &#123;<br>                <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], std0x[layout[i+<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;1&#x27;</span>], layout[i+<span class="hljs-number">2</span>:]<br>            &#125;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-comment">// 15, 1</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">2</span> &amp;&amp; layout[i+<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;5&#x27;</span> &#123;<br>                <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdHour, layout[i+<span class="hljs-number">2</span>:]<br>            &#125;<br>            <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdNumMonth, layout[i+<span class="hljs-number">1</span>:]<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-comment">// 2006, 2</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">4</span> &amp;&amp; layout[i:i+<span class="hljs-number">4</span>] == <span class="hljs-string">&quot;2006&quot;</span> &#123;<br>                <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdLongYear, layout[i+<span class="hljs-number">4</span>:]<br>            &#125;<br>            <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdDay, layout[i+<span class="hljs-number">1</span>:]<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;_&#x27;</span>: <span class="hljs-comment">// _2, _2006</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">2</span> &amp;&amp; layout[i+<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;2&#x27;</span> &#123;<br>                <span class="hljs-comment">//_2006 is really a literal _, followed by stdLongYear</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">5</span> &amp;&amp; layout[i+<span class="hljs-number">1</span>:i+<span class="hljs-number">5</span>] == <span class="hljs-string">&quot;2006&quot;</span> &#123;<br>                    <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span> : i+<span class="hljs-number">1</span>], stdLongYear, layout[i+<span class="hljs-number">5</span>:]<br>                &#125;<br>                <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdUnderDay, layout[i+<span class="hljs-number">2</span>:]<br>            &#125;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;3&#x27;</span>:<br>            <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdHour12, layout[i+<span class="hljs-number">1</span>:]<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;4&#x27;</span>:<br>            <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdMinute, layout[i+<span class="hljs-number">1</span>:]<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;5&#x27;</span>:<br>            <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdSecond, layout[i+<span class="hljs-number">1</span>:]<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;P&#x27;</span>: <span class="hljs-comment">// PM</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">2</span> &amp;&amp; layout[i+<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;M&#x27;</span> &#123;<br>                <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdPM, layout[i+<span class="hljs-number">2</span>:]<br>            &#125;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;p&#x27;</span>: <span class="hljs-comment">// pm</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">2</span> &amp;&amp; layout[i+<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;m&#x27;</span> &#123;<br>                <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdpm, layout[i+<span class="hljs-number">2</span>:]<br>            &#125;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>: <span class="hljs-comment">// -070000, -07:00:00, -0700, -07:00, -07</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">7</span> &amp;&amp; layout[i:i+<span class="hljs-number">7</span>] == <span class="hljs-string">&quot;-070000&quot;</span> &#123;<br>                <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdNumSecondsTz, layout[i+<span class="hljs-number">7</span>:]<br>            &#125;<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">9</span> &amp;&amp; layout[i:i+<span class="hljs-number">9</span>] == <span class="hljs-string">&quot;-07:00:00&quot;</span> &#123;<br>                <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdNumColonSecondsTZ, layout[i+<span class="hljs-number">9</span>:]<br>            &#125;<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">5</span> &amp;&amp; layout[i:i+<span class="hljs-number">5</span>] == <span class="hljs-string">&quot;-0700&quot;</span> &#123;<br>                <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdNumTZ, layout[i+<span class="hljs-number">5</span>:]<br>            &#125;<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">6</span> &amp;&amp; layout[i:i+<span class="hljs-number">6</span>] == <span class="hljs-string">&quot;-07:00&quot;</span> &#123;<br>                <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdNumColonTZ, layout[i+<span class="hljs-number">6</span>:]<br>            &#125;<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">3</span> &amp;&amp; layout[i:i+<span class="hljs-number">3</span>] == <span class="hljs-string">&quot;-07&quot;</span> &#123;<br>                <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdNumShortTZ, layout[i+<span class="hljs-number">3</span>:]<br>            &#125;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;Z&#x27;</span>: <span class="hljs-comment">// Z070000, Z07:00:00, Z0700, Z07:00,</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">7</span> &amp;&amp; layout[i:i+<span class="hljs-number">7</span>] == <span class="hljs-string">&quot;Z070000&quot;</span> &#123;<br>                <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdISO8601SecondsTZ, layout[i+<span class="hljs-number">7</span>:]<br>            &#125;<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">9</span> &amp;&amp; layout[i:i+<span class="hljs-number">9</span>] == <span class="hljs-string">&quot;Z07:00:00&quot;</span> &#123;<br>                <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdISO8601ColonSecondsTZ, layout[i+<span class="hljs-number">9</span>:]<br>            &#125;<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">5</span> &amp;&amp; layout[i:i+<span class="hljs-number">5</span>] == <span class="hljs-string">&quot;Z0700&quot;</span> &#123;<br>                <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdISO8601TZ, layout[i+<span class="hljs-number">5</span>:]<br>            &#125;<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">6</span> &amp;&amp; layout[i:i+<span class="hljs-number">6</span>] == <span class="hljs-string">&quot;Z07:00&quot;</span> &#123;<br>                <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdISO8601ColonTZ, layout[i+<span class="hljs-number">6</span>:]<br>            &#125;<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(layout) &gt;= i+<span class="hljs-number">3</span> &amp;&amp; layout[i:i+<span class="hljs-number">3</span>] == <span class="hljs-string">&quot;Z07&quot;</span> &#123;<br>                <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], stdISO8601ShortTZ, layout[i+<span class="hljs-number">3</span>:]<br>            &#125;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;.&#x27;</span>: <span class="hljs-comment">// .000 or .999 - repeated digits for fractional seconds.</span><br>            <span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span> &lt; <span class="hljs-built_in">len</span>(layout) &amp;&amp; (layout[i+<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;0&#x27;</span> || layout[i+<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>                ch := layout[i+<span class="hljs-number">1</span>]<br>                j := i + <span class="hljs-number">1</span><br>                <span class="hljs-keyword">for</span> j &lt; <span class="hljs-built_in">len</span>(layout) &amp;&amp; layout[j] == ch &#123;<br>                    j++<br>                &#125;<br>                <span class="hljs-comment">// String of digits must end here - only fractional second is all digits.</span><br>                <span class="hljs-keyword">if</span> !isDigit(layout, j) &#123;<br>                    std := stdFracSecond0<br>                    <span class="hljs-keyword">if</span> layout[i+<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;9&#x27;</span> &#123;<br>                        std = stdFracSecond9<br>                    &#125;<br>                    std |= (j - (i + <span class="hljs-number">1</span>)) &lt;&lt; stdArgShift<br>                    <span class="hljs-keyword">return</span> layout[<span class="hljs-number">0</span>:i], std, layout[j:]<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> layout, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码有点长，不过逻辑还是很清楚的，我们吧上面表格中的那些常用项的先进行排序，然后根据排序结果，对首个字符进行分类，相同首字符的项放在一个case里面判断处理。看起来这里是简单的进行判断处理，其实这就是编译里面词法分析的一个步骤（分词）。</p><p>纵观整个format.go文件，其实这个日期处理还是挺复杂的，包括日期计算，格式解析，对日期进行格式化等。</p><p>纯搬运：<a href="https://www.jianshu.com/p/c7f7fbb16932">https://www.jianshu.com/p/c7f7fbb16932</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker的基本使用</title>
    <link href="/articles/docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html"/>
    <url>/articles/docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html</url>
    
    <content type="html"><![CDATA[<p>docker 镜像存放的官方网站: <a href="https://hub.docker.com/">docker hub</a></p><h4 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it ubuntu:14.04<br></code></pre></td></tr></table></figure><h4 id="查看当前运行的容器"><a href="#查看当前运行的容器" class="headerlink" title="查看当前运行的容器"></a>查看当前运行的容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps <br></code></pre></td></tr></table></figure><h4 id="查看已经退出的容器"><a href="#查看已经退出的容器" class="headerlink" title="查看已经退出的容器"></a>查看已经退出的容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps -a<br></code></pre></td></tr></table></figure><h4 id="将容器转化为镜像"><a href="#将容器转化为镜像" class="headerlink" title="将容器转化为镜像"></a>将容器转化为镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker commit -m “注释” -a “nil66” 容器id nil66/ubuntu-nginx:v1<br></code></pre></td></tr></table></figure><h5 id="m参数用来来指定提交的说明信息；-a可以指定用户信息的；79c761f627f3代表的时容器的id；saymagic-ubuntu-nginx-v1指定目标镜像的用户名、仓库名和-tag-信息。创建成功后会返回这个镜像的-ID-信息。注意的是，你一定要将saymagic改为你自己的用户名。因为下文还会用到此用户名。"><a href="#m参数用来来指定提交的说明信息；-a可以指定用户信息的；79c761f627f3代表的时容器的id；saymagic-ubuntu-nginx-v1指定目标镜像的用户名、仓库名和-tag-信息。创建成功后会返回这个镜像的-ID-信息。注意的是，你一定要将saymagic改为你自己的用户名。因为下文还会用到此用户名。" class="headerlink" title="-m参数用来来指定提交的说明信息；-a可以指定用户信息的；79c761f627f3代表的时容器的id；saymagic&#x2F;ubuntu-nginx:v1指定目标镜像的用户名、仓库名和 tag 信息。创建成功后会返回这个镜像的 ID 信息。注意的是，你一定要将saymagic改为你自己的用户名。因为下文还会用到此用户名。"></a>-m参数用来来指定提交的说明信息；-a可以指定用户信息的；79c761f627f3代表的时容器的id；saymagic&#x2F;ubuntu-nginx:v1指定目标镜像的用户名、仓库名和 tag 信息。创建成功后会返回这个镜像的 ID 信息。注意的是，你一定要将saymagic改为你自己的用户名。因为下文还会用到此用户名。</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">登录https://hub.docker.com/<br>docker login<br></code></pre></td></tr></table></figure><h4 id="推送镜像到hub"><a href="#推送镜像到hub" class="headerlink" title="推送镜像到hub"></a>推送镜像到hub</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker push nil66/ubuntu-nginx:v1<br></code></pre></td></tr></table></figure><h4 id="docker中批量删除-tag为none的镜像"><a href="#docker中批量删除-tag为none的镜像" class="headerlink" title="docker中批量删除 tag为none的镜像"></a>docker中批量删除 tag为none的镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker images|grep none|awk &#x27;&#123;print $3&#125;&#x27;|xargs docker rmi<br></code></pre></td></tr></table></figure><h4 id="docker中宿主机与容器（container）互相拷贝传递文件的方法"><a href="#docker中宿主机与容器（container）互相拷贝传递文件的方法" class="headerlink" title="docker中宿主机与容器（container）互相拷贝传递文件的方法"></a>docker中宿主机与容器（container）互相拷贝传递文件的方法</h4><p>不管容器有没有启动，拷贝命令都会生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker cp 容器id:/opt/file.txt /test/<br>docker cp /test/file.txt 容器id:/test/<br></code></pre></td></tr></table></figure><h4 id="使用dockerFile构建镜像"><a href="#使用dockerFile构建镜像" class="headerlink" title="使用dockerFile构建镜像"></a>使用dockerFile构建镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build -t=&quot;镜像名称:镜像版本号&quot; .<br></code></pre></td></tr></table></figure><h4 id="docker端口映射"><a href="#docker端口映射" class="headerlink" title="docker端口映射"></a>docker端口映射</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -p 8080:80 -it ubuntu /bin/bash<br></code></pre></td></tr></table></figure><p>使用docker需要了解，容器，镜像区别，还有层的概念，具体可自行百度</p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新建一个vue项目</title>
    <link href="/articles/%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAvue%E9%A1%B9%E7%9B%AE.html"/>
    <url>/articles/%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAvue%E9%A1%B9%E7%9B%AE.html</url>
    
    <content type="html"><![CDATA[<p><strong>一、安装node环境</strong></p><p><strong>二、搭建vue项目环境</strong></p><p>1.全局安装vue-cli</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">　npm install --global vue-cli<br></code></pre></td></tr></table></figure><p>2.创建一个基于 webpack 模板的新项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vue init webpack vue-demo<br></code></pre></td></tr></table></figure><p> <img src="/articles/%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAvue%E9%A1%B9%E7%9B%AE/001.png" class="" title="image.png"></p><p>说明：</p><ul><li><p>Vue build &#x3D;&#x3D;&gt; 打包方式，回车即可；</p></li><li><p>Install vue-router &#x3D;&#x3D;&gt; 是否要安装 vue-router，项目中肯定要使用到 所以Y 回车；</p></li><li><p>Use ESLint to lint your code &#x3D;&#x3D;&gt; 是否需要 js 语法检测 目前我们不需要 所以 n 回车；</p></li><li><p>Set up unit tests &#x3D;&#x3D;&gt; 是否安装 单元测试工具 目前我们不需要 所以 n 回车；</p></li><li><p>Setup e2e tests with Nightwatch &#x3D;&#x3D;&gt; 是否需要 端到端测试工具 目前我们不需要 所以 n 回车；</p></li></ul><p>3.安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i<br></code></pre></td></tr></table></figure><p>4、npm run dev，启动项目</p><p><strong>三、vue项目目录讲解</strong></p><style>.fimhipbirwdw{ height: 200px;}</style><img src="/articles/%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAvue%E9%A1%B9%E7%9B%AE/002.png" class="fimhipbirwdw"><p>1、build：构建脚本目录</p><p>　　　　1）build.js  &#x3D;&#x3D;&gt; 生产环境构建脚本；&#96;&#96;</p><p>　　　　2）check-versions.js  &#x3D;&#x3D;&gt; 检查npm，node.js版本；</p><p>　　　　3）utils.js  &#x3D;&#x3D;&gt; 构建相关工具方法；</p><p>　　　　4）vue-loader.conf.js  &#x3D;&#x3D;&gt; 配置了css加载器以及编译css之后自动添加前缀；</p><p>　　　　5）webpack.base.conf.js  &#x3D;&#x3D;&gt; webpack基本配置；</p><p>　　　　6）webpack.dev.conf.js  &#x3D;&#x3D;&gt; webpack开发环境配置；</p><p>　　　　7）webpack.prod.conf.js  &#x3D;&#x3D;&gt; webpack生产环境配置；</p><p>　　2、config：项目配置</p><p>　　　　1）dev.env.js  &#x3D;&#x3D;&gt; 开发环境变量；</p><p>　　　　2）index.js  &#x3D;&#x3D;&gt; 项目配置文件；</p><p>　　　　3）prod.env.js  &#x3D;&#x3D;&gt; 生产环境变量；</p><p>　　3、node_modules：npm 加载的项目依赖模块</p><p>　　4、src：这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件：</p><p>　　　　1）assets：资源目录，放置一些图片或者公共js、公共css。这里的资源会被webpack构建；</p><p>　　　　2）components：组件目录，我们写的组件就放在这个目录里面；</p><p>　　　　3）router：前端路由，我们需要配置的路由路径写在index.js里面；</p><p>　　　　4）App.vue：根组件；</p><p>　　　　5）main.js：入口js文件；</p><p>　　5、static：静态资源目录，如图片、字体等。不会被webpack构建</p><p>　　6、index.html：首页入口文件，可以添加一些 meta 信息等</p><p>　　7、package.json：npm包配置文件，定义了项目的npm脚本，依赖包等信息&#96;&#96;</p><p>　　8、README.md：项目的说明文档，markdown 格式</p><p>　　9、.xxxx文件：这些是一些配置文件，包括语法配置，git配置等</p><p>&#x2F;&#x2F;原文中包含vue基本用法</p><p><a href="https://www.cnblogs.com/yanxulan/p/8978732.html">https://www.cnblogs.com/yanxulan/p/8978732.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot打包的jar项目，不需要安装jdk环境启动</title>
    <link href="/articles/springboot%E6%89%93%E5%8C%85%E7%9A%84jar%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E5%AE%89%E8%A3%85jdk%E7%8E%AF%E5%A2%83%E5%90%AF%E5%8A%A8.html"/>
    <url>/articles/springboot%E6%89%93%E5%8C%85%E7%9A%84jar%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E5%AE%89%E8%A3%85jdk%E7%8E%AF%E5%A2%83%E5%90%AF%E5%8A%A8.html</url>
    
    <content type="html"><![CDATA[<p>因为服务器上是JDK7，而springboot至少用JDK8才行，但是又因为是很老的项目，不是很清楚能不能换JDK8，有风险，因此选择以前项目用JDK7，而新的springboot用JDK8.<br>步骤一：打包好springboot项目为jar包。<br>步骤二：找到安装好的JDK目录，将jdk和jre一起复制出来。<br>步骤三：将这三个文件放到同一个文件夹下，然后新建一个bat文件。<br>步骤四：bat文件中写入：start jre1.8.0_144&#x2F;bin&#x2F;java -jar ssqxDMQ.jar （就是制定启动环境而已）</p><p>其他类似项目也可以通过这种方式去做</p><img src="/articles/springboot%E6%89%93%E5%8C%85%E7%9A%84jar%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E5%AE%89%E8%A3%85jdk%E7%8E%AF%E5%A2%83%E5%90%AF%E5%8A%A8/001.png" class=""><p>这样做的好处就是，1、不用安装多的环境，防止对以前的项目造成影响；2、需要多台服务器部署时，不用每台服务器都安装环境。</p><p><a href="https://blog.csdn.net/qq_41253573/article/details/93178562">https://blog.csdn.net/qq_41253573/article/details/93178562</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>spring-boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Fiddle对夜神模拟器进行抓包的设置</title>
    <link href="/articles/%E4%BD%BF%E7%94%A8Fiddle%E5%AF%B9%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85%E7%9A%84%E8%AE%BE%E7%BD%AE.html"/>
    <url>/articles/%E4%BD%BF%E7%94%A8Fiddle%E5%AF%B9%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85%E7%9A%84%E8%AE%BE%E7%BD%AE.html</url>
    
    <content type="html"><![CDATA[<p>一、配置Fiddle参数设置<br>1、Tools-&gt;Options</p><style>.hkksskmqzhnt{ height: 500px;}</style><img src="/articles/%E4%BD%BF%E7%94%A8Fiddle%E5%AF%B9%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85%E7%9A%84%E8%AE%BE%E7%BD%AE/001.png" class="hkksskmqzhnt"><p>2、HTTPS-&gt;勾选Ignore …</p><style>.kqpxhwejnofh{ height: 400px;}</style><img src="/articles/%E4%BD%BF%E7%94%A8Fiddle%E5%AF%B9%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85%E7%9A%84%E8%AE%BE%E7%BD%AE/003.png" class="kqpxhwejnofh"><p>3、如果HTTPS下没有Ignore选项，勾选Action-&gt;Reset …</p><img src="/articles/%E4%BD%BF%E7%94%A8Fiddle%E5%AF%B9%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85%E7%9A%84%E8%AE%BE%E7%BD%AE/002.png" class="" title="image.png"><p>4、Connections -&gt;记下port号8888，设置代理端口。Connections-&gt;勾选Allow</p><style>.vrgfbdydujwl{ height: 400px;}</style><img src="/articles/%E4%BD%BF%E7%94%A8Fiddle%E5%AF%B9%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85%E7%9A%84%E8%AE%BE%E7%BD%AE/004.png" class="vrgfbdydujwl"><p>Fiddle配置操作成功</p><p>二、夜神模拟器设置<br>1、设置代理ip和代理端口</p><style>.ygtwcfdhfbiv{ height: 500px;}</style><img src="/articles/%E4%BD%BF%E7%94%A8Fiddle%E5%AF%B9%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85%E7%9A%84%E8%AE%BE%E7%BD%AE/005.png" class="ygtwcfdhfbiv"><p>点击WiredSSID，长按鼠标左键数秒，弹出弹窗</p><style>.drtiecxoknpk{ height: 500px;}</style><img src="/articles/%E4%BD%BF%E7%94%A8Fiddle%E5%AF%B9%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85%E7%9A%84%E8%AE%BE%E7%BD%AE/006.png" class="drtiecxoknpk"><img src="/articles/%E4%BD%BF%E7%94%A8Fiddle%E5%AF%B9%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85%E7%9A%84%E8%AE%BE%E7%BD%AE/008.png" class="" title="image.png"><style>.cvzroakwixtx{ height: 500px;}</style><img src="/articles/%E4%BD%BF%E7%94%A8Fiddle%E5%AF%B9%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85%E7%9A%84%E8%AE%BE%E7%BD%AE/007.png" class="cvzroakwixtx"><p>2、安装Fiddle证书<br>在模拟器浏览器输入<a href="http://ipv4.fiddler:8888/">http://ipv4.fiddler:8888</a> ,下载安装证书</p><p>部分网络不通需要设置桥接</p><style>.ccrbzxoncise{ height: 400px;}</style><img src="/articles/%E4%BD%BF%E7%94%A8Fiddle%E5%AF%B9%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85%E7%9A%84%E8%AE%BE%E7%BD%AE/010.png" class="ccrbzxoncise"><p>打开地址如果弹出证书警告,一直点继续就好了</p><style>.wlgkdecrsvto{ height: 500px;}</style><img src="/articles/%E4%BD%BF%E7%94%A8Fiddle%E5%AF%B9%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85%E7%9A%84%E8%AE%BE%E7%BD%AE/009.png" class="wlgkdecrsvto"><p>下载完证书安装证书,就可以抓取模拟器内网络请求</p><p>参考</p><p><a href="https://blog.csdn.net/agree_qy/article/details/82490940">https://blog.csdn.net/agree_qy/article/details/82490940</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>抓包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL数据库中把一个表中的数据复制到另一个表中</title>
    <link href="/articles/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E6%8A%8A%E4%B8%80%E4%B8%AA%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%8D%E5%88%B6%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AA%E8%A1%A8%E4%B8%AD.html"/>
    <url>/articles/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E6%8A%8A%E4%B8%80%E4%B8%AA%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%8D%E5%88%B6%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AA%E8%A1%A8%E4%B8%AD.html</url>
    
    <content type="html"><![CDATA[<p>1、如果是整个表复制表达如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> table1 <span class="hljs-keyword">select</span>  <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> table2<br></code></pre></td></tr></table></figure><p>2、如果是有选择性的复制数据表达如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> table1(column1,column2,column3...) <span class="hljs-keyword">select</span> column1,column2,colunm3... <span class="hljs-keyword">from</span> table2<br></code></pre></td></tr></table></figure><p>3、一个数据库中的表中的数据复制到另一个数据库中的一个表，使用方法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 数据库A.dbo.table1(col1,col2,col3...) <span class="hljs-keyword">select</span> <br>col1,col2,col3... <span class="hljs-keyword">from</span> 数据库B.dbo.table2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS6.5下Redis安装与配置</title>
    <link href="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE.html"/>
    <url>/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE.html</url>
    
    <content type="html"><![CDATA[<p>本文详细介绍redis单机单实例安装与配置，服务及开机自启动</p><p>（**以下配置基于CentOS release 6.5 Final， redis版本3.0.2 [redis版本号中间位是偶数的是稳定版，奇数的为非稳定版]**）</p><h1 id="一．安装redis"><a href="#一．安装redis" class="headerlink" title="一．安装redis"></a><strong>一．安装redis</strong></h1><ol><li>下载redis安装包</li></ol><p>可去官网<a href="http://redis.io/">http://redis.io</a> ，也可通过wget命令，</p><p><code>wget http://download.redis.io/redis-stable.tar.gz</code></p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/1.png" class=""><ol start="2"><li>解压</li></ol><p><code>tar –zxvf redis-stable.tar.gz</code></p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/2.png" class=""><ol start="3"><li>编译、安装</li></ol><p><code>cd redis-stable</code></p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/3.png" class=""><p><code>make</code></p><p>如果提示gcc command不识别，请自行安装gcc;</p><p>如果提示couldn’t execute tcl : no such file or dicrectory，请自行安装tcl;</p><p>如果提示</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/4.png" class=""><p>请执行make distclean，然后再make</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/5.png" class=""><p>Make成功之后，会在src目录下多出一些文件，如下</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/6.png" class=""><p>可手动拷贝redis-server、redis-cli、redis-check-aof、redis-check-dump等至&#x2F;usr&#x2F;local&#x2F;bin目录下，也可执行make install，此处执行make install</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/7.png" class=""><p>可查看，&#x2F;usr&#x2F;local&#x2F;bin下已有这些文件。</p><p><strong>注意</strong>：若此时执行redis-server –v (查看版本命令)，若提示redis-server command not found，则需要将&#x2F;usr&#x2F;local&#x2F;bin目录加到环境变量，如何添加，此处不做详细介绍，可查看修改&#x2F;etc&#x2F;profile，(查看环境变量命令：echo $PATH)</p><p>正常如下</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/8.png" class=""><p>至此，redis安装完成，接着配置。</p><h1 id="二．修改配置文件-conf"><a href="#二．修改配置文件-conf" class="headerlink" title="二．修改配置文件.conf"></a><strong>二．修改配置文件.conf</strong></h1><ol><li>创建配置文件目录，dump file 目录，进程pid目录，log目录等</li></ol><p>配置文件一般放在&#x2F;etc&#x2F;下，创建redis目录</p><p><code>cd /etc/</code></p><p><code>mkdir redis</code></p><p>ll 查看创建的redis目录</p><p>~</p><p>dump file、进程pid、log目录等，一般放在&#x2F;var&#x2F;目录下，</p><p><code>cd /var/</code></p><p><code>mkdir redis</code></p><p><code>cd redis</code></p><p><code>mkdir data log run</code></p><p>至此，目录创建完毕</p><ol start="2"><li>修改配置文件，配置参数</li></ol><p>首先拷贝解压包下的redis.conf文件至&#x2F;etc&#x2F;redis</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/9.png" class=""><p>查看&#x2F;etc&#x2F;redis&#x2F;redis.conf</p><p>cd &#x2F;etc&#x2F;redis&#x2F;</p><p>ll</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/10.png" class=""><p>打开redis.conf文件</p><p>修改端口(默认6379)</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/11.png" class=""><p>修改pid目录为新建目录</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/12.png" class=""><p>修改dump目录为新建目录</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/13.png" class=""><p>修改log存储目录为新建目录</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/14.png" class=""><p>修改密码，修改配置文件中requirepass 属性<br>requirepass 123   指定密码123</p><ol start="3"><li>持久化</li></ol><p>默认rdb，可选择是否开启aof，若开启，修改配置文件appendonly</p><ol start="4"><li>启动redis，查看各目录下文件</li></ol><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/15.png" class=""><p>如果有警告，可以参考控制台提示解决，有的可参考<a href="https://blog.csdn.net/a491857321/article/details/52006376">https://blog.csdn.net/a491857321/article/details/52006376</a></p><p>查看进程</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/18.png" class=""><p>redis已启动</p><p>查看dump, log, pid等</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/19.png" class=""><p>发现只有日志，没有dump和pid信息，是因为当前redis服务仍然是console模式运行的，且没有数据存储操作</p><p>停止redis服务，修改配置文件使得redis在background运行</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/16.png" class=""><p>改成yes，保存，重启redis服务</p><p>查看pid信息，如下</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/001.png" class=""><p>查看dump信息</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/002.png" class=""><p>若配置了aof持久化方式，data目录下还会有aof的相关文件</p><ol start="5"><li>客户端连接redis</li></ol><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/003.png" class=""><p>默认端口6379</p><ol start="6"><li>至此，redis基础配置完毕，若有其他相关配置调整，可查找文档再修改</li></ol><h1 id="三．服务及开机自启动"><a href="#三．服务及开机自启动" class="headerlink" title="三．服务及开机自启动"></a><strong>三．服务及开机自启动</strong></h1><ol><li>创建redis启动脚本</li></ol><p>拷贝解压包下utils下redis启动脚本至&#x2F;etc&#x2F;init.d&#x2F;</p><p>cp redis_init_script &#x2F;etc&#x2F;init.d&#x2F;</p><p>修改脚本名称(也可不修改)为redis</p><p>查看ll</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/004.png" class=""><p>修改脚本pid及conf路径为实际路径</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/005.png" class=""><p>生产环境下，配置时，配置文件、pid等最好加上端口标识，以便区分，如</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/006.png" class=""><p>保存</p><p>退出</p><p>至此，在&#x2F;etc&#x2F;init.d&#x2F;目录下，已经可以通过service redis start&#x2F;stop 命令启动和关闭redis</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/007.png" class=""><p>若在其他目录下，不能够使用这2个命令，请继续配置2)，添加权限</p><ol start="2"><li>给启动脚本添加权限</li></ol><p><code>chmod +x /etc/init.d/redis</code></p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/008.png" class=""><p>实际命令，根据目录的不同，会不一样</p><p>相应的删除权限是</p><p><code>chmod –x /etc/init.d/redis</code></p><p>如果需要在开机的时候，redis服务自动启动，可继续3)</p><ol start="3"><li>设置自启动</li></ol><p><code>chkconfig redis on</code></p><p>如果运行报错，提示</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/009.png" class=""><p>是因为没有在启动脚本里加入redis启动优先级信息，可添加如下</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/010.png" class=""><p>再次执行chkconfig redis on，成功</p><img src="/articles/CentOS6-5%E4%B8%8BRedis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/011.png" class=""><p>至此，自启动配置完毕</p><p>参考</p><p><a href="https://blog.csdn.net/ludonqin/article/details/47211109">https://blog.csdn.net/ludonqin/article/details/47211109</a></p><p><a href="https://blog.csdn.net/a491857321/article/details/52006376">https://blog.csdn.net/a491857321/article/details/52006376</a></p><p><a href="https://www.cnblogs.com/x-ll123/p/9717351.html">https://www.cnblogs.com/x-ll123/p/9717351.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot starter自定义</title>
    <link href="/articles/Spring-Boot-starter%E8%87%AA%E5%AE%9A%E4%B9%89.html"/>
    <url>/articles/Spring-Boot-starter%E8%87%AA%E5%AE%9A%E4%B9%89.html</url>
    
    <content type="html"><![CDATA[<p>前些日子在公司接触了<code>spring boot</code>和<code>spring cloud</code>,有感于其大大简化了spring的配置过程，十分方便使用者快速构建项目，而且拥有丰富的starter供开发者使用。但是由于其自动化配置的原因，往往导致出现问题，新手无法快速定位问题。这里我就来总结一下spring boot 自定义starter的过程,相信大家看完这篇文章之后，能够对<br><code>spring boot starter</code>的运行原理有了基本的认识。</p><p>为了节约你的时间，本篇文章的主要内容有：</p><ul><li>spring boot starter的自定义</li><li>spring boot auto-configuration的两种方式,spring.factories和注解</li><li>Conditional注解的使用</li></ul><h3 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h3><p>相信接触过spring boot的开发者都会被其丰富的starter所吸引，如果你想给项目添加redis支持，你就可以直接引用<br><code>spring-boot-starter-redis</code>，如果你想使项目微服务化，你可以直接使用<br><code>spring-cloud-starter-eureka</code>。这些都是spring boot所提供的便利开发者的组件，大家也可以自定义自己的starter并开源出去供开发者使用。<br>创建自己的starter项目需要maven依赖是如下所示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="核心配置类StorageAutoConfigure"><a href="#核心配置类StorageAutoConfigure" class="headerlink" title="核心配置类StorageAutoConfigure"></a>核心配置类StorageAutoConfigure</h3><p>构建starter的关键是编写一个装配类，这个类可以提供该starter核心bean。这里我们的starter提供一个类似<br><code>redis</code>的键值存储功能的bean，我们叫它为<br><code>StorageService</code>。负责对这个bean进行自动化装配的类叫做<br><code>StorageAutoConfigure</code>。保存application.properties配置信息的类叫做<br><code>StorageServiceProperties</code>。这三种类像是铁三角一样，你可以在很多的<br><code>spring-boot-starter</code>中看到他们的身影。<br>我们首先来看<br><code>StorageAutoConfigure</code>的定义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnClass(StorageService.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(StorageServiceProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StorageAutoConfigure</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StorageServiceProperties properties;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean(StorageService.class)</span><br>    <span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;storage.service&quot;, value = &quot;enabled&quot;, havingValue = &quot;true&quot;)</span><br>    StorageService <span class="hljs-title function_">exampleService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StorageService</span>(properties);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们首先讲一下源码中注解的作用。</p><ul><li><code>@Configuration</code>,被该注解注释的类会提供一个或则多个<br><code>@bean</code>修饰的方法并且会被spring容器处理来生成<br><code>bean definitions</code>。</li><li><code>@bean</code>注解是必须修饰函数的，该函数可以提供一个<br><code>bean</code>。而且该函数的函数名必须和bean的名称一致，除了首字母不需要大写。</li><li><code>@ConditionalOnClass</code>注解是条件判断的注解，表示对应的类在classpath目录下存在时，才会去解析对应的配置文件。</li><li><code>@EnableConfigurationProperties</code>注解给出了该配置类所需要的配置信息类，也就是<br><code>StorageServiceProperties</code>类，这样spring容器才会去读取配置信息到<br><code>StorageServiceProperties</code>对象中。</li><li><code>@ConditionalOnMissingBean</code>注解也是条件判断的注解，表示如果不存在对应的bean条件才成立，这里就表示如果已经有<br><code>StorageService</code>的bean了，那么就不再进行该bean的生成。这个注解十分重要，涉及到默认配置和用户自定义配置的原理。也就是说用户可以自定义一个<br><code>StorageService</code>的bean,这样的话，spring容器就不需要再初始化这个默认的bean了。</li><li><code>ConditionalOnProperty</code>注解是条件判断的注解，表示如果配置文件中的响应配置项数值为true,才会对该bean进行初始化。</li></ul><p>看到这里，大家大概都明白了<br><code>StorageAutoConfigure</code>的作用了吧，spring容器会读取相应的配置信息到<br><code>StorageServiceProperties</code>中，然后依据调节判断初始化StorageService这个bean。集成了该<br><code>starter</code>的项目就可以直接使用<br><code>StorageService</code>来存储键值信息了。</p><h3 id="配置信息类StorageServiceProperties"><a href="#配置信息类StorageServiceProperties" class="headerlink" title="配置信息类StorageServiceProperties"></a>配置信息类StorageServiceProperties</h3><p>存储配置信息的类<br><code>StorageServiceProperties</code>很简单，源码如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(&quot;storage.service&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StorageServiceProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String url;<br>    <br>    ......<br>    <span class="hljs-comment">//一系列的getter和setter函数</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>@ConfigurationProperties</code>注解就是让spring容器知道该配置类的配置项前缀是什么，上述的源码给出的配置信息项有<br><code>storage.service.username</code>,<br><code>storage.service.password</code>和<br><code>storage.service.url</code>，类似于数据库的host和用户名密码。这些配置信息都会由spring容器从<br><code>application.properties</code>文件中读取出来设置到该类中。</p><h3 id="starter提供功能的StorageService"><a href="#starter提供功能的StorageService" class="headerlink" title="starter提供功能的StorageService"></a>starter提供功能的StorageService</h3><p><code>StorageService</code>类是提供整个starter的核心功能的类，也就是提供键值存储的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StorageService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(StorageService.class);<br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> HashMap&lt;String, Object&gt; storage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StorageService</span><span class="hljs-params">(StorageServiceProperties properties)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.url = properties.getUrl();<br>        <span class="hljs-built_in">this</span>.username = properties.getUsername();<br>        <span class="hljs-built_in">this</span>.password = properties.getPassword();<br>        logger.debug(<span class="hljs-string">&quot;init storage with url &quot;</span> + url + <span class="hljs-string">&quot; name: &quot;</span> + username + <span class="hljs-string">&quot; password: &quot;</span> + password);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(String key, Object val)</span> &#123;<br>        storage.put(key, val);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object  <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> storage.get(key);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注解配置和spring-factories"><a href="#注解配置和spring-factories" class="headerlink" title="注解配置和spring.factories"></a>注解配置和spring.factories</h3><p>自定义的<br><code>starter</code>有两种方式来通知spring容器导入自己的auto-configuration类，也就是本文当中的<br><code>StorageAutoConfigure</code>类。<br>一般都是在<br><code>starter</code>项目的<br><code>resources/META-INF</code>文件夹下的spring.factories文件中加入需要自动化配置类的全限定名称。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span>.EnableAutoConfiguration=starter.StorageAutoConfigure<br></code></pre></td></tr></table></figure><p><code>spring boot</code>项目中的<br><code>EnableAutoConfigurationImportSelector</code>会自动去每个jar的相应文件下查看spring.factories文件内容，并将其中的类加载出来在auto-configuration过程中进行配置。而<br><code>EnableAutoConfigurationImportSelector</code>在<br><code>@EnableAutoConfiguration</code>注解中被<br><code>import</code>。<br>第一种方法只要是引入该starter，那么spring.factories中的auto-configuration类就会被装载，但是如果你希望有更加灵活的方式，那么就使用自定义注解来引入装配类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Import(StorageAutoConfigure.class)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableStorage &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>有了这个注解，你可以在你引入该starter的项目中使用该注解，通过<br><code>@import</code>注解，spring容器会自动加载<br><code>StorageAutoConfigure</code>并自动化进行配置。</p><p>原文：<br><a href="https://www.jianshu.com/p/4735fe7ae921">https://www.jianshu.com/p/4735fe7ae921</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>spring-boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql 中关于获取行号@rownum：=@rownum+1</title>
    <link href="/articles/mysql-%E4%B8%AD%E5%85%B3%E4%BA%8E%E8%8E%B7%E5%8F%96%E8%A1%8C%E5%8F%B7-rownum%EF%BC%9A-rownum-1.html"/>
    <url>/articles/mysql-%E4%B8%AD%E5%85%B3%E4%BA%8E%E8%8E%B7%E5%8F%96%E8%A1%8C%E5%8F%B7-rownum%EF%BC%9A-rownum-1.html</url>
    
    <content type="html"><![CDATA[<p>mysql中没有获取行号的函数，因此需要通过一些自定义语句来进行获取。通常做法是，通过定义用户变量@rownum来保存表中的数据。通过赋值语句@rownum：&#x3D;@rownum+1来累加达到递增行号。</p><p>例如: <code>select a.* ,@rownum:=@rownum+1 from a,(select @rownum:=0) r;</code> 后半部分语句的select @rownum:&#x3D;0 相当于创建了r的新表，其表的列为@rownum，数值为0.</p><p>通过利用变量将@rownum的行进行重新赋值，并显示。可以应用于获取行号.</p><p>对于计算连续最多几天打卡类似的功能</p><p>可以利用打卡日期减去行号，相等最多得自然就是打卡最多得</p><p>可参考：</p><p><a href="https://blog.csdn.net/u012952442/article/details/48294849">https://blog.csdn.net/u012952442/article/details/48294849</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql删除数据后释放磁盘空间</title>
    <link href="/articles/mysql%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%90%8E%E9%87%8A%E6%94%BE%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4.html"/>
    <url>/articles/mysql%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%90%8E%E9%87%8A%E6%94%BE%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4.html</url>
    
    <content type="html"><![CDATA[<p>1.<code>drop table table_name</code> 立刻释放磁盘空间 ，不管是 Innodb和MyISAM ；<br>2.<code>truncate table table_name</code>立刻释放磁盘空间 ，不管是 Innodb和MyISAM;<br>3.<code>delete from table_name</code> 删除表的全部数据，对于MyISAM 会立刻释放磁盘空间 ，而InnoDB 不会释放磁盘空间；<br>4.<code>delete from table_name where xx</code> 带条件的删除, 不管是innodb还是MyISAM都不会释放磁盘空间<br>5.delete操作后使用<code>optimize table table_name</code> 释放磁盘空间，<strong>优化表期间会锁定表</strong>，所以要在空闲时段执行<br><code>optimize table</code> ，测试十几个G数据的表执行optimize table 大概20多分钟。</p><p>注：delete删除数据的时候，mysql并没有把数据文件删除，而是将数据文件的标识位删除，没有整理文件，因此不会彻底释放空间。被删除的数据将会被保存在一个链接清单中，当有新数据写入的时候，mysql会利用这些已删除的空间再写入。即，删除操作会带来一些数据碎片，正是这些碎片在占用硬盘空间。</p><p><code>OPTIMIZE TABLE</code>命令优化表，该命令会重新利用未使用的空间，并整理数据文件的碎片；该命令将会整理表数据和相关的索引数据的物理存储空间，用来减少占用的磁盘空间，并提高访问表时候的IO性能；但是具体对表产生的影响是依赖于表使用的存储引擎的。该命令对视图无效。</p><p>使用<br><code>optimize table table_name</code>出现Table does not support optimize, doing recreate + analyze instead 的解决办法：</p><ul><li><p>After doing substantial insert, update, or delete operations on an <code>InnoDB</code> table that has its own <a href="https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_ibd_file">.ibd file</a> because it was created with the <a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_file_per_table"><code>innodb_file_per_table</code></a> option enabled. The table and indexes are reorganized, and disk space can be reclaimed for use by the operating system.</p><p>理论上来说启用了innodb_file_per_table之后innodb也可以使用optimize（<a href="https://dev.mysql.com/doc/refman/8.0/en/optimize-table.html%EF%BC%89">https://dev.mysql.com/doc/refman/8.0/en/optimize-table.html）</a></p></li></ul><ul><li>innodb的数据库不支持optimize，可以用<br><code>ALTER TABLE table.name ENGINE=&#39;InnoDB&#39;;</code>对旧表以复制的方式新建一个新表，然后删除旧表。操作前最好备份表。</li><li>重新启动mysql ，在启动的时候指定–skip-new或者–safe-mode选项来支持optimize功能 再执行<br><code>optimize table table_name</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">/usr/local/mysql/bin/mysqladmin -uroot -p shutdown  --停止mysql</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">/usr/local/mysql/bin/mysqld --skip-new &amp;  --启动mysql</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">mysql -uroot -p   --在服务器上连接mysql</span><br><span class="hljs-meta prompt_">mysql&gt;</span><span class="language-bash">use db_name;</span><br></code></pre></td></tr></table></figure></li></ul><p>删除数据并执行了<br><code>optimize table</code>释放了磁盘空间；optimize命令优化表 不要频繁操作，另外还发现执行optimize命令 Innodb 引擎的数据库下ibtmp1 文件由原来的几个Gy优化成12M了。<br>但如果数据每天都大量插入，删除数据后不执行<br><code>optimize table</code> insert 数据的时候会占用已经删除那部分数据的空间，数据文件所占用的磁盘空间短时间并不会增长，所以要减少数据文件占用磁盘空间，可以对表进行压缩。</p><p><a href="https://blog.csdn.net/hyfstyle/article/details/89141208">https://blog.csdn.net/hyfstyle/article/details/89141208</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gradle使用maven-publish发布jar包到私有Maven</title>
    <link href="/articles/gradle%E4%BD%BF%E7%94%A8maven-publish%E5%8F%91%E5%B8%83jar%E5%8C%85%E5%88%B0%E7%A7%81%E6%9C%89Maven.html"/>
    <url>/articles/gradle%E4%BD%BF%E7%94%A8maven-publish%E5%8F%91%E5%B8%83jar%E5%8C%85%E5%88%B0%E7%A7%81%E6%9C%89Maven.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// 插件</span><br>apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;maven-publish&#x27;</span><br><br>task sourceJar(<span class="hljs-attr">type:</span> Jar) &#123;<br>    classifier = <span class="hljs-string">&#x27;sources&#x27;</span><br>    from sourceSets.main.allSource<br>&#125;<br><br>publishing &#123;<br>    publications &#123;<br>        myPublication(MavenPublication) &#123;<br>            <span class="hljs-comment">// telling gradle to publish project&#x27;s jar archive (2)</span><br>            from components.java<br>            artifactId <span class="hljs-string">&quot;$project.name&quot;</span><br>            version <span class="hljs-string">&quot;$version&quot;</span><br>            <span class="hljs-comment">//打包源码</span><br>            artifact(sourceJar) &#123;<br>                classifier = <span class="hljs-string">&#x27;sources&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 推送jar到仓库 </span><br>    repositories &#123;<br>        String release = <span class="hljs-string">&quot;https://mvn.xxx.org/repository/xxx-release/&quot;</span><br>        String snapshot = <span class="hljs-string">&quot;https://mvn.xxx.org/repository/xxx-snapshot/&quot;</span><br>        String publishUrl = snapshot<br>        <span class="hljs-keyword">if</span> (version.toString().contains(<span class="hljs-string">&quot;RELEASE&quot;</span>)) &#123;<br>            publishUrl = release<br>        &#125;<br><br>        maven &#123;<br>            url publishUrl<br>            credentials &#123;<br>                username = <span class="hljs-string">&#x27;username&#x27;</span><br>                password = <span class="hljs-string">&#x27;password&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br>group <span class="hljs-string">&#x27;com.king&#x27;</span><br>version <span class="hljs-string">&#x27;0.1.0-SNAPSHOT&#x27;</span><br><br>sourceCompatibility = <span class="hljs-number">1.8</span><br><br>repositories &#123;<br>    maven &#123; url <span class="hljs-string">&#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27;</span> &#125;<br>    mavenCentral()<br>&#125;<br><br>dependencies &#123;<br><span class="hljs-comment">//compileOnly:保证jar只参与编译不参与打包</span><br>    compileOnly <span class="hljs-string">&#x27;com.aliyun.oss:aliyun-sdk-oss:3.1.0&#x27;</span><br>    compile <span class="hljs-string">&#x27;com.alibaba:fastjson:1.2.47&#x27;</span><br>    compile <span class="hljs-string">&#x27;org.apache.commons:commons-lang3:3.7&#x27;</span><br>    compile <span class="hljs-string">&#x27;org.apache.commons:commons-collections4:4.2&#x27;</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis xml中的特殊字符</title>
    <link href="/articles/mybatis-xml%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6.html"/>
    <url>/articles/mybatis-xml%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6.html</url>
    
    <content type="html"><![CDATA[<p>在使用mybatis 时我们sql是写在xml 映射文件中，如果写的sql中有一些特殊的字符的话，在解析xml文件的时候会被转义，但我们不希望他被转义，所以我们要使用 <code>&lt;![CDATA[ ]]&gt;</code>来解决。</p><![CDATA[   ]]><p> 是什么，这是XML语法。在CDATA内部的所有内容都会被解析器忽略。</p><p>如果文本包含了很多的”&lt;”字符 &lt;&#x3D;和”&amp;”字符——就象程序代码一样，那么最好把他们都放到CDATA部件中。</p><p>但是有个问题那就是 <if test="">   </if>   <where>   </where>  <choose>  </choose>  <trim>  </trim> 等这些标签都不会被解析，所以我们只把有特殊字符的语句放在 <![CDATA[   ]]>  尽量缩小 <![CDATA[  ]]> 的范围。</p><p>参考链接：<a href="https://blog.csdn.net/qh_java/article/details/50755655">https://blog.csdn.net/qh_java/article/details/50755655</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java计算两个经纬度间的距离</title>
    <link href="/articles/Java%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E7%BB%8F%E7%BA%AC%E5%BA%A6%E9%97%B4%E7%9A%84%E8%B7%9D%E7%A6%BB.html"/>
    <url>/articles/Java%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E7%BB%8F%E7%BA%AC%E5%BA%A6%E9%97%B4%E7%9A%84%E8%B7%9D%E7%A6%BB.html</url>
    
    <content type="html"><![CDATA[<p>开发中经常会遇到计算两个点（经纬度）之间的距离或者计算最近门店的场景，下面简单实现一下如何计算两个经纬度之间相隔的距离。</p><p>1、导入geodesy的maven依赖 或者到阿里云maven仓库下载jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.gavaghan<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>geodesy<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、实现计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> org.gavaghan.geodesy.Ellipsoid;<br><span class="hljs-keyword">import</span> org.gavaghan.geodesy.GeodeticCalculator;<br><span class="hljs-keyword">import</span> org.gavaghan.geodesy.GeodeticCurve;<br><span class="hljs-keyword">import</span> org.gavaghan.geodesy.GlobalCoordinates;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CaculateDistanceTest</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        <span class="hljs-type">GlobalCoordinates</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalCoordinates</span>(<span class="hljs-number">29.490295</span>, <span class="hljs-number">106.486654</span>);<br>        <span class="hljs-type">GlobalCoordinates</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalCoordinates</span>(<span class="hljs-number">29.615467</span>, <span class="hljs-number">106.581515</span>);<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">meter1</span> <span class="hljs-operator">=</span> getDistanceMeter(source, target, Ellipsoid.Sphere);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">meter2</span> <span class="hljs-operator">=</span> getDistanceMeter(source, target, Ellipsoid.WGS84);<br><br>        System.out.println(<span class="hljs-string">&quot;Sphere坐标系计算结果：&quot;</span>+meter1 + <span class="hljs-string">&quot;米&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;WGS84坐标系计算结果：&quot;</span>+meter2 + <span class="hljs-string">&quot;米&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getDistanceMeter</span><span class="hljs-params">(GlobalCoordinates gpsFrom, GlobalCoordinates gpsTo, Ellipsoid ellipsoid)</span><br>    &#123;<br>        <span class="hljs-comment">//创建GeodeticCalculator，调用计算方法，传入坐标系、经纬度用于计算距离</span><br>        <span class="hljs-type">GeodeticCurve</span> <span class="hljs-variable">geoCurve</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GeodeticCalculator</span>().calculateGeodeticCurve(ellipsoid, gpsFrom, gpsTo);<br><br>        <span class="hljs-keyword">return</span> geoCurve.getEllipsoidalDistance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对比百度地图，计算结果和Sphere坐标系计算结果一致，表明计算结果正确，WGS84坐标系的计算结果存在几十米的误差。不同的坐标系精度不同，计算结果不一样。大家根据实际情况自己选择。</p><p>参考：<a href="https://www.cnblogs.com/xuzhw/p/10143626.html">https://www.cnblogs.com/xuzhw/p/10143626.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql优化</title>
    <link href="/articles/sql%E4%BC%98%E5%8C%96.html"/>
    <url>/articles/sql%E4%BC%98%E5%8C%96.html</url>
    
    <content type="html"><![CDATA[<h1 id="sql优化"><a href="#sql优化" class="headerlink" title="sql优化"></a>sql优化</h1><h2 id="善用Explain"><a href="#善用Explain" class="headerlink" title="善用Explain"></a>善用Explain</h2><ul><li>1.对查询进行优化，要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</li><li>2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> num <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><p>最好不要给数据库留NULL，尽可能的使用 NOT NULL填充数据库.<br>备注、描述、评论之类的可以设置为 NULL，其他的，最好不要使用NULL。<br>不要以为 NULL 不需要空间，比如：char(100) 型，在字段建立时，空间就固定了， 不管是否插入值（NULL也包含在内），都是占用 100个字符的空间的，如果是varchar这样的变长字段， null 不占用空间。<br>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> num <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li>3.应尽量避免在 where 子句中使用 !&#x3D; 或 &lt;&gt; 操作符，否则将引擎放弃使用索引而进行全表扫描</li><li>4.应尽量避免在 where 子句中使用 or 来连接条件，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描，如：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> num<span class="hljs-operator">=</span><span class="hljs-number">10</span> <span class="hljs-keyword">or</span> Name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span><br></code></pre></td></tr></table></figure><p>可以这样查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> num <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> Name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span>  但是 不建议这么用<br></code></pre></td></tr></table></figure><ul><li>5.对于in 和 not in 也要慎用，否则会导致全表扫描，如：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> num <span class="hljs-keyword">in</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>) 一般不用<span class="hljs-keyword">in</span> 用 <span class="hljs-keyword">between</span><br></code></pre></td></tr></table></figure><p>很多时候用 exists 代替 in 是一个好的选择：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> num <span class="hljs-keyword">from</span> a <span class="hljs-keyword">where</span> num <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> num <span class="hljs-keyword">from</span> b)<br></code></pre></td></tr></table></figure><p>用下面的语句替换：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> num <span class="hljs-keyword">from</span> a <span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> b <span class="hljs-keyword">where</span> num<span class="hljs-operator">=</span>a.num)<br></code></pre></td></tr></table></figure><ul><li>6.下面的查询也将导致全表扫描</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> ‘<span class="hljs-operator">%</span>abc<span class="hljs-operator">%</span>’<br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> ‘abc<span class="hljs-operator">%</span>’ 这样写是可以走索引了<br></code></pre></td></tr></table></figure><ul><li>7.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> num<span class="hljs-operator">/</span><span class="hljs-number">2</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>应改为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> num <span class="hljs-operator">=</span> <span class="hljs-number">100</span><span class="hljs-operator">*</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ul><li>8.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描</li><li>9.不要在 where 子句中的“&#x3D;”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引</li><li>10.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java处理苹果浏览器safari无法播放视频流（Accept-Ranges)</title>
    <link href="/articles/java%E5%A4%84%E7%90%86%E8%8B%B9%E6%9E%9C%E6%B5%8F%E8%A7%88%E5%99%A8safari%E6%97%A0%E6%B3%95%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91%E6%B5%81%EF%BC%88Accept-Ranges.html"/>
    <url>/articles/java%E5%A4%84%E7%90%86%E8%8B%B9%E6%9E%9C%E6%B5%8F%E8%A7%88%E5%99%A8safari%E6%97%A0%E6%B3%95%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91%E6%B5%81%EF%BC%88Accept-Ranges.html</url>
    
    <content type="html"><![CDATA[<p>最近在做一个在线播放视频流的程序，安卓和电脑上都可以正常的播放。可以唯独ios上无法正常播放。开始在网上找了很多资料觉得不是很到位，所以在这里记录一下。</p><p>刚开始时代码返回的视频流是在一个请求里全部返回的，而苹果的浏览器会先发一次探测请求来获取文件大小，之后再发送多次请求来分段取数据流的数据，其实这里就是一个分段上传的思想（Accept-Ranges）。有两个很重要的点就是，</p><p>第一：需要根据请求内容的不同做出不同的响应，第一次探测请求需要返回200，后面的请求需要返回206和具体数据</p><p>第二：contentType必须设置为video&#x2F;mp4。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendVideo</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, File file, String fileName)</span> <span class="hljs-keyword">throws</span> FileNotFoundException, IOException &#123;<br><span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">randomFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(file, <span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-comment">//只读模式</span><br><span class="hljs-type">long</span> <span class="hljs-variable">contentLength</span> <span class="hljs-operator">=</span> randomFile.length();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">range</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;Range&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, end = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(range != <span class="hljs-literal">null</span> &amp;&amp; range.startsWith(<span class="hljs-string">&quot;bytes=&quot;</span>))&#123;<br>            String[] values = range.split(<span class="hljs-string">&quot;=&quot;</span>)[<span class="hljs-number">1</span>].split(<span class="hljs-string">&quot;-&quot;</span>);<br>            start = Integer.parseInt(values[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">if</span>(values.length &gt; <span class="hljs-number">1</span>)&#123;<br>                end = Integer.parseInt(values[<span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">requestSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(end != <span class="hljs-number">0</span> &amp;&amp; end &gt; start)&#123;<br>            requestSize = end - start + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            requestSize = Integer.MAX_VALUE;<br>        &#125;<br> <br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4096</span>];<br>        response.setContentType(<span class="hljs-string">&quot;video/mp4&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Accept-Ranges&quot;</span>, <span class="hljs-string">&quot;bytes&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;ETag&quot;</span>, fileName);<br>        response.setHeader(<span class="hljs-string">&quot;Last-Modified&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toString());<br>        <span class="hljs-comment">//第一次请求只返回content length来让客户端请求多次实际数据</span><br>        <span class="hljs-keyword">if</span>(range == <span class="hljs-literal">null</span>)&#123;<br>            response.setHeader(<span class="hljs-string">&quot;Content-length&quot;</span>, contentLength + <span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//以后的多次以断点续传的方式来返回视频数据</span><br>            response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);<span class="hljs-comment">//206</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">requestStart</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, requestEnd = <span class="hljs-number">0</span>;<br>            String[] ranges = range.split(<span class="hljs-string">&quot;=&quot;</span>);<br>            <span class="hljs-keyword">if</span>(ranges.length &gt; <span class="hljs-number">1</span>)&#123;<br>                String[] rangeDatas = ranges[<span class="hljs-number">1</span>].split(<span class="hljs-string">&quot;-&quot;</span>);<br>                requestStart = Integer.parseInt(rangeDatas[<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">if</span>(rangeDatas.length &gt; <span class="hljs-number">1</span>)&#123;<br>                    requestEnd = Integer.parseInt(rangeDatas[<span class="hljs-number">1</span>]);<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(requestEnd &gt; <span class="hljs-number">0</span>)&#123;<br>                length = requestEnd - requestStart + <span class="hljs-number">1</span>;<br>                response.setHeader(<span class="hljs-string">&quot;Content-length&quot;</span>, <span class="hljs-string">&quot;&quot;</span> + length);<br>                response.setHeader(<span class="hljs-string">&quot;Content-Range&quot;</span>, <span class="hljs-string">&quot;bytes &quot;</span> + requestStart + <span class="hljs-string">&quot;-&quot;</span> + requestEnd + <span class="hljs-string">&quot;/&quot;</span> + contentLength);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                length = contentLength - requestStart;<br>                response.setHeader(<span class="hljs-string">&quot;Content-length&quot;</span>, <span class="hljs-string">&quot;&quot;</span> + length);<br>                response.setHeader(<span class="hljs-string">&quot;Content-Range&quot;</span>, <span class="hljs-string">&quot;bytes &quot;</span>+ requestStart + <span class="hljs-string">&quot;-&quot;</span> + (contentLength - <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;/&quot;</span> + contentLength);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">needSize</span> <span class="hljs-operator">=</span> requestSize;<br>        randomFile.seek(start);<br>        <span class="hljs-keyword">while</span>(needSize &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> randomFile.read(buffer);<br>            <span class="hljs-keyword">if</span>(needSize &lt; buffer.length)&#123;<br>                out.write(buffer, <span class="hljs-number">0</span>, needSize);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                out.write(buffer, <span class="hljs-number">0</span>, len);<br>                <span class="hljs-keyword">if</span>(len &lt; buffer.length)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            needSize -= buffer.length;<br>        &#125;<br>        randomFile.close();<br>        out.close();<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>文件处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx修改access.log日志时间格式</title>
    <link href="/articles/Nginx%E4%BF%AE%E6%94%B9access-log%E6%97%A5%E5%BF%97%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F.html"/>
    <url>/articles/Nginx%E4%BF%AE%E6%94%B9access-log%E6%97%A5%E5%BF%97%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F.html</url>
    
    <content type="html"><![CDATA[<h2 id="一、修改原因"><a href="#一、修改原因" class="headerlink" title="一、修改原因"></a>一、修改原因</h2><p>因为要获取nginx访问信息，作为开发的数据使用，但是nginx的access.log文件中的默认的时间格式是这样的：</p><p>[02&#x2F;Nov&#x2F;2017:20:48:25 +0800]</p><p>而要求的格式类似如下：</p><p>[2017-11-02 20:52:06]</p><h2 id="二、修改方法"><a href="#二、修改方法" class="headerlink" title="二、修改方法"></a>二、修改方法</h2><p>方法都几种，但是修改源码的方法看上去麻烦，做起来也简单，我这边修改了源码（把原来的删了，复制新的），重新编译</p><p><strong>1.修改src&#x2F;http&#x2F;modules&#x2F;ngx_http_log_module.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span>） &#123; ngx_string(<span class="hljs-string">&quot;time_local&quot;</span>), <span class="hljs-keyword">sizeof</span>(<span class="hljs-string">&quot;28/Sep/1970:12:00:00 +0600&quot;</span>) - <span class="hljs-number">1</span>,<br>                          ngx_http_log_time &#125;,<br>修改后：<br>&#123; ngx_string(<span class="hljs-string">&quot;time_local&quot;</span>), <span class="hljs-keyword">sizeof</span>(<span class="hljs-string">&quot;1970-09-28 12:00:00 +0600&quot;</span>) - <span class="hljs-number">1</span>,<br>                          ngx_http_log_time &#125;,<br> <br> <br>  <span class="hljs-keyword">return</span> ngx_cpymem(buf, ngx_cached_http_log_time.data,<br>                      ngx_cached_http_log_time.len);<br>修改后：<br>  <span class="hljs-keyword">return</span> ngx_cpymem(buf, ngx_cached_err_log_time.data,<br>                      ngx_cached_err_log_time.len);<br></code></pre></td></tr></table></figure><p><strong>2、修改 src&#x2F;core&#x2F;ngx_times.c 140行</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">(<span class="hljs-type">void</span>) ngx_sprintf(p1, <span class="hljs-string">&quot;%4d/%02d/%02d %02d:%02d:%02d&quot;</span>,<br>                       tm.ngx_tm_year, tm.ngx_tm_mon,<br>                       tm.ngx_tm_mday, tm.ngx_tm_hour,<br>                       tm.ngx_tm_min, tm.ngx_tm_sec);<br> <br>修改后<br>    (<span class="hljs-type">void</span>) ngx_sprintf(p1, <span class="hljs-string">&quot;%4d-%02d-%02d %02d:%02d:%02d&quot;</span>,<br>                       tm.ngx_tm_year, tm.ngx_tm_mon,<br>                       tm.ngx_tm_mday, tm.ngx_tm_hour,<br>                       tm.ngx_tm_min, tm.ngx_tm_sec);<br></code></pre></td></tr></table></figure><p><strong>3.备份一下配置文件（小心一些好）</strong></p><p><strong>4.重新编译，参数还是用原来的吧</strong></p><p><strong>5. make &amp;&amp; make install 之后重启nginx就行了</strong></p><p>参考：<a href="https://www.cnblogs.com/bigberg/p/7774508.html">https://www.cnblogs.com/bigberg/p/7774508.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两种方法获取MyBatis刚刚插入的id</title>
    <link href="/articles/%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%E8%8E%B7%E5%8F%96MyBatis%E5%88%9A%E5%88%9A%E6%8F%92%E5%85%A5%E7%9A%84id.html"/>
    <url>/articles/%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%E8%8E%B7%E5%8F%96MyBatis%E5%88%9A%E5%88%9A%E6%8F%92%E5%85%A5%E7%9A%84id.html</url>
    
    <content type="html"><![CDATA[<p>主要就是在xml文件中的写法，其他省略</p><p>方法一：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.xxx.xxxx.pojo.User&quot;</span>&gt;</span><br>        insert into t_user (name) <br>        values (#&#123;user.name&#125;)<br>        <span class="hljs-tag">&lt;<span class="hljs-name">selectKey</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Integer&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;AFTER&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;user.userId&quot;</span>&gt;</span><br>            SELECT LAST_INSERT_ID() AS userId<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">selectKey</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Spares&quot;</span>     </span><br><span class="hljs-tag">        <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span>    <br>        insert into system(name) values(#&#123;name&#125;)    <br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在调用的时候就可以用对象的get属性方法来获取了。</p><p>参考</p><p><a href="https://www.cnblogs.com/azhqiang/p/6971849.html">https://www.cnblogs.com/azhqiang/p/6971849.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea编译时mybatis找不到xml</title>
    <link href="/articles/idea%E7%BC%96%E8%AF%91%E6%97%B6mybatis%E6%89%BE%E4%B8%8D%E5%88%B0xml.html"/>
    <url>/articles/idea%E7%BC%96%E8%AF%91%E6%97%B6mybatis%E6%89%BE%E4%B8%8D%E5%88%B0xml.html</url>
    
    <content type="html"><![CDATA[<p>编译时提示错误  Error parsing SQL Mapper Configuration. Cause: java.io.IOException: Could not find resource com&#x2F;shao&#x2F;mapping&#x2F;userMapper.xml</p><p>原因是idea不会编译src的java目录的xml文件　　</p><p>所以解决思路就是：将IDEA maven项目中src源代码下的xml等资源文件编译进classes文件夹</p><p>具体操作方法就是：配置maven的pom文件配置，在<build>节点下添加<resources>代码：</p><p>　　</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以参考：<a href="https://www.cnblogs.com/canger/p/6007899.html">https://www.cnblogs.com/canger/p/6007899.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序实现授权用户绑定的手机号,后台java解密</title>
    <link href="/articles/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E6%8E%88%E6%9D%83%E7%94%A8%E6%88%B7%E7%BB%91%E5%AE%9A%E7%9A%84%E6%89%8B%E6%9C%BA%E5%8F%B7-%E5%90%8E%E5%8F%B0java%E8%A7%A3%E5%AF%86.html"/>
    <url>/articles/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E6%8E%88%E6%9D%83%E7%94%A8%E6%88%B7%E7%BB%91%E5%AE%9A%E7%9A%84%E6%89%8B%E6%9C%BA%E5%8F%B7-%E5%90%8E%E5%8F%B0java%E8%A7%A3%E5%AF%86.html</url>
    
    <content type="html"><![CDATA[<p>具体思路为：小程序前端点击按钮，弹出授权手机号窗口，用户允许后，js得到加密数据，加密向量，session_key，将这些信息传递到java后台解密，最终拿到电话号码。（直接通过js是获取不到的）</p><p>wxml按钮的代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">open-type</span>=<span class="hljs-string">&quot;getPhoneNumber&quot;</span> <span class="hljs-attr">bindgetphonenumber</span>=<span class="hljs-string">&quot;getPhoneNumber&quot;</span>&gt;</span>获取手机号码<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>核心为open-type&#x3D;”getPhoneNumber”。</p><p>js代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-attr">getPhoneNumber</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">detail</span>);<span class="hljs-comment">//你可以输出看一下e.detail的内容</span><br>   <span class="hljs-keyword">if</span> (e.<span class="hljs-property">detail</span>.<span class="hljs-property">errMsg</span> ==<span class="hljs-string">&quot;getPhoneNumber:ok&quot;</span>)&#123;<span class="hljs-comment">//同意授权手机号</span><br>     <span class="hljs-comment">//请求后台解密</span><br>     wx.<span class="hljs-title function_">request</span>(&#123;<br>       <span class="hljs-attr">url</span>: app.<span class="hljs-property">globalData</span>.<span class="hljs-property">host</span> + <span class="hljs-string">&#x27;/xx/xxxx&#x27;</span>,<br>       <span class="hljs-attr">data</span>: &#123;<br>         <span class="hljs-attr">encryptedData</span>: e.<span class="hljs-property">detail</span>.<span class="hljs-property">encryptedData</span>,<span class="hljs-comment">//加密数据</span><br>         <span class="hljs-attr">iv</span>: e.<span class="hljs-property">detail</span>.<span class="hljs-property">iv</span>,<span class="hljs-comment">//向量</span><br>         <span class="hljs-attr">session_key</span>: wx.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&quot;session_key&quot;</span>)<span class="hljs-comment">//秘钥，在登录的时候可以得到，可以参考本人的博客，微信小程序实现登录</span><br>       &#125;,<br>       <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>       <span class="hljs-attr">header</span>: &#123;<br>         <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br>       &#125;,<br>       <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;获取电话号码成功&quot;</span> + res.<span class="hljs-property">data</span>);<br>         &#125;<br>     &#125;)<br>   &#125;<br><br><br></code></pre></td></tr></table></figure><p>java后台解密代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.spec.IvParameterSpec;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><span class="hljs-keyword">import</span> java.security.AlgorithmParameters;<br><span class="hljs-keyword">import</span> java.security.Security;<br> <br><span class="hljs-keyword">import</span> org.bouncycastle.jce.provider.BouncyCastleProvider;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br> <br> <br><span class="hljs-comment">/**所需的maven依赖包</span><br><span class="hljs-comment">&lt;!-- 阿里JSON解析器 --&gt;</span><br><span class="hljs-comment">&lt;dependency&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt;</span><br><span class="hljs-comment">&lt;/dependency&gt;</span><br><span class="hljs-comment">&lt;!-- bouncycastle--&gt;</span><br><span class="hljs-comment">&lt;dependency&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;bcprov-jdk15on&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;version&gt;1.54&lt;/version&gt;</span><br><span class="hljs-comment">&lt;/dependency&gt;</span><br><span class="hljs-comment">**/</span><br> <br><span class="hljs-comment">/*******************************小程序********************************/</span><br>    <span class="hljs-meta">@PostMapping(&quot;/xx/xxxx&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">mini_getPhone</span><span class="hljs-params">(HttpServletRequest request,String encryptedData,String iv,String session_key)</span><br> <br>    &#123;<br>        <span class="hljs-comment">//</span><br>        JSONObject obj=getPhoneNumber(session_key,encryptedData,iv);<span class="hljs-comment">//解密电话号码</span><br>        <span class="hljs-comment">//System.out.println(obj);</span><br>        String sphone=obj.get(<span class="hljs-string">&quot;phoneNumber&quot;</span>).toString();<br>        <span class="hljs-keyword">return</span> sphone;<br> <br>    &#125;<br> <br>    <span class="hljs-comment">//解析电话号码</span><br>    <span class="hljs-keyword">public</span> JSONObject <span class="hljs-title function_">getPhoneNumber</span><span class="hljs-params">(String session_key, String encryptedData, String iv)</span> &#123;<br>            <span class="hljs-type">byte</span>[] dataByte = Base64.decode(encryptedData);<br>           <br>            <span class="hljs-type">byte</span>[] keyByte = Base64.decode(session_key);<br>  <br>            <span class="hljs-type">byte</span>[] ivByte = Base64.decode(iv);<br>            <span class="hljs-keyword">try</span> &#123;<br>       <br>                <span class="hljs-type">int</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br>                <span class="hljs-keyword">if</span> (keyByte.length % base != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">groups</span> <span class="hljs-operator">=</span> keyByte.length / base + (keyByte.length % base != <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>                    <span class="hljs-type">byte</span>[] temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[groups * base];<br>                    Arrays.fill(temp, (<span class="hljs-type">byte</span>) <span class="hljs-number">0</span>);<br>                    System.arraycopy(keyByte, <span class="hljs-number">0</span>, temp, <span class="hljs-number">0</span>, keyByte.length);<br>                    keyByte = temp;<br>                &#125;<br>                <span class="hljs-comment">// 初始化</span><br>                Security.addProvider(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BouncyCastleProvider</span>());<br>                <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES/CBC/PKCS5Padding&quot;</span>);<br>                <span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">spec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(keyByte, <span class="hljs-string">&quot;AES&quot;</span>);<br>                <span class="hljs-type">AlgorithmParameters</span> <span class="hljs-variable">parameters</span> <span class="hljs-operator">=</span> AlgorithmParameters.getInstance(<span class="hljs-string">&quot;AES&quot;</span>);<br>                parameters.init(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(ivByte));<br>                cipher.init(Cipher.DECRYPT_MODE, spec, parameters);<br>                <span class="hljs-type">byte</span>[] resultByte = cipher.doFinal(dataByte);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != resultByte &amp;&amp; resultByte.length &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(resultByte, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>                    <span class="hljs-keyword">return</span> JSONObject.parseObject(result);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br> <br>    &#125;<br><br></code></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/qq_20372833/article/details/89597721">https://blog.csdn.net/qq_20372833/article/details/89597721</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux定时任务Crontab命令详解</title>
    <link href="/articles/Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1Crontab%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3.html"/>
    <url>/articles/Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1Crontab%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3.html</url>
    
    <content type="html"><![CDATA[<p>linux 系统则是由 cron (crond) 这个系统服务来控制的。Linux 系统上面原本就有非常多的计划性工作，因此这个系统服务是默认启动的。另 外, 由于使用者自己也可以设置计划任务，所以， Linux 系统也提供了使用者控制计划任务的命令 :crontab 命令。</p><h2 id="一、crond简介"><a href="#一、crond简介" class="headerlink" title="一、crond简介"></a>一、crond简介</h2><p>crond 是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务 工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。</p><p>Linux下的任务调度分为两类，系统任务调度和用户任务调度。</p><p>系统任务调度：系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。在&#x2F;etc目录下有一个crontab文件，这个就是系统任务调度的配置文件。</p><p>&#x2F;etc&#x2F;crontab文件包括下面几行：</p><p>cat &#x2F;etc&#x2F;crontab</p><p>SHELL&#x3D;&#x2F;bin&#x2F;bash</p><p>PATH&#x3D;&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin</p><p>MAILTO&#x3D;HOME&#x3D;&#x2F;</p><p>#run-parts</p><p>51 * * * * root run-parts &#x2F;etc&#x2F;cron.hourly</p><p>24 7 * * * root run-parts &#x2F;etc&#x2F;cron.daily</p><p>22 4 * * 0 root run-parts &#x2F;etc&#x2F;cron.weekly</p><p>42 4 1 * * root run-parts &#x2F;etc&#x2F;cron.monthly</p><p>前 四行是用来配置crond任务运行的环境变量，第一行SHELL变量指定了系统要使用哪个shell，这里是bash，第二行PATH变量指定了系统执行 命令的路径，第三行MAILTO变量指定了crond的任务执行信息将通过电子邮件发送给root用户，如果MAILTO变量的值为空，则表示不发送任务 执行信息给用户，第四行的HOME变量指定了在执行命令或者脚本时使用的主目录。第六至九行表示的含义将在下个小节详细讲述。这里不在多说。</p><p>用户任务调度：用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的crontab 文件都被保存在 &#x2F;var&#x2F;spool&#x2F;cron目录中。其文件名与用户名一致。</p><p>使用者权限文件：</p><p>文件：</p><p>&#x2F;etc&#x2F;cron.deny</p><p>说明：</p><p>该文件中所列用户不允许使用crontab命令</p><p>文件：</p><p>&#x2F;etc&#x2F;cron.allow</p><p>说明：</p><p>该文件中所列用户允许使用crontab命令</p><p>文件：</p><p>&#x2F;var&#x2F;spool&#x2F;cron&#x2F;</p><p>说明：</p><p>所有用户crontab文件存放的目录,以用户名命名</p><p>crontab文件的含义：</p><p>用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：</p><p>minute hour day month week command</p><p>其中：</p><p>minute： 表示分钟，可以是从0到59之间的任何整数。</p><p>hour：表示小时，可以是从0到23之间的任何整数。</p><p>day：表示日期，可以是从1到31之间的任何整数。</p><p>month：表示月份，可以是从1到12之间的任何整数。</p><p>week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。</p><p>command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。</p><p>在以上各个字段中，还可以使用以下特殊字符：</p><p>星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</p><p>逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</p><p>中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</p><p>正斜线（&#x2F;）：可以用正斜线指定时间的间隔频率，例如“0-23&#x2F;2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*&#x2F;10，如果用在minute字段，表示每十分钟执行一次。</p><h2 id="二、crond服务"><a href="#二、crond服务" class="headerlink" title="二、crond服务"></a>二、crond服务</h2><p>安装crontab：</p><p>yum install crontabs</p><p>服务操作说明：</p><p>&#x2F;sbin&#x2F;service crond start &#x2F;&#x2F;启动服务</p><p>&#x2F;sbin&#x2F;service crond stop &#x2F;&#x2F;关闭服务</p><p>&#x2F;sbin&#x2F;service crond restart &#x2F;&#x2F;重启服务</p><p>&#x2F;sbin&#x2F;service crond reload &#x2F;&#x2F;重新载入配置</p><p>&#x2F;sbin&#x2F;service crond status &#x2F;&#x2F;启动服务</p><p>查看crontab服务是否已设置为开机启动，执行命令：</p><p>ntsysv</p><p>加入开机自动启动：</p><p>chkconfig –level 35 crond on</p><h2 id="三、crontab命令详解"><a href="#三、crontab命令详解" class="headerlink" title="三、crontab命令详解"></a>三、crontab命令详解</h2><p>1．命令格式：</p><p>crontab [-u user] file</p><p>crontab [-u user] [ -e | -l | -r ]</p><p>2．命令功能：</p><p>通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常设合周期性的日志分析或数据备份等工作。</p><p>3．命令参数：</p><p>-u user：用来设定某个用户的crontab服务，例如，“-u ixdba”表示设定ixdba用户的crontab服务，此参数一般有root用户来运行。</p><p>file：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。</p><p>-e：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件。</p><p>-l：显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容。</p><p>-r：从&#x2F;var&#x2F;spool&#x2F;cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件。</p><p>-i：在删除用户的crontab文件时给确认提示。</p><p>4．常用方法：</p><p>1). 创建一个新的crontab文件</p><p>在 考虑向cron进程提交一个crontab文件之前，首先要做的一件事情就是设置环境变量EDITOR。cron进程根据它来确定使用哪个编辑器编辑 crontab文件。9 9 %的UNIX和LINUX用户都使用vi，如果你也是这样，那么你就编辑$ HOME目录下的. profile文件，在其 中加入这样一行：</p><p>EDITOR&#x3D;vi; export EDITOR</p><p>然后保存并退出。不妨创建一个名为&lt;user&gt; cron的文件，其中&lt;user&gt;是用户名，例如， davecron。在该文件中加入如下的内容。</p><p>#(put your own initials here)echo the date to the console every</p><p>#15minutes between 6pm and 6am</p><p>0,15,30,45 18-06 * * * &#x2F;bin&#x2F;echo ‘date’ &gt; &#x2F;dev&#x2F;console</p><p>保存并退出。确信前面5个域用空格分隔。</p><p>在 上面的例子中，系统将每隔1 5分钟向控制台输出一次当前时间。如果系统崩溃或挂起，从最后所显示的时间就可以一眼看出系统是什么时间停止工作的。在有些 系统中，用tty1来表示控制台，可以根据实际情况对上面的例子进行相应的修改。为了提交你刚刚创建的crontab文件，可以把这个新创建的文件作为 cron命令的参数：</p><p>$ crontab davecron</p><p>现在该文件已经提交给cron进程，它将每隔1 5分钟运行一次。</p><p>同时，新创建文件的一个副本已经被放在&#x2F;var&#x2F;spool&#x2F;cron目录中，文件名就是用户名(即dave)。</p><p>2). 列出crontab文件</p><p>为了列出crontab文件，可以用：</p><p>$ crontab -l</p><p>0,15,30,45,18-06 * * * &#x2F;bin&#x2F;echo <code>date</code> &gt; dev&#x2F;tty1</p><p>你将会看到和上面类似的内容。可以使用这种方法在$ H O M E目录中对crontab文件做一备份：</p><p>$ crontab -l &gt; $HOME&#x2F;mycron</p><p>这样，一旦不小心误删了crontab文件，可以用上一节所讲述的方法迅速恢复。</p><p>3). 编辑crontab文件</p><p>如果希望添加、删除或编辑crontab文件中的条目，而E D I TO R环境变量又设置为v i，那么就可以用v i来编辑crontab文件，相应的命令为：</p><p>$ crontab -e（使用此命令可以通过vi直接进行修改添加定时任务）</p><p>可以像使用v i编辑其他任何文件那样修改crontab文件并退出。如果修改了某些条目或添加了新的条目，那么在保存该文件时， c r o n会对其进行必要的完整性检查。如果其中的某个域出现了超出允许范围的值，它会提示你。</p><p>我们在编辑crontab文件时，没准会加入新的条目。例如，加入下面的一条：</p><p>#DT:delete core files,at 3.30am on 1,7,14,21,26,26 days of each month</p><p>30 3 1,7,14,21,26 * * &#x2F;bin&#x2F;find -name “core’ -exec rm {} ;</p><p>现在保存并退出。最好在crontab文件的每一个条目之上加入一条注释，这样就可以知道它的功能、运行时间，更为重要的是，知道这是哪位用户的作业。</p><p>现在让我们使用前面讲过的crontab -l命令列出它的全部信息：</p><p>$ crontab -l</p><p>#(crondave installed on Tue May 4 13:07:43 1999)</p><p>#DT:ech the date to the console every 30 minites</p><p>0,15,30,45 18-06 * * * &#x2F;bin&#x2F;echo <code>date</code> &gt; &#x2F;dev&#x2F;tty1</p><p>#DT:delete core files,at 3.30am on 1,7,14,21,26,26 days of each month</p><p>30 3 1,7,14,21,26 * * &#x2F;bin&#x2F;find -name “core’ -exec rm {} ;</p><p>4). 删除crontab文件</p><p>要删除crontab文件，可以用：</p><p>$ crontab -r</p><p>5). 恢复丢失的crontab文件</p><p>如果不小心误删了crontab文件，假设你在自己的$ H O M E目录下还有一个备份，那么可以将其拷贝到&#x2F;var&#x2F;spool&#x2F;cron&#x2F;&lt;username&gt;，其中&lt;username&gt;是用户名。如果由于权限问题无法完成拷贝，可以用：</p><p>$ crontab &lt;filename&gt;</p><p>其中，&lt;filename&gt;是你在$ H O M E目录中副本的文件名。</p><p>我建议你在自己的$ H O M E目录中保存一个该文件的副本。我就有过类似的经历，有数次误删了crontab文件（因为r键紧挨在e键的右边）。这就是为什么有些系统文档建议不要直接编辑crontab文件，而是编辑该文件的一个副本，然后重新提交新的文件。</p><p>有些crontab的变体有些怪异，所以在使用crontab命令时要格外小心。如果遗漏了任何选项，crontab可能会打开一个空文件，或者看起来像是个空文件。这时敲delete键退出，不要按&lt;Ctrl-D&gt;，否则你将丢失crontab文件。</p><p>5．使用实例</p><p>实例1：每1分钟执行一次command命令：* * * * * command</p><p>实例2：每小时的第3和第15分钟执行命令：3,15 * * * * command</p><p>实例3：在上午8点到11点的第3和第15分钟执行命令：3,15 8-11 * * * command</p><p>实例4：每隔两天的上午8点到11点的第3和第15分钟执行命令：3,15 8-11 *&#x2F;2 * * command</p><p>实例5：每个星期一的上午8点到11点的第3和第15分钟执行命令：3,15 8-11 * * 1 command</p><p>实例6：每晚的21:30重启smb 命令：30 21 * * * &#x2F;etc&#x2F;init.d&#x2F;smb restart</p><p>实例7：每月1、10、22日的4 : 45重启smb 命令：45 4 1,10,22 * * &#x2F;etc&#x2F;init.d&#x2F;smb restart</p><p>实例8：每周六、周日的1 : 10重启smb命令：10 1 * * 6,0 &#x2F;etc&#x2F;init.d&#x2F;smb restart</p><p>实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb 命令：0,30 18-23 * * * &#x2F;etc&#x2F;init.d&#x2F;smb restart</p><p>实例10：每星期六的晚上11 : 00 pm重启smb 命令：0 23 * * 6 &#x2F;etc&#x2F;init.d&#x2F;smb restart</p><p>实例11：每一小时重启smb 命令：* *&#x2F;1 * * * &#x2F;etc&#x2F;init.d&#x2F;smb restart</p><p>实例12：晚上11点到早上7点之间，每隔一小时重启smb 命令：* 23-7&#x2F;1 * * * &#x2F;etc&#x2F;init.d&#x2F;smb restart</p><p>实例13：每月的4号与每周一到周三的11点重启smb 命令：0 11 4 * mon-wed &#x2F;etc&#x2F;init.d&#x2F;smb restart</p><p>实例14：一月一号的4点重启smb 命令：0 4 1 jan * &#x2F;etc&#x2F;init.d&#x2F;smb restart</p><p>实例15：每小时执行&#x2F;etc&#x2F;cron.hourly目录内的脚本命令：01 * * * * root run-parts &#x2F;etc&#x2F;cron.hourly说明：run-parts这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是目录名了</p><h2 id="四、使用注意事项"><a href="#四、使用注意事项" class="headerlink" title="四、使用注意事项"></a>四、使用注意事项</h2><p>注意环境变量问题有时我们创建了一个crontab，但是这个任务却无法自动执行，而手动执行这个任务却没有问题，这种情况一般是由于在crontab文件中没有配置环境变量引起的。</p><p>在 crontab文件中定义多个调度任务时，需要特别注意的一个问题就是环境变量的设置，因为我们手动执行某个任务时，是在当前shell环境下进行的，程 序当然能找到环境变量，而系统自动执行任务调度时，是不会加载任何环境变量的，因此，就需要在crontab文件中指定任务运行所需的所有环境变量，这 样，系统执行任务调度时就没有问题了。</p><p>不要假定cron知道所需要的特殊环境，它其实并不知道。所以你要保证在shelll脚本中提供所有必要的路径和环境变量，除了一些自动设置的全局变量。所以注意如下3点：</p><p>1）脚本中涉及文件路径时写全局路径；</p><p>2）脚本执行要用到java或其他环境变量时，通过source命令引入环境变量，如：</p><p>cat start_cbp.sh</p><p>#!&#x2F;bin&#x2F;sh</p><p>source &#x2F;etc&#x2F;profile</p><p>export RUN_CONF&#x3D;&#x2F;home&#x2F;d139&#x2F;conf&#x2F;platform&#x2F;cbp&#x2F;cbp_jboss.conf</p><p>&#x2F;usr&#x2F;local&#x2F;jboss-4.0.5&#x2F;bin&#x2F;run.sh -c mev &amp;</p><p>3）当手动执行脚本OK，但是crontab死活不执行时。这时必须大胆怀疑是环境变量惹的祸，并可以尝试在crontab中直接引入环境变量解决问题。如：</p><p>0 * * * * . &#x2F;etc&#x2F;profile;&#x2F;bin&#x2F;sh &#x2F;var&#x2F;www&#x2F;java&#x2F;audit_no_count&#x2F;bin&#x2F;restart_audit.sh</p><p>注意清理系统用户的邮件日志每条任务调度执行完毕，系统都会将任务输出信息通过电子邮件的形式发送给当前系统用户，这样日积月累，日志信息会非常大，可能会影响系统的正常运行，因此，将每条任务进行重定向处理非常重要。</p><p>例如，可以在crontab文件中设置如下形式，忽略日志输出：</p><p>0 *&#x2F;3 * * * &#x2F;usr&#x2F;local&#x2F;apache2&#x2F;apachectl restart &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</p><p>“&#x2F;dev&#x2F;null 2&gt;&amp;1”表示先将标准输出重定向到&#x2F;dev&#x2F;null，然后将标准错误重定向到标准输出，由于标准输出已经重定向到了&#x2F;dev&#x2F;null，因此标准错误也会重定向到&#x2F;dev&#x2F;null，这样日志输出问题就解决了。</p><p>系统级任务调度与用户级任务调度系 统级任务调度主要完成系统的一些维护操作，用户级任务调度主要完成用户自定义的一些任务，可以将用户级任务调度放到系统级任务调度来完成（不建议这么 做），但是反过来却不行，root用户的任务调度操作可以通过“crontab –uroot –e”来设置，也可以将调度任务直接写入&#x2F;etc &#x2F;crontab文件，需要注意的是，如果要定义一个定时重启系统的任务，就必须将任务放到&#x2F;etc&#x2F;crontab文件，即使在root用户下创建一个 定时重启系统的任务也是无效的。</p><p>其他注意事项新创建的cron job，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。</p><p>当crontab突然失效时，可以尝试&#x2F;etc&#x2F;init.d&#x2F;crond restart解决问题。或者查看日志看某个job有没有执行&#x2F;报错tail -f &#x2F;var&#x2F;log&#x2F;cron。</p><p>千万别乱运行crontab -r。它从Crontab目录（&#x2F;var&#x2F;spool&#x2F;cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。</p><p>在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义%，如经常用的date ‘+%Y%m%d’在crontab里是不会执行的，应该换成date ‘+%Y%m%d’。</p><p>原文：<br><a href="https://www.cnblogs.com/intval/p/5763929.html">https://www.cnblogs.com/intval/p/5763929.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何知道自己nginx用的哪个配置文件</title>
    <link href="/articles/%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E8%87%AA%E5%B7%B1nginx%E7%94%A8%E7%9A%84%E5%93%AA%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html"/>
    <url>/articles/%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E8%87%AA%E5%B7%B1nginx%E7%94%A8%E7%9A%84%E5%93%AA%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html</url>
    
    <content type="html"><![CDATA[<p>当忘记服务器上nginx的配置文件存放位置的时候如何找到正确的存放位置</p><p>当服务器上存在多个nginx.cnf的时候如何知道现在使用的是哪个配置文件</p><h2 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps aux|grep nginx<br></code></pre></td></tr></table></figure><p>这个是查看nginx进程的命令，附带好像可以把配置文件路径带出来</p><p>网上说这个方法可以看到，我的实际没看到，不过作为一种方法也是可以试试的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">root              352   0.0  0.0  2468624    924   ??  S    10:43上午   0:00.08 nginx: worker process  <br>root              232   0.0  0.0  2459408    532   ??  S    10:43上午   0:00.02 nginx: master process /usr/local/opt/nginx/bin/nginx -g daemon off;  <br>root             2345   0.0  0.0  2432772    640 s000  S+    1:01下午   0:00.00 grep nginx<br></code></pre></td></tr></table></figure><h2 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nginx -t</span><br></code></pre></td></tr></table></figure><p>这个是验证nginx配置文件的是否正确的命令，附带可以把配置文件路径带出来</p><p>我这边用这个命令直接定位到了真正在用的位置，测试有效（20191212）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx: the configuration file /usr/local/etc/nginx/nginx.conf syntax is ok<br>nginx: configuration file /usr/local/etc/nginx/nginx.conf test is successful<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA 编译Go工程，go文件之间的函数调用问题</title>
    <link href="/articles/IDEA-%E7%BC%96%E8%AF%91Go%E5%B7%A5%E7%A8%8B%EF%BC%8Cgo%E6%96%87%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98.html"/>
    <url>/articles/IDEA-%E7%BC%96%E8%AF%91Go%E5%B7%A5%E7%A8%8B%EF%BC%8Cgo%E6%96%87%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98.html</url>
    
    <content type="html"><![CDATA[<p>-main.go</p><p>-hello.go</p><p>两个代码的package 都是 main，main.go引用hello.go，执行main.go 就会提示  undefined:xxxx</p><p>原因是idea编译的的时候只编译了main.go未编译其同目录下的其他文件，我们只要让他编译这个目录就可以了，需要修改idea的编译的一些设置</p><p><img src="/IDEA-%E7%BC%96%E8%AF%91Go%E5%B7%A5%E7%A8%8B%EF%BC%8Cgo%E6%96%87%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98/001.png" alt="pass1"></p><p>修改Run Kind未package</p><p>修改package path为代码目录就可以了</p><hr><p>或者为directory 方式编译应该也是ok的</p>]]></content>
    
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven在window下的环境变量配置</title>
    <link href="/articles/maven%E5%9C%A8window%E4%B8%8B%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.html"/>
    <url>/articles/maven%E5%9C%A8window%E4%B8%8B%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.html</url>
    
    <content type="html"><![CDATA[<p>首先maven环境变量：</p><p>变量名：MAVEN_HOME</p><p>变量值：E:\apache-maven-3.2.3</p><p>变量名：Path</p><p>变量值：;%MAVEN_HOME%\bin</p><p>cmd控制台查看查看maven是否配置成功</p><p>1：查看maven安装路径：echo %MAVEN_HOME%</p><p>2:查看maven版本：mvn -version</p>]]></content>
    
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea配置优化</title>
    <link href="/articles/idea%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96.html"/>
    <url>/articles/idea%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96.html</url>
    
    <content type="html"><![CDATA[<p><strong>1.IntelliJ设置鼠标悬浮提示和修改快捷键</strong><br><a href="https://blog.csdn.net/u010596115/article/details/53485969">https://blog.csdn.net/u010596115/article/details/53485969</a></p><p><strong>2.IntelliJ IDEA设置自动导入包</strong></p><p><a href="https://blog.csdn.net/DuanLiuchang/article/details/73300381">https://blog.csdn.net/DuanLiuchang/article/details/73300381</a></p><p><strong>3.IntelliJ IDEA代码提示不区分大小写</strong>（不同版本修改方式略有不同）<br><img src="/idea%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/001.png" alt="pass1"></p><p><a href="https://blog.csdn.net/shijiebei2009/article/details/38541141">https://blog.csdn.net/shijiebei2009/article/details/38541141</a></p><p><strong>4.Intellij IDEA 自动清除无效 import 和 清除无效 import 的快捷键</strong></p><p><a href="https://blog.csdn.net/heatdeath/article/details/79353990">https://blog.csdn.net/heatdeath/article/details/79353990</a></p><p><strong>5.Intellij IDEA 自动生成 serialVersionUID</strong></p><p> <a href="https://blog.csdn.net/tiantiandjava/article/details/8781776">https://blog.csdn.net/tiantiandjava/article/details/8781776</a> </p><p><strong>6.IntelliJ Idea取消Could not autowire. No beans of ‘xxxx’ type found的错误提示(其实不是错误)</strong></p><p> <a href="https://blog.csdn.net/u010772673/article/details/55105972">https://blog.csdn.net/u010772673/article/details/55105972</a> </p><p><strong>7.去掉IntelliJ IDEA 中 mybatis 对应的 xml 文件警告</strong></p><p> <a href="https://blog.csdn.net/aubdiy/article/details/68485336">https://blog.csdn.net/aubdiy/article/details/68485336</a> </p><p><strong>8.使用jRebel在IntelliJ IDEA 中进行 Java 热部署</strong></p><p><a href="https://blog.csdn.net/liuzhigang828/article/details/72875190">https://blog.csdn.net/liuzhigang828/article/details/72875190</a></p><p><strong>9.设置创建Java文件模板</strong><br>对于一些动态的时间日期之类设定语法可以百度找一下</p><p><img src="/idea%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/002.png" alt="pass1"></p><p>*** 10.避免IDEA自动导入’*‘ **</p><p><a href="https://blog.csdn.net/smd2575624555/article/details/79484206">https://blog.csdn.net/smd2575624555/article/details/79484206</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java默认不支持AES256原因</title>
    <link href="/articles/Java%E9%BB%98%E8%AE%A4%E4%B8%8D%E6%94%AF%E6%8C%81AES256.html"/>
    <url>/articles/Java%E9%BB%98%E8%AE%A4%E4%B8%8D%E6%94%AF%E6%8C%81AES256.html</url>
    
    <content type="html"><![CDATA[<p>名词解释：</p><p>JCE（Java Cryptography Extension）是一组包，它们提供用于加密、<a href="https://baike.baidu.com/item/%E5%AF%86%E9%92%A5">密钥</a>生成和协商以及 Message Authentication Code（MAC）算法的框架和实现。</p><p>它提供对对称、不对称、块和流密码的加密支持，它还支持安全流和密封的对象。它不对外出口，用它开发完成封装后将无法调用。</p><p><strong>自1.4版本以来，</strong> JCE已集成到<strong>Java 2 SDK中。</strong></p><p>下图显示了Java密码体系结构的一般概述。我们在本文中讨论的内容与Sun &#x2F; Oracle提供的JCE实现有关。</p><p><img src="/Java%E9%BB%98%E8%AE%A4%E4%B8%8D%E6%94%AF%E6%8C%81AES256/JCA_Overview.png" alt="pass1"></p><p>根据Oracle文档-  <a href="https://docs.oracle.com/javase/1.5.0/docs/guide/security/jce/JCERefGuide.html#Introduction">https://docs.oracle.com/javase/1.5.0/docs/guide/security/jce/JCERefGuide.html#Introduction</a> </p><p><strong>由于一些国家&#x2F;地区的政府对进口管制的限制，Sun Microsystems的JDK 5.0附带的管辖权策略文件指定可以使用“强”但有限的加密。</strong></p><p> 这意味着JDK默认具有故意的密钥大小限制。因此，您不能使用超过128位（16字节）的密钥执行加密。如果这样做，您会得到类似以下的错误：</p><p><strong>由以下原因引起：java.security.InvalidKeyException：密钥大小或默认参数非法</strong></p><p>如果您收到此Exception，则您没有做错任何事情。这只是对JDK中内置的加密密钥的限制。</p><p>原因是某些国家&#x2F;地区限制了加密算法中使用的允许密钥强度。</p><p>再次根据文档- </p><p><strong>这些文件的“强度不受限制”版本表明对居住在符合条件的国家（大多数国家）中的人没有加密强度的限制。但是只有“强”版本可以导入政府要求限制的国家。JCE框架将强制执行已安装的管辖权策略文件中指定的限制。</strong></p><h3 id="Java-9及更高版本："><a href="#Java-9及更高版本：" class="headerlink" title="Java 9及更高版本："></a><strong>Java 9及更高版本：</strong></h3><p>无限强度辖区策略文件包含在Java 9中，并且默认情况下使用（<a href="https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-D6EE05FB-6791-43B3-A610-3F4416DEE508">请参阅《 Java 9迁移指南》中的“安全更新”</a>）。</p><p>如果您在Java 9中遇到此错误，则可能意味着策略配置已更改为限制性更强的策略（受限），请参阅迁移指南中的说明：</p><p>它指出</p><p>如果您的应用程序以前需要Java密码学扩展（JCE）无限强度管辖权策略文件，那么您不再需要下载或安装它们。它们包含在JDK中，并且默认情况下处于激活状态。</p><p>如果您具有默认提供的两个策略文件都不满足的要求，则可以自定义这些策略文件以满足您的需求。<br> &#x2F;conf&#x2F;security&#x2F;java.security   <a href="https://docs.oracle.com/javase/9/security/java-cryptography-architecture-jca-reference-guide.htm#JSSEC-GUID-EFA5AC2D-644E-4CD9-8523-C6D3936D5FB1">加密强度配置”</a></p><h3 id="Java-8-Update-161及更高版本"><a href="#Java-8-Update-161及更高版本" class="headerlink" title="Java 8 Update 161及更高版本"></a>Java 8 Update 161及更高版本</h3><p>从Java 8 Update 161开始，Java 8默认为“无限强度管辖权策略”。如果收到此错误，则可能表明配置已更改为受限。请参阅下一节有关Java 8 Update 151或上一节有关Java 9的说明，以将其更改回无限制。</p><h3 id="Java-8-Update-151及更高版本"><a href="#Java-8-Update-151及更高版本" class="headerlink" title="Java 8 Update 151及更高版本"></a>Java 8 Update 151及更高版本</h3><p>从Java 8 Update 151开始，Java 8附带了无限强度管辖策略，但默认情况下不使用。要启用它，您需要在<java_home> &#x2F;jre&#x2F;lib&#x2F;security（对于JDK）或<java_home> &#x2F;lib&#x2F;security（对于JRE）中编辑java.security文件。取消注释（或包括）<br>crypto.policy &#x3D; unlimited 行确保使用管理员身份运行的编辑器来编辑文件。</p><p>为了向后兼容，按照下一节中所述安装策略文件仍然可以正常工作。</p><h3 id="在Java-8-Update-151之前-删除最大密钥大小限制"><a href="#在Java-8-Update-151之前-删除最大密钥大小限制" class="headerlink" title="在Java 8 Update 151之前-删除最大密钥大小限制"></a>在Java 8 Update 151之前-删除最大密钥大小限制</h3><p>您可以通过使用无限强度策略jar替换现有的JCE jar来消除最大密钥限制。</p><ul><li><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html">Java密码术扩展（JCE）无限强度管辖权策略文件6</a></p></li><li><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html">Java密码术扩展（JCE）无限强度管辖权策略文件7下载</a></p></li><li><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html">Java密码术扩展（JCE）无限强度管辖权策略文件8下载</a></p></li></ul><p> 下载zip文件，解压缩jar并将其替换为JDK &#x2F; JRE。</p><p>为此，将从上面的zip文件中提取的<strong>local_policy.jar</strong>和<strong>US_export_policy.jar</strong>复制到**$ JAVA_HOME &#x2F; jre &#x2F; lib &#x2F; security** </p><p><strong>注意：这些jar已经在那里，因此您必须将其覆盖。</strong></p><p>然后，只需重新启动Java应用程序，该异常就消失了。<strong>注意</strong>：如果您使用的是Ubuntu和webupd8 PPA，则只需运行-</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt-get <span class="hljs-keyword">install</span> oracle-java8-unlimited-jce-<span class="hljs-keyword">policy</span><br></code></pre></td></tr></table></figure><h3 id="最大加密密钥大小问题的另一种方法"><a href="#最大加密密钥大小问题的另一种方法" class="headerlink" title="最大加密密钥大小问题的另一种方法"></a>最大加密密钥大小问题的另一种方法</h3><p>这种方法确实是一种解决方法。实际上，这种方法是解决所有问题的方法，而且并非一帆风顺。是的，您一定已经猜到了- <strong>反射</strong></p><p><strong>注意1</strong>：我不建议您使用“反射”方法，因为它很容易破解。如果您使用它，请保留它仅用于测试。<br>不要将它放在生产代码中：）<strong>注2：</strong>由于替换策略文件的更改是JDK本身的，因此您将必须在所有服务器上进行更改。另外，您将必须要求所有客户这样做。</p><p>要查找加密算法允许的最大密钥长度，可以使用 <strong>Cipher.getMaxAllowedKeyLength（）</strong> 方法。例如，对于AES算法，您可以- </p><p><strong>int maxKeyLength &#x3D; Cipher.getMaxAllowedKeyLength（“ AES”）;</strong></p><p>参考： <a href="http://opensourceforgeeks.blogspot.com/2014/09/how-to-install-java-cryptography.html">http://opensourceforgeeks.blogspot.com/2014/09/how-to-install-java-cryptography.html</a> </p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>加密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tomcat 参数调优</title>
    <link href="/articles/tomcat-%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98.html"/>
    <url>/articles/tomcat-%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98.html</url>
    
    <content type="html"><![CDATA[<p> tomcat 的Connector配置如下 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">maxThreads</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">acceptCount</span>=<span class="hljs-string">&quot;1000&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>其中最后两个参数意义如下：</p><p><strong>maxThreads</strong>：tomcat起动的最大线程数，即同时处理的任务个数，默认值为200</p><p><strong>acceptCount</strong>：当tomcat起动的线程数达到最大时，接受排队的请求个数，默认值为100</p><p><strong>这两个值如何起作用，请看下面三种情况</strong></p><ul><li><p>情况1：接受一个请求，此时tomcat起动的线程数没有到达maxThreads，tomcat会起动一个线程来处理此请求。</p></li><li><p>情况2：接受一个请求，此时tomcat起动的线程数已经到达maxThreads，tomcat会把此请求放入等待队列，等待空闲线程。</p></li><li><p>情况3：接受一个请求，此时tomcat起动的线程数已经到达maxThreads，等待队列中的请求个数也达到了acceptCount，此时tomcat会直接拒绝此次请求，返回connection refused</p></li></ul><p><strong>maxThreads如何配置</strong></p><p>一般的服务器操作都包括量方面：1计算（主要消耗cpu），2等待（io、数据库等）</p><p>第一种极端情况，如果我们的操作是纯粹的计算，<font color="red"><strong>那么系统响应时间的主要限制就是cpu的运算能力，此时maxThreads应该尽量设的小，降低同一时间内争抢cpu的线程个数，</strong></font>可以提高计算效率，提高系统的整体处理能力。</p><p>第二种极端情况，<font color="red"><strong>如果我们的操作纯粹是IO或者数据库，那么响应时间的主要限制就变为等待外部资源，此时maxThreads应该尽量设的大，这样 才能提高同时处理请求的个数，从而提高系统整体的处理能力。</strong></font>此情况下因为tomcat同时处理的请求量会比较大，所以需要关注一下tomcat的虚拟机内 存设置和linux的open file限制。</p><p>我在测试时遇到一个问题，<strong>maxThreads</strong>我设置的比较大比如3000，当服务的线程数大到一定程度时，一般是2000出头，单次请求的响应时间就会急剧的增加，</p><p>百思不得其解这是为什么，四处寻求答案无果，最后我总结的原因可能是<font color="red"><strong>cpu在线程切换时消耗的时间随着线程数量的增加越来越大，</strong></font></p><p>cpu把大多数时间都用来在这2000多个线程直接切换上了，当然cpu就没有时间来处理我们的程序了。</p><p>以前一直简单的认为多线程&#x3D;高效率。。其实多线程本身并不能提高cpu效率，线程过多反而会降低cpu效率。</p><p>当cpu核心数&lt;线程数时，cpu就需要在多个线程直接来回切换，以保证每个线程都会获得cpu时间，即通常我们说的并发执行。</p><p>所以<strong>maxThreads</strong>的配置绝对不是越大越好。</p><p>现实应用中，我们的操作都会包含以上两种类型（计算、等待），所以maxThreads的配置并没有一个最优值，一定要根据具体情况来配置。</p><p>最好的做法是：在不断测试的基础上，不断调整、优化，才能得到最合理的配置。</p><p><strong>acceptCount的配置</strong>，我一般是设置的跟maxThreads一样大，这个值应该是主要根据应用的访问峰值与平均值来权衡配置的。<br><font color="red"><br><strong>如果设的较小，可以保证接受的请求较快相应，但是超出的请求可能就直接被拒绝</strong><br></font></p><font color="red">**如果设的较大，可能就会出现大量的请求超时的情况，因为我们系统的处理能力是一定的**</font>]]></content>
    
    
    
    <tags>
      
      <tag>优化</tag>
      
      <tag>tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设置 Goproxy 解决 go mod 无法下载依赖的问题</title>
    <link href="/articles/%E8%AE%BE%E7%BD%AE-Goproxy-%E8%A7%A3%E5%86%B3-go-mod-%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E4%BE%9D%E8%B5%96%E7%9A%84%E9%97%AE%E9%A2%98.html"/>
    <url>/articles/%E8%AE%BE%E7%BD%AE-Goproxy-%E8%A7%A3%E5%86%B3-go-mod-%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E4%BE%9D%E8%B5%96%E7%9A%84%E9%97%AE%E9%A2%98.html</url>
    
    <content type="html"><![CDATA[<p>创建go mod 项目</p><img src="/articles/%E8%AE%BE%E7%BD%AE-Goproxy-%E8%A7%A3%E5%86%B3-go-mod-%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E4%BE%9D%E8%B5%96%E7%9A%84%E9%97%AE%E9%A2%98/001.png" class=""><p>创建之后，将会自动创建一个 Go module 文件，用于依赖管理</p><p>下面我们尝试在项目中引入 <a href="https://github.com/gin-gonic/gin">Gin</a> 作为例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">require github.com/gin-gonic/gin v1<span class="hljs-number">.4</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><p>将上述语句写在 go module 中， GoLand 将自动进行依赖的下载和管理。</p><p>由于众所周知的原因，golang.org&#x2F;x 下的包是无法被下载的，当你等待几分钟之后，终端会无情的提示你：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">go</span>: golang.org/x/net@v0.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-<span class="hljs-number">20190503192946</span>-f4e77d36d62c: unrecognized import path <span class="hljs-string">&quot;golang.org/x/net&quot;</span> (https fetch: Get https://golang.org/x/net?go-get=<span class="hljs-number">1</span>: dial tcp <span class="hljs-number">216.239.37.1:443</span>: i/o timeout)<br><span class="hljs-attribute">go</span>: golang.org/x/sys@v0.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-<span class="hljs-number">20190222072716</span>-a9d3bda3a223: unrecognized import path <span class="hljs-string">&quot;golang.org/x/sys&quot;</span> (https fetch: Get https://golang.org/x/sys?go-get=<span class="hljs-number">1</span>: dial tcp <span class="hljs-number">216.239.37.1:443</span>: i/o timeout)<br><span class="hljs-attribute">go</span>: error loading module requirements<br></code></pre></td></tr></table></figure><p>设置 Goproxy 为<a href="https://goproxy.cn来解决这个问题/">https://goproxy.cn来解决这个问题</a></p><img src="/articles/%E8%AE%BE%E7%BD%AE-Goproxy-%E8%A7%A3%E5%86%B3-go-mod-%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E4%BE%9D%E8%B5%96%E7%9A%84%E9%97%AE%E9%A2%98/002.png" class="">]]></content>
    
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud 网关使用记录</title>
    <link href="/articles/Spring-Cloud-%E7%BD%91%E5%85%B3%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html"/>
    <url>/articles/Spring-Cloud-%E7%BD%91%E5%85%B3%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html</url>
    
    <content type="html"><![CDATA[<h2 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h2><p>公司以前有两个项目，项目A和项目B，A和B项目的管理后台是写在一起的，名字叫做admin，随着公司开发第三个项目C，如果C管理后台往admin上面写，那么admin就要同时连接三个数据库（A,B,C项目数据库是分开的），为了让管理后台与原来的系统进行解耦，所以考虑让C的管理后台代码直接写在C上面，admin项目增加网关组件，把C项目管理的请求负载到C项目上面</p><p>因为公司较小，只是想单独用下网关，所以不考虑注册中心即不使用注册中心</p><p>设计图如下</p><img src="/articles/Spring-Cloud-%E7%BD%91%E5%85%B3%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/001.png" class="" title="pass1"><h3 id="gateway和zuul的选择"><a href="#gateway和zuul的选择" class="headerlink" title="gateway和zuul的选择"></a>gateway和zuul的选择</h3><p>gateway和zuul都是Spring Cloud里面的网关组件，具体区别可以百度。</p><p>刚开始考虑gateway是Spring Cloud新版比较提倡使用的，我首先尝试融合了gateway组件</p><ul><li><p>融合gateway</p><p>1.刚开始提示一些cloud 与boot版本不兼容，然后根据官方文档改了一下就Ok了</p><p>2.改好了之后发现gateway里面的webflux和webmvc插件是冲突的，因为网关是与原来admin项目融合不是新建，所以冲突很正常，通过百度可以知道webflux和webmvc本质是差不多，我尝试解决这两个冲突，但是本质上项目是需要这两个jar的，所以目前无解，我考虑了一下问题2决定换zuul，因为在我印象中zuul没有用webflux</p></li><li><p>融合zuul</p><p>1.引入cloud，引入zuul组件，启动方法加上@EnableZuulProxy注解</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Greenwich.SR2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br>  <br>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">zuul:</span><br>  <span class="hljs-attr">routes:</span><br>    <span class="hljs-attr">uaa:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/back/book/**</span><br>      <span class="hljs-attr">stripPrefix:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">http://192.168.0.106:8081</span><br></code></pre></td></tr></table></figure><p>  uaa 为路由名字，随便起的</p><p>  path代表的是拦截路径，stripPrefix默认为true，也就是所有&#x2F;back&#x2F;book&#x2F;xxxx的请求转发给<a href="http://192.168.0.106:8081/xxxx">http://192.168.0.106:8081/xxxx</a> ,去除掉back&#x2F;book前缀</p><p>  url是C后台管理服务的地址</p><p>  3.增加登录拦截，因为C后台管理服务未做登录拦截一类，所以网关这边需要添加登录拦截的代码</p><p>   <a href="https://github.com/Netflix/zuul/wiki/How-it-Works">https://github.com/Netflix/zuul/wiki/How-it-Works</a> </p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.netflix.zuul.ZuulFilter;<br><span class="hljs-keyword">import</span> com.netflix.zuul.context.RequestContext;<br><span class="hljs-keyword">import</span> com.netflix.zuul.exception.ZuulException;<br><span class="hljs-keyword">import</span> com.zhujin.admin.common.commons.JsonCodeEnum;<br><span class="hljs-keyword">import</span> com.zhujin.admin.common.commons.WebUtil;<br><span class="hljs-keyword">import</span> com.zhujin.admin.common.utils.CookieUtil;<br><span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileItem;<br><span class="hljs-keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;<br><span class="hljs-keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> king.wyx@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-11-12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ZuulFilter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">filterType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//PRE过滤器在路由到原点之前执行。示例包括请求身份验证，选择原始服务器以及记录调试信息。</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;pre&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">filterOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldFilter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//是否需要过滤，一般写true</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ZuulException &#123;<br>        <span class="hljs-type">RequestContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> RequestContext.getCurrentContext();<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> ctx.getRequest();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> CookieUtil.getBackToken(request);<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(token)) &#123;<br>            WebUtil.response(ctx.getResponse(), JsonCodeEnum.NOT_LOGIN);<br>            <span class="hljs-comment">//判断认证未通过返回给前端json，需要加上下面这句话要不然依然会被路由到后台的项目上</span><br>            ctx.setSendZuulResponse(<span class="hljs-literal">false</span>);<span class="hljs-comment">// 过滤该请求，不对其进行路由</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>  4.因为C后台管理需要找到该请求的操作人，所以需要携带人员信息，之前admin项目的登录信息都是携带在header的cookie里面，但是经过调试之后，发现zuul会把特定的某几个header头进行过滤，数据传不到下游的，所以需要改几行配置，达到我们的需求</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">zuul:</span><br>  <span class="hljs-attr">routes:</span><br>    <span class="hljs-attr">uaa:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/back/insurance/**</span><br>      <span class="hljs-attr">stripPrefix:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">http://192.168.0.106:8081</span><br>  <span class="hljs-attr">sensitive-headers:</span><br></code></pre></td></tr></table></figure><p>  下面是 sensitive-headers的默认声明代码，所以我们加一个空的 sensitive-headers进行覆盖就ok</p>  <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">private</span> Set&lt;<span class="hljs-keyword">String</span>&gt; sensitiveHeaders = <span class="hljs-keyword">new</span> <span class="hljs-type">LinkedHashSet</span>(Arrays.asList(<span class="hljs-string">&quot;Cookie&quot;</span>, <span class="hljs-string">&quot;Set-Cookie&quot;</span>, <span class="hljs-string">&quot;Authorization&quot;</span>));<br></code></pre></td></tr></table></figure><p>  5.增加断路器，调用发现C项目后台报错之后zuul就会报错误消息，但是为了后台的错误消息统一返回，我们增加断路器,增加如下代码，并添加@EnableHystrix注解</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.demo.admin.common.commons.JsonResp;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.zuul.filters.route.FallbackProvider;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpHeaders;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.http.MediaType;<br><span class="hljs-keyword">import</span> org.springframework.http.client.ClientHttpResponse;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 断路器</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> king.wyx@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-11-15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerFallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FallbackProvider</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRoute</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//*代表在所有路由下生效</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;*&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ClientHttpResponse <span class="hljs-title function_">fallbackResponse</span><span class="hljs-params">(String route, Throwable throwable)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;zuul exception-----&gt;&gt;&gt;&#123;&#125;&quot;</span>,throwable.getCause().getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientHttpResponse</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> HttpStatus <span class="hljs-title function_">getStatusCode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                <span class="hljs-keyword">return</span> HttpStatus.OK;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getRawStatusCode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">200</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStatusText</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> InputStream <span class="hljs-title function_">getBody</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                <span class="hljs-comment">//zuul调用异常后推出默认的提示</span><br>                <span class="hljs-type">JsonResp</span> <span class="hljs-variable">jsonResp</span> <span class="hljs-operator">=</span> JsonResp.toFail(<span class="hljs-string">&quot;服务器繁忙,请稍后再试&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(JSON.toJSONString(jsonResp).getBytes());<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> HttpHeaders <span class="hljs-title function_">getHeaders</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>                headers.setContentType(MediaType.APPLICATION_JSON);<br>                <span class="hljs-keyword">return</span> headers;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>  6.增加断路器之后，我发现我这边的报错依然还是以前的错误信息，并没有提示我预设的提示消息</p><p>   <strong>注意一点</strong> </p><p>  These simple url-routes don’t get executed as a HystrixCommand nor can you loadbalance multiple URLs with Ribbon. To achieve this, specify a service-route and configure a Ribbon client for the serviceId (this currently requires disabling Eureka support in Ribbon: see above for more information), e.g. </p><p>  这些简单的url路由不会作为HystrixCommand执行，也不能使用Ribbon来负载多个URL。 为此，请指定服务路由并为serviceId配置功能区客户端</p><p>  因为我这个项目没有用注册中心，所以理论上我就是简单路由，所以我的断路器没有生效。所以目前无非就两条路，一个是用注册中心，一个是继续研究下</p><p>  通过努力，我发现zuul有一个叫做listOfServers的属性，通过他可以解决C部署多节点后负载的问题和断路器的问题，所以我就改了下试试</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">zuul:</span><br>  <span class="hljs-attr">routes:</span><br>    <span class="hljs-attr">uaa:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/book/insurance/**</span><br>      <span class="hljs-attr">stripPrefix:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">serviceId:</span> <span class="hljs-string">uaa</span><br>  <span class="hljs-attr">add-proxy-headers:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">sensitive-headers:</span><br><span class="hljs-attr">uaa:</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">listOfServers:</span> <span class="hljs-string">http://192.168.0.106:8081</span><br></code></pre></td></tr></table></figure><p>  serviceId的uua和下面的uua一定要对应，要不然也没乱用</p><p>7.zuul增加自定义header</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ZuulException &#123;<br>    <span class="hljs-type">RequestContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> RequestContext.getCurrentContext();<br>    ctx.addZuulRequestHeader(<span class="hljs-string">&quot;userId&quot;</span>, <span class="hljs-string">&quot;111111&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p> 8.值得一提的是，zuul的参数传递跟我想的是不一样的，body里面的参数是inputstream的，理论上只可以读取一次，但是我发现在zuul读了之后，貌似下游服务还可以再读，数据竟然没有丢失</p><p>9.zuul设置超时时间</p><p>注意看官方的文档：<a href="http://cloud.spring.io/spring-cloud-netflix/single/spring-cloud-netflix.html#_zuul_timeouts">http://cloud.spring.io/spring-cloud-netflix/single/spring-cloud-netflix.html#_zuul_timeouts</a><br>这里就是讲zuul的超时的，配置很简单：<br>ribbon.ReadTimeout， ribbon.SocketTimeout这两个就是ribbon超时时间设置，当在yml写时，应该是没有提示的，给人的感觉好像是不是这么配的一样，其实不用管它，直接配上就生效了。<br>还有zuul.host.connect-timeout-millis， zuul.host.socket-timeout-millis这两个配置，这两个和上面的ribbon都是配超时的。区别在于，如果路由方式是serviceId的方式，那么ribbon的生效，如果是url的方式，则zuul.host开头的生效。（此处重要！使用serviceId路由和url路由是不一样的超时策略）<br>如果你在zuul配置了熔断fallback的话，熔断超时也要配置，不然如果你配置的ribbon超时时间大于熔断的超时，那么会先走熔断，相当于你配的ribbon超时就不生效了。</p><p>参考链接</p><p><a href="https://blog.csdn.net/tianyaleixiaowu/article/details/78772269">https://blog.csdn.net/tianyaleixiaowu/article/details/78772269</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>spring-cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven依赖排除</title>
    <link href="/articles/maven%E4%BE%9D%E8%B5%96%E6%8E%92%E9%99%A4.html"/>
    <url>/articles/maven%E4%BE%9D%E8%B5%96%E6%8E%92%E9%99%A4.html</url>
    
    <content type="html"><![CDATA[<p>单依赖过滤</p><p>   同依赖过滤直接处理：可以过滤一个或者多个，如果过滤多个要写多个<exclusion></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.hbase<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hbase<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.94.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>  <br>         <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>     <br>             <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <br>             <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>         <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>多依赖过滤</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.hbase<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hbase<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.94.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven父子项目打包子项目出现Failed to collect dependencies问题</title>
    <link href="/articles/Maven%E7%88%B6%E5%AD%90%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%AD%90%E9%A1%B9%E7%9B%AE%E5%87%BA%E7%8E%B0Failed-to-collect-dependencies%E9%97%AE%E9%A2%98.html"/>
    <url>/articles/Maven%E7%88%B6%E5%AD%90%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%AD%90%E9%A1%B9%E7%9B%AE%E5%87%BA%E7%8E%B0Failed-to-collect-dependencies%E9%97%AE%E9%A2%98.html</url>
    
    <content type="html"><![CDATA[<p>错误如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Failed to execute goal on project project-name: Could not resolve dependencies for project xxx.xxx.xxx.xx:jar:1.0: Failed to collect dependencies for [xxx.xxx.xxx.xxx:jar:1.0 (compile), ......]<br></code></pre></td></tr></table></figure><p>解决方法：</p><p>先打包父工程，然后在打包子模块就可以解决以上问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx做转发时，带&#39;_&#39;的header内容丢失</title>
    <link href="/articles/nginx%E5%81%9A%E8%BD%AC%E5%8F%91%E6%97%B6%EF%BC%8C%E5%B8%A6-%E7%9A%84header%E5%86%85%E5%AE%B9%E4%B8%A2%E5%A4%B1.html"/>
    <url>/articles/nginx%E5%81%9A%E8%BD%AC%E5%8F%91%E6%97%B6%EF%BC%8C%E5%B8%A6-%E7%9A%84header%E5%86%85%E5%AE%B9%E4%B8%A2%E5%A4%B1.html</url>
    
    <content type="html"><![CDATA[<p>今天在线上切换系统时，发现后端微服务报错，说xx header的数值为空，也就是没有传。查看browser信息，发现前端页面系统发出时是带了这个header (user_id)的。也是就header user_id达到后端微服务时没有了。</p><p>那么代码没有改动，怎么平白无故会丢失头信息？<br>于是想到两个环境的不同之处在于线上是通过nginx做的代理转发，会不会是nginx搞的鬼？于是搜索“nginx request header 丢失”，果不其然是这个问题，nginx对下划线的头信息做了限制，找到问题所在就等于完成了一大半，办法总比困难多。遂决定记录之。</p><ul><li><p>方法一：不用下划线</p><p>既然nginx对下划线不支持，那没关系，不用下划线就是了。比如原来”app_version”改成”app-version”就可以了。（难怪一般header的name都是’-‘来拼接的，比如”User-Agent”）</p></li><li><p>方法二：从根本解除nginx的限制</p><p>nginx默认request的header的那么中包含’_’时，会自动忽略掉。<br>解决方法是：在nginx里的 nginx.conf 配置文件中的http部分中添加如下配置：<br>underscores_in_headers on; （默认 underscores_in_headers 为off）</p></li></ul><p>原文链接</p><p><a href="https://blog.csdn.net/bigtree_3721/article/details/80991137">https://blog.csdn.net/bigtree_3721/article/details/80991137</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>事务方法内先提交事务，再进行其他操作</title>
    <link href="/articles/%E4%BA%8B%E5%8A%A1%E6%96%B9%E6%B3%95%E5%86%85%E5%85%88%E6%8F%90%E4%BA%A4%E4%BA%8B%E5%8A%A1%EF%BC%8C%E5%86%8D%E8%BF%9B%E8%A1%8C%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C.html"/>
    <url>/articles/%E4%BA%8B%E5%8A%A1%E6%96%B9%E6%B3%95%E5%86%85%E5%85%88%E6%8F%90%E4%BA%A4%E4%BA%8B%E5%8A%A1%EF%BC%8C%E5%86%8D%E8%BF%9B%E8%A1%8C%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C.html</url>
    
    <content type="html"><![CDATA[<p><strong>问题描述</strong>：有时候会有这种场景，一个事务方法中，有两步操作，操作一为插入数据库操作，操作二把操作一插入数据的id发给其他系统，其他系统拿到id后来查询数据，但是会发现有时候系统运行比较快的时候，查询数据会查不到。<br><strong>原因</strong>：因为两步操作都是在一个事务方法中的，操作二虽然拿到了操作一插入数据的id，然后发给了其他系统，但是这个时候，其实还不能保证事务已经提交了，所以其他的系统通过id来查询数据，会发现有时候查不到。<br><strong>解决办法</strong>：<br>方法一： 把操作二从事务方法中分离出来，然后放到事务方法后面去执行；<br>方法二：在事务方法中加入如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">TransactionSynchronizationManager.registerSynchronization(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionSynchronizationAdapter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCommit</span><span class="hljs-params">()</span> &#123;<br>               <span class="hljs-comment">//操作二</span><br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><p>原文链接</p><p><a href="https://blog.csdn.net/u014039577/article/details/83016629">https://blog.csdn.net/u014039577/article/details/83016629</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何写出无法维护的代码</title>
    <link href="/articles/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E6%97%A0%E6%B3%95%E7%BB%B4%E6%8A%A4%E7%9A%84%E4%BB%A3%E7%A0%81.html"/>
    <url>/articles/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E6%97%A0%E6%B3%95%E7%BB%B4%E6%8A%A4%E7%9A%84%E4%BB%A3%E7%A0%81.html</url>
    
    <content type="html"><![CDATA[<p>看完我想说<br><strong>什么叫“创造力”，创造力就是——就算是要干一件烂事都能干得那么漂亮那么有创意的能力。</strong></p><p><strong>什么叫“抓狂”，抓狂就是——以一种沉着老练的不屈不挠的一本正经的精神一点一点把你推向崩溃的边缘。</strong></p><p><strong>另外，维护程序的朋友们，你们死定了！！</strong></p><span id="more"></span><p>如果建筑师盖房子就像程序员写程序一样，那么，第一只到来的啄木鸟就能毁掉我们的文明</p><h2 id="程序命名"><a href="#程序命名" class="headerlink" title="程序命名"></a>程序命名</h2><ol><li><strong>容易输入的名字</strong>。比如：Fred，asdf</li><li><strong>单字母的变量名</strong>。比如：a,b,c, x,y,z（如果不够用，可以考虑a1,a2,a3,a4,….）</li><li><strong>有创意地拼写错误</strong>。比如：SetPintleOpening， SetPintalClosing。这样可以让人很难搜索代码。</li><li><strong>抽象</strong>。比如：ProcessData, DoIt, GetData… 抽象到就跟什么都没说一样。</li><li><strong>缩写</strong>。比如：WTF，RTFSC …… （使用拼音缩写也同样给力，比如： BT，TMD，TJJTDS）</li><li><strong>随机大写字母</strong>。比如：gEtnuMbER..</li><li><strong>重用命名</strong>。在内嵌的语句块中使用相同的变量名有奇效。</li><li><strong>使用重音字母</strong>。比如：int ínt（第二个 ínt不是int）</li><li><strong>使用下划线</strong>。比如：_, __, ___。</li><li><strong>使用不同的语言</strong>。比如混用英语，德语，或是中文拼音。</li><li><strong>使用字符命名</strong>。比如：slash, asterix, comma…</li><li><strong>使用无关的单词</strong>。比如：god, superman, iloveu….</li><li><strong>混淆l和1</strong>。字母l和数字1有时候是看不出来的。</li></ol><h2 id="伪装欺诈"><a href="#伪装欺诈" class="headerlink" title="伪装欺诈"></a>伪装欺诈</h2><ol><li><p><strong>把注释和代码交织在一起。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;array_len; j+ =<span class="hljs-number">8</span>)<br>&#123;<br>    total += <span class="hljs-built_in">array</span>[j+<span class="hljs-number">0</span> ];<br>    total += <span class="hljs-built_in">array</span>[j+<span class="hljs-number">1</span> ];<br>    total += <span class="hljs-built_in">array</span>[j+<span class="hljs-number">2</span> ]; <span class="hljs-comment">/* Main body of</span><br><span class="hljs-comment">    total += array[j+3]; * loop is unrolled</span><br><span class="hljs-comment">    total += array[j+4]; * for greater speed.</span><br><span class="hljs-comment">    total += array[j+5]; */</span><br>    total += <span class="hljs-built_in">array</span>[j+<span class="hljs-number">6</span> ];<br>    total += <span class="hljs-built_in">array</span>[j+<span class="hljs-number">7</span> ];<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure></li><li><p><strong>代码和显示不一致</strong>。比如，你的界面显示叫postal code，但是代码里确叫 zipcode.</p></li><li><p><strong>隐藏全局变量</strong>。把使用全局变量以函数参数的方式传递给函数，这样可以让人觉得那个变量不是全局变量。</p></li><li><p><strong>使用相似的变量名</strong>。如：单词相似，swimmer 和 swimner，字母相似：ilI1| 或 oO08。parselnt 和 parseInt， D0Calc 和 DOCalc。还有这一组：xy_Z, xy__z, _xy_z, _xyz, XY_Z, xY_z, Xy_z。</p></li><li><p><strong>重载函数</strong>。使用相同的函数名，但是其功能和具体实现完全没有关系。</p></li><li><p><strong>操作符重载</strong>。重载操作符可以让你的代码变得诡异，感谢CCTV，感谢C++。这个东西是可以把混乱代码提高到一种艺术的形式。比如：重载一个类的 ! 操作符，但实际功能并不是取反，让其返回一个整数。于是，如果你使用 ! ! 操作符，那么，有意思的事就发生了—— 先是调用类的重载 ! 操作符，然后把其返回的整数给 ! 成了 布尔变量，如果是 !!! 呢？呵呵。</p></li></ol><h2 id="文档和注释"><a href="#文档和注释" class="headerlink" title="文档和注释"></a>文档和注释</h2><ol><li><strong>在注释中撒谎</strong>。你不用真的去撒谎，只需在改代码的时候不要更新注释就可以了。</li><li><strong>注释里面写废话</strong>。比如：&#x2F;&#x2F;* add 1 to i &#x2F;*&#x2F;</li><li><strong>只注释是什么，而不是为什么</strong>。</li><li><strong>不要注释秘密</strong>。如果你开发一个航班系统，请你一定要保证每有一个新的航班被加入，就得要修改25个以上的位置的程序。千万别把这个事写在文档中。</li><li><strong>注重细节</strong>。当你设计一个很复杂的算法的时候，你一定要把所有的详细细设计都写下来，没有100页不能罢休，段落要有5级以上，段落编号要有500个以上，例如：1.2.4.6.3.13 – Display all impacts for activity where selected mitigations can apply (short pseudocode omitted). 这样，当你写代码的时候，你就可以让你的代码和文档一致，如：Act1_2_4_6_3_13() 千万不要注释度衡单位。比如时间用的是秒还是毫秒，尺寸用的是像素还是英寸，大小是MB还是KB。等等。另外，在你的代码里，你可以混用不同的度衡单位，但也不要注释。</li><li><strong>Gotchas。陷阱</strong>，千万不要注释代码中的陷阱。</li><li><strong>在注释和文档中发泄不满</strong>。</li></ol><h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><ol><li><strong>Java Casts</strong>。Java的类型转型是天赐之物。每一次当你从Collection里取到一个object的时候，你都需要把其转回原来的类型。因些，这些转型操作会出现在N多的地方。如果你改变了类型，那么你不一定能改变所有的地方。而编译器可能能检查到，也可能检查不到。</li><li><strong>利用Java的冗余</strong>。比如：Bubblegum b &#x3D; new Bubblegom(); 和 swimmer &#x3D; swimner + 1; 注意变量间的细微差别。</li><li><strong>从不验证</strong>。从不验证输入的数据，从不验证函数的返回值。这样做可以向大家展示你是多么的信任公司的设备和其它程序员</li><li><strong>不要封装</strong>。调用者需要知道被调用的所有的细节。</li><li><strong>克隆和拷贝</strong>。为了效率，你要学会使用copy + paste。你几乎都不用理解别人的代码，你就可以高效地编程了。</li><li><strong>巨大的listener</strong>。写一个listener，然后让你的所有的button类都使用这个listener，这样你可以在这个listener中整出一大堆if…else…语句，相当的刺激。</li><li><strong>使用三维数组</strong>。如果你觉得三维还不足够，你可以试试四维。</li><li><strong>混用</strong>。同时使用类的get&#x2F;set方法和直接访问那个public变量。这样做的好处是可以极大的挫败维护人员。</li><li><strong>包装，包装，包装</strong>。把你所有的API都包装上6到8遍，包装深度多达4层以上。然后包装出相似的功能。</li><li><strong>没有秘密</strong>。把所有的成员都声明成public的。这样，你以后就很难限制其被人使用，而且这样可以和别的代码造成更多的耦合度，可以让你的代码存活得更久。</li><li><strong>排列和阻碍</strong>。把drawRectangle(height, width) 改成 drawRectangle(width, height)，等release了几个版本后，再把其改回去。这样维护程序的程序员们很快就不明白哪一个是对的。</li><li><strong>把变量改在名字上</strong>。例如，把setAlignment(int alignment)改成，setLeftAlignment, setRightAlignment, setCenterAlignment。</li><li><strong>保留你所有的没有使用的和陈旧的变量，方法和代码</strong>。</li><li><strong>Final你所有的子结点的类</strong>，这样，当你做完这个项目后，没有人可以通过继承来扩展你的类。java.lang.String不也是这样吗？</li><li><strong>避免使用layout</strong>。这样就使得我们只能使用绝对坐标。如果你的老大强制你使用layout，你可以考虑使用GridBagLayout，然后把grid坐标hard code.</li><li><strong>环境变量</strong>。如果你的代码需要使用环境变量。那么，你应该把你的类的成员的初始化使用环境变量，而不是构造函数。</li><li><strong>使用全局变量</strong>。1）把全局变量的初始化放在不同的函数中，就算这个函数和这个变量没有任何关系，这样能够让我们的维护人员就像做侦探工作一样。2）使用全局变量可以让你的函数的参数变得少一些。</li><li><strong>配置文件</strong>。配置文件主要用于一些参数的初始化。在编程中，我们可以让配置文件中的参数名和实际程序中的名字不一样。</li><li><strong>膨胀你的类</strong>。让你的类尽可能地拥有各种臃肿和晦涩的方法。比如，你的类只实现一种可能性，但是你要提供所有可能性的方法。不要定义其它的类，把所有的功能都放在一个类中。</li><li><strong>使用子类</strong>。面向对象是写出无法维护代码的天赐之物。如果你有一个类有十个成为（变量和方法）你可以考虑写10个层次的继承，然后把这十个属性分别放在这十个层次中。如果可能的话，把这十个类分别放在十个不同的文件中。</li><li><strong>混乱你的代码</strong> 使用XML。XML的强大是无人能及的。使用XML你可以把本来只要10行的代码变成100行。而且，还要逼着别人也有XML。（参看，信XML得永生，信XML得自信）</li><li><strong>分解条件表达式</strong>。如：把 a&#x3D;&#x3D;100分解成，a&gt;99 &amp;&amp; a&lt;101</li><li><strong>学会利用分号</strong>。如：if ( a );else;{ int d; d &#x3D; c;}</li><li><strong>间接转型</strong>。如：把double转string，写成new Double(d).toString() 而不是 Double.toString(d)</li><li><strong>大量使用嵌套</strong>。一个NB的程序员可以在一行代码上使用超过10层的小括号（），或是在一个函数里使用超过20层的语句嵌套{}，把嵌套的if else 转成 [? :] 也是一件很NB的事。</li><li><strong>长代码行</strong>。一行的代码越长越好。这样别人阅读时就需要来来回回的</li><li><strong>不要过早的return</strong>。不要使用break，这样，你就需要至少5层以上的if-else来处理错误。</li><li>**不要使用{}。不要在if else使用{}**，尤其是在你重量地使用if-else嵌套时，你甚至可以在其中乱缩进代码，这样一来，就算是最有经验的程序员也会踩上陷阱。</li><li><strong>琐碎的封装</strong>。比较封装一个bool类，类里面什么都做，就是一个bool.</li><li><strong>循环</strong>。千万不可用for(int i&#x3D;0; i&lt;n; i++)使用while代替for，交换n和i，把&lt;改成&lt;&#x3D;，使用 i–调整步伐 。</li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol><li><strong>从不测试</strong>。千万不要测试任何的出错处理，从来也不检测系统调用的返回值。</li><li><strong>永远不做性能测试</strong>。如果不够快就告诉用户换一个更快的机器。如果你一做测试，那么就可能会要改你的算法，甚至重设计，重新架构。</li><li><strong>不要写测试案例</strong>。不要做什么代码覆盖率测试，自动化测试。</li><li><strong>测试是懦夫行为</strong>。一个勇敢的程序员是根本不需要这一步的。太多的程序太害怕他们的老板，害怕失去工作，害怕用户抱怨，甚至被起诉。这种担心害怕直接影响了生产力。如果你对你的代码有强大的信心，那还要什么测试呢？真正的程序员是不需要测试自己的代码的。</li></ol><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol><li><strong>你的老板什么都知道</strong>。无论你的老板有多SB，你都要严格地遵照他的旨意办事，这样一来，你会学到更多的知识以及如何写出更加无法维护的代码。</li><li><strong>颠覆Help Desk</strong>。你要确保你那满是bug的程序永远不要被维护团队知道。当用户打电话和写邮件给你的时候，你就不要理会，就算要理会，让用户重做系统或是告诉用户其帐号有问题，是标准的回答。</li><li><strong>闭嘴</strong>。对于一些像y2k这样的大bug，你要学会守口如瓶，不要告诉任何人，包括你的亲人好友以及公司的同事和管理层，这样当到那一天的时候，你就可以用这个bug挣钱了。</li><li><strong>忽悠</strong>。你会学会忽悠，就算你的代码写得很烂，你也要为其挂上GoF设计模式的标签，就算你的项目做得再烂，你也要为其挂上敏捷的标签，让整个团队和公司，甚至整个业界都开始躁动，这样才能真正为难维护的代码铺平道路。</li></ol><p>这个文档中还有很多很多，实在是太TMD强大了，大家自己去看看吧。有精力有能力的朋友不妨把其翻译成中文。</p><p>总之，我们的口号是—— <strong>Write Everywhere, Read Nowhere</strong></p><p>原文链接 ：<a href="http://mindprod.com/jgloss/unmain.html">http://mindprod.com/jgloss/unmain.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SQLMap常用命令介绍</title>
    <link href="/articles/SQLMap%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D.html"/>
    <url>/articles/SQLMap%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D.html</url>
    
    <content type="html"><![CDATA[<ol><li>sqlmap.py -u “<a href="http://www.xxx.com/index.asp?id=1">http://www.XXX.com/index.asp?id=1</a>“</li></ol><p>　　　　判断id参数是否存在注入：结果中包含 “id” is Vulnerable  字段表示存在注入</p><p>　　　　存在注入，下面的步骤才可以执行成功~</p><span id="more"></span><p>　　2. sqlmap.py -u “<a href="http://www.xxx.com/index.asp?id=1">http://www.XXX.com/index.asp?id=1</a>“  –dbs</p><p>　　　　列举能列出的所有数据库名</p><p>　　3.  sqlmap.py -u “<a href="http://www.xxx.com/index.asp?id=1">http://www.XXX.com/index.asp?id=1</a>“ –current-db</p><p>　　　　列出当前使用的数据库名，假设列出“sqltest”数据库　　</p><p>　　4.  sqlmap.py -u “<a href="http://www.xxx.com/index.asp?id=1">http://www.XXX.com/index.asp?id=1</a>“  –is-dba</p><p>　　　　判断该注入点是否有管理员权限：返回true  表示是管理员</p><p>　　5.  sqlmap.py -u “<a href="http://www.xxx.com/index.asp?id=1">http://www.XXX.com/index.asp?id=1</a>“ -D “sqltest” –tables</p><p>　　　　获取sqltest中的所有表，假设有”admin”表</p><p>　　6.  sqlmap.py -u “<a href="http://www.xxx.com/index.asp?id=1">http://www.XXX.com/index.asp?id=1</a>“ -D “sqltest” -T “admin” –columns</p><p>　　　　列举表admin的字段（列名），假设存在”username”,”password”字段</p><ol start="7"><li>sqlmap.py -u “<a href="http://www.xxx.com/index.asp?id=1">http://www.XXX.com/index.asp?id=1</a>“ -D “sqltest” -T “admin” -C “username,password” –dump</li></ol><p>　　　　下载字段username，password的值，若询问是否破解md5加密，选择no即可</p><p>　　　　至此，对一个简单的注入点（GET方式），现在就已经得到了我们想要的数据</p>]]></content>
    
    
    
    <tags>
      
      <tag>sqlmap</tag>
      
      <tag>安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac os 安装 sqlmap</title>
    <link href="/articles/mac-os-%E5%AE%89%E8%A3%85-sqlmap.html"/>
    <url>/articles/mac-os-%E5%AE%89%E8%A3%85-sqlmap.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/sqlmapproject/sqlmap.git<br>vim ~/.bash_profile<br>添加内容<br>alias sqlmap=&quot;/Users/y50/sqlmap/sqlmap.py&quot;<br>source .bash_profile<br>sqlmap -v<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>sqlmap</tag>
      
      <tag>安全</tag>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>诡异问题记录</title>
    <link href="/articles/%E8%AF%A1%E5%BC%82%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.html"/>
    <url>/articles/%E8%AF%A1%E5%BC%82%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.html</url>
    
    <content type="html"><![CDATA[<p><font color="red">在新的软件环境开发，maven刚配置好，在某个代码库clone了一份maven做包管理的项目，导入之后发现，所有的包都正常下载，但eclipse明显还在报一些未知的错误</font></p> <span id="more"></span><p>这种情况是因为maven有一些基础的包没有下载，这个时候把项目删除，在本地新建一个简单的maven项目，然后删除这个项目，重新拉取你自己的项目，包管理就不会报错了，因为在你新建项目的时候，maven会自己去把那些基础包下载</p><hr><p><font color="red">maven管理jar，发现某些jar不能被下载</font><br>可能刚开始网络不好，之后你调整了网络发现还不能被正常下载，这种一般是由于第一网络不好时本地下载失败，maven本地仓库存在失败的那次缓存，所以当你网络好了之后，maven下载jar的时候发现自己本地有，所以就不给你下载了，这种情况解决办法就是找到你本地仓库的失败的jar进行删除，然后刷新项目即可</p><hr><p><font color="red">httpclient发起http请求假死，无响应</font></p><p>httpclient使用中需要设置connectTimeout和socketTimeout</p><ul><li><p>connectTimeout就是链接建立的时间</p></li><li><p>socketTimeout是等待数据的时间或者两个包之间的间隔时间</p></li></ul><p>程序中最好设置connectTimeout、socketTimeout，可以防止阻塞。 如果不设置connectTimeout会导致，建立tcp链接时，阻塞，假死。如果不设置socketTimeout会导致，已经建立了tcp链接，在通信时，发送了请求报文，恰好此时，网络断掉，程序就阻塞，假死在那。有时，connectTimeout并不像你想的那样一直到最大时间<br>socket建立链接时，如果网络层确定不可达，会直接抛出异常，不会一直到connectTimeout的设定值。</p><hr><p><font color="red">httpcomponents:fluent-hc使用报以下错误</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">org.apache.http.client.HttpResponseException: <br>at org.apache.http.impl.client.AbstractResponseHandler.handleResponse(AbstractResponseHandler.java:<span class="hljs-number">70</span>)<br>at org.apache.http.client.fluent.Response.handleResponse(Response.java:<span class="hljs-number">90</span>)<br>at org.apache.http.client.fluent.Response.returnContent(Response.java:<span class="hljs-number">97</span>)<br></code></pre></td></tr></table></figure><p>错误情况会发生在你连续使用Request.GET 或者POST的时候，原因目前还不知道，解决方案换请求的类库</p><hr><p><font color="red">微信支付成功后，只有点击返回商家按钮才进入支付的成功回调</font></p><p><a href="https://developers.weixin.qq.com/community/develop/doc/000c2a8494c8d03473091a1b25b000">https://developers.weixin.qq.com/community/develop/doc/000c2a8494c8d03473091a1b25b000</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux下 cat grep快速查找内容</title>
    <link href="/articles/linux%E4%B8%8B-cat-grep%E5%BF%AB%E9%80%9F%E6%9F%A5%E6%89%BE%E5%86%85%E5%AE%B9.html"/>
    <url>/articles/linux%E4%B8%8B-cat-grep%E5%BF%AB%E9%80%9F%E6%9F%A5%E6%89%BE%E5%86%85%E5%AE%B9.html</url>
    
    <content type="html"><![CDATA[<p>部署在Linux下的程序，日志很多，而且实时滚动，可以通过以下方式快速查找自己自己想要的内容：</p><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br><br>cat log.txt | grep &#x27;ERROR&#x27; -A 5<br><br>意思是，在log.txt文件中，查找ERROR字符，并显示ERROR所在行的之后5行<br><br>cat log.txt | grep &#x27;ERROR&#x27; -B 5  之前5行<br><br>cat log.txt | grep &#x27;ERROR&#x27; -C 5 前后5行<br><br>cat log.txt | grep -v &#x27;ERROR&#x27; 排除ERROR所在的行<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA中通过Hibernate-Validation进行参数验证</title>
    <link href="/articles/JAVA%E4%B8%AD%E9%80%9A%E8%BF%87Hibernate-Validation%E8%BF%9B%E8%A1%8C%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81.html"/>
    <url>/articles/JAVA%E4%B8%AD%E9%80%9A%E8%BF%87Hibernate-Validation%E8%BF%9B%E8%A1%8C%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81.html</url>
    
    <content type="html"><![CDATA[<p>在开发JAVA服务器端代码时，我们会遇到对外部传来的参数合法性进行验证，而hibernate-validator提供了一些常用的参数校验注解，我们可以拿来使用。</p><span id="more"></span>  <p><strong>1.maven中引入hibernate-validator对应的jar：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.1.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>2.在Model中定义要校验的字段：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.validation.constraints.Pattern;<br><span class="hljs-keyword">import</span> javax.validation.constraints.Size;<br><span class="hljs-keyword">import</span> org.hibernate.validator.constraints.NotEmpty;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PayRequestDto</span> &#123;<br>     <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支付完成时间</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@NotEmpty(message=&quot;支付完成时间不能空&quot;)</span><br>    <span class="hljs-meta">@Size(max=14,message=&quot;支付完成时间长度不能超过&#123;max&#125;位&quot;)</span><br>    <span class="hljs-keyword">private</span> String payTime;<br>     <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@Pattern(regexp = &quot;0[0123]&quot;, message = &quot;状态只能为00或01或02或03&quot;)</span><br>    <span class="hljs-keyword">private</span> String status;<br> <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPayTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> payTime;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPayTime</span><span class="hljs-params">(String payTime)</span> &#123;<br>        <span class="hljs-built_in">this</span>.payTime = payTime;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStatus</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> status;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStatus</span><span class="hljs-params">(String status)</span> &#123;<br>        <span class="hljs-built_in">this</span>.status = status;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.定义Validation工具类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> javax.validation.ConstraintViolation;<br><span class="hljs-keyword">import</span> javax.validation.Validation;<br><span class="hljs-keyword">import</span> javax.validation.Validator;<br><span class="hljs-keyword">import</span> org.hibernate.validator.HibernateValidator;<br><span class="hljs-keyword">import</span> com.atai.framework.lang.AppException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidationUtils</span> &#123;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用hibernate的注解来进行验证</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Validator</span> <span class="hljs-variable">validator</span> <span class="hljs-operator">=</span> Validation<br>            .byProvider(HibernateValidator.class).configure().failFast(<span class="hljs-literal">true</span>).buildValidatorFactory().getValidator();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能描述: &lt;br&gt;</span><br><span class="hljs-comment">     * 〈注解验证参数〉</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> obj</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> [相关类/方法](可选)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> [产品/模块版本](可选)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">validate</span><span class="hljs-params">(T obj)</span> &#123;<br>        Set&lt;ConstraintViolation&lt;T&gt;&gt; constraintViolations = validator.validate(obj);<br>        <span class="hljs-comment">// 抛出检验异常</span><br>        <span class="hljs-keyword">if</span> (constraintViolations.size() &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AppException</span>(<span class="hljs-string">&quot;0001&quot;</span>, String.format(<span class="hljs-string">&quot;参数校验失败:%s&quot;</span>, constraintViolations.iterator().next().getMessage()));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4.在代码中调用工具类进行参数校验：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ValidationUtils.validate(requestDto);<br></code></pre></td></tr></table></figure><p><strong>以下是对hibernate-validator中部分注解进行描述：</strong></p><table><thead><tr><th>@AssertTrue</th><th>用于boolean字段，该字段只能为true</th></tr></thead><tbody><tr><td>@AssertFalse</td><td>该字段的值只能为false</td></tr><tr><td>@CreditCardNumber</td><td>对信用卡号进行一个大致的验证</td></tr><tr><td>@DecimalMax</td><td>只能小于或等于该值</td></tr><tr><td>@DecimalMin</td><td>只能大于或等于该值</td></tr><tr><td>@Digits(integer&#x3D;,fraction&#x3D;)</td><td>检查是否是一种数字的整数、分数,小数位数的数字</td></tr><tr><td>@Email</td><td>检查是否是一个有效的email地址</td></tr><tr><td>@Future</td><td>检查该字段的日期是否是属于将来的日期</td></tr><tr><td>@Length(min&#x3D;,max&#x3D;)</td><td>检查所属的字段的长度是否在min和max之间,只能用于字符串</td></tr><tr><td>@Max</td><td>该字段的值只能小于或等于该值</td></tr><tr><td>@Min</td><td>该字段的值只能大于或等于该值</td></tr><tr><td>@NotNull</td><td>不能为null</td></tr><tr><td>@NotBlank</td><td>不能为空，检查时会将空格忽略</td></tr><tr><td>@NotEmpty</td><td>不能为空，这里的空是指空字符串</td></tr><tr><td>@Null</td><td>检查该字段为空</td></tr><tr><td>@Past</td><td>检查该字段的日期是在过去</td></tr><tr><td>@Pattern(regex&#x3D;,flag&#x3D;)</td><td>被注释的元素必须符合指定的正则表达式</td></tr><tr><td>@Range(min&#x3D;,max&#x3D;,message&#x3D;)</td><td>被注释的元素必须在合适的范围内</td></tr><tr><td>@Size(min&#x3D;, max&#x3D;)</td><td>检查该字段的size是否在min和max之间，可以是字符串、数组、集合、Map等</td></tr><tr><td>@URL(protocol&#x3D;,host,port)</td><td>检查是否是一个有效的URL，如果提供了protocol，host等，则该URL还需满足提供的条件</td></tr><tr><td>@Valid</td><td>该注解主要用于字段为一个包含其他对象的集合或map或数组的字段，或该字段直接为一个其他对象的引用，这样在检查当前对象的同时也会检查该字段所引用的对象</td></tr></tbody></table><p>参考链接：</p><p><a href="https://www.cnblogs.com/atai/p/6943404.html">https://www.cnblogs.com/atai/p/6943404.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>hibernate</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git子模块-git module</title>
    <link href="/articles/git%E5%AD%90%E6%A8%A1%E5%9D%97-git-module.html"/>
    <url>/articles/git%E5%AD%90%E6%A8%A1%E5%9D%97-git-module.html</url>
    
    <content type="html"><![CDATA[<h2 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h2><p>经常有这样的事情，当你在一个项目上工作时，你需要在其中使用另外一个项目。也许它是一个第三方开发的库或者是你独立开发和并在多个父项目中使用的。这个场景下一个常见的问题产生了：你想将两个项目单独处理但是又需要在其中一个中使用另外一个。</p><span id="more"></span><p>这里有一个例子。假设你在开发一个网站，为之创建Atom源。你不想编写一个自己的Atom生成代码，而是决定使用一个库。你可能不得不像CPAN install或者Ruby gem一样包含来自共享库的代码，或者将代码拷贝到你的项目树中。如果采用包含库的办法，那么不管用什么办法都很难去定制这个库，部署它就更加困难了，因为你必须确保每个客户都拥有那个库。把代码包含到你自己的项目中带来的问题是，当上游被修改时，任何你进行的定制化的修改都很难归并。</p><p>Git 通过子模块处理这个问题。子模块允许你将一个 Git 仓库当作另外一个Git仓库的子目录。这允许你克隆另外一个仓库到你的项目中并且保持你的提交相对独立。</p><h3 id="子模块初步"><a href="#子模块初步" class="headerlink" title="子模块初步"></a>子模块初步</h3><p>假设你想把 Rack 库（一个 Ruby 的 web 服务器网关接口）加入到你的项目中，可能既要保持你自己的变更，又要延续上游的变更。首先你要把外部的仓库克隆到你的子目录中。你通过<br><code>git submodule add</code>将外部项目加为子模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git submodule add git://github.com/chneukirchen/rack.git rack</span><br>Initialized empty Git repository in /opt/subtest/rack/.git/<br>remote: Counting objects: 3181, done.<br>remote: Compressing objects: 100% (1534/1534), done.<br>remote: Total 3181 (delta 1951), reused 2623 (delta 1603)<br>Receiving objects: 100% (3181/3181), 675.42 KiB | 422 KiB/s, done.<br>Resolving deltas: 100% (1951/1951), done.<br></code></pre></td></tr></table></figure><p>现在你就在项目里的<br><code>rack</code>子目录下有了一个 Rack 项目。你可以进入那个子目录，进行变更，加入你自己的远程可写仓库来推送你的变更，从原始仓库拉取和归并等等。如果你在加入子模块后立刻运行<br><code>git status</code>，你会看到下面两项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git status</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">On branch master</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Changes to be committed:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  (use <span class="hljs-string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#      new file:   .gitmodules</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">     new file:   rack</span><br><span class="hljs-meta prompt_">#</span><br></code></pre></td></tr></table></figure><p>首先你注意到有一个<br><code>.gitmodules</code>文件。这是一个配置文件，保存了项目 URL 和你拉取到的本地子目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> .gitmodules</span><br>[submodule &quot;rack&quot;]<br>      path = rack<br>      url = git://github.com/chneukirchen/rack.git<br></code></pre></td></tr></table></figure><p>如果你有多个子模块，这个文件里会有多个条目。很重要的一点是这个文件跟其他文件一样也是处于版本控制之下的，就像你的<br><code>.gitignore</code>文件一样。它跟项目里的其他文件一样可以被推送和拉取。这是其他克隆此项目的人获知子模块项目来源的途径。</p><p><code>git status</code>的输出里所列的另一项目是 rack 。如果你运行在那上面运行<br><code>git diff</code>，会发现一些有趣的东西：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git diff --cached rack</span><br>diff --git a/rack b/rack<br>new file mode 160000<br>index 0000000..08d709f<br>--- /dev/null<br>+++ b/rack<br>@@ -0,0 +1 @@<br>+Subproject commit 08d709f78b8c5b0fbeb7821e37fa53e69afcf433<br></code></pre></td></tr></table></figure><p>尽管<br><code>rack</code>是你工作目录里的子目录，但 Git 把它视作一个子模块，当你不在那个目录里时并不记录它的内容。取而代之的是，Git 将它记录成来自那个仓库的一个特殊的提交。当你在那个子目录里修改并提交时，子项目会通知那里的 HEAD 已经发生变更并记录你当前正在工作的那个提交；通过那样的方法，当其他人克隆此项目，他们可以重新创建一致的环境。</p><p>这是关于子模块的重要一点：你记录他们当前确切所处的提交。你不能记录一个子模块的<br><code>master</code>或者其他的符号引用。</p><p>当你提交时，会看到类似下面的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -m <span class="hljs-string">&#x27;first commit with submodule rack&#x27;</span></span><br>[master 0550271] first commit with submodule rack<br> 2 files changed, 4 insertions(+), 0 deletions(-)<br> create mode 100644 .gitmodules<br> create mode 160000 rack<br></code></pre></td></tr></table></figure><p>注意 rack 条目的 160000 模式。这在Git中是一个特殊模式，基本意思是你将一个提交记录为一个目录项而不是子目录或者文件。</p><p>你可以将<br><code>rack</code>目录当作一个独立的项目，保持一个指向子目录的最新提交的指针然后反复地更新上层项目。所有的Git命令都在两个子目录里独立工作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span> -1</span><br>commit 0550271328a0038865aad6331e620cd7238601bb<br>Author: Scott Chacon &lt;schacon@gmail.com&gt;<br>Date:   Thu Apr 9 09:03:56 2009 -0700<br><br>    first commit with submodule rack<br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> rack/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span> -1</span><br>commit 08d709f78b8c5b0fbeb7821e37fa53e69afcf433<br>Author: Christian Neukirchen &lt;chneukirchen@gmail.com&gt;<br>Date:   Wed Mar 25 14:49:04 2009 +0100<br><br>    Document version change<br></code></pre></td></tr></table></figure><h3 id="克隆一个带子模块的项目"><a href="#克隆一个带子模块的项目" class="headerlink" title="克隆一个带子模块的项目"></a>克隆一个带子模块的项目</h3><p>这里你将克隆一个带子模块的项目。当你接收到这样一个项目，你将得到了包含子项目的目录，但里面没有文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> git://github.com/schacon/myproject.git</span><br>Initialized empty Git repository in /opt/myproject/.git/<br>remote: Counting objects: 6, done.<br>remote: Compressing objects: 100% (4/4), done.<br>remote: Total 6 (delta 0), reused 0 (delta 0)<br>Receiving objects: 100% (6/6), done.<br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> myproject</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ls</span> -l</span><br>total 8<br>-rw-r--r--  1 schacon  admin   3 Apr  9 09:11 README<br>drwxr-xr-x  2 schacon  admin  68 Apr  9 09:11 rack<br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ls</span> rack/</span><br><span class="hljs-meta prompt_">$</span><br></code></pre></td></tr></table></figure><p><code>rack</code>目录存在了，但是是空的。你必须运行两个命令：<br><code>git submodule init</code>来初始化你的本地配置文件，<br><code>git submodule update</code>来从那个项目拉取所有数据并检出你上层项目里所列的合适的提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git submodule init</span><br>Submodule &#x27;rack&#x27; (git://github.com/chneukirchen/rack.git) registered for path &#x27;rack&#x27;<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git submodule update</span><br>Initialized empty Git repository in /opt/myproject/rack/.git/<br>remote: Counting objects: 3181, done.<br>remote: Compressing objects: 100% (1534/1534), done.<br>remote: Total 3181 (delta 1951), reused 2623 (delta 1603)<br>Receiving objects: 100% (3181/3181), 675.42 KiB | 173 KiB/s, done.<br>Resolving deltas: 100% (1951/1951), done.<br>Submodule path &#x27;rack&#x27;: checked out &#x27;08d709f78b8c5b0fbeb7821e37fa53e69afcf433&#x27;<br></code></pre></td></tr></table></figure><p>现在你的<br><code>rack</code>子目录就处于你先前提交的确切状态了。如果另外一个开发者变更了 rack 的代码并提交，你拉取那个引用然后归并之，将得到稍有点怪异的东西：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git merge origin/master</span><br>Updating 0550271..85a3eee<br>Fast forward<br> rack |    2 +-<br> 1 files changed, 1 insertions(+), 1 deletions(-)<br>[master*]$ git status<br><span class="hljs-meta prompt_"># </span><span class="language-bash">On branch master</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Changes not staged <span class="hljs-keyword">for</span> commit:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  (use <span class="hljs-string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="hljs-keyword">in</span> working directory)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#      modified:   rack</span></span><br><span class="hljs-meta prompt_">#</span><br></code></pre></td></tr></table></figure><p>你归并来的仅仅上是一个指向你的子模块的指针；但是它并不更新你子模块目录里的代码，所以看起来你的工作目录处于一个临时状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git diff</span><br>diff --git a/rack b/rack<br>index 6c5e70b..08d709f 160000<br>--- a/rack<br>+++ b/rack<br>@@ -1 +1 @@<br>-Subproject commit 6c5e70b984a60b3cecd395edd5b48a7575bf58e0<br>+Subproject commit 08d709f78b8c5b0fbeb7821e37fa53e69afcf433<br></code></pre></td></tr></table></figure><p>事情就是这样，因为你所拥有的指向子模块的指针和子模块目录的真实状态并不匹配。为了修复这一点，你必须再次运行<br><code>git submodule update</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git submodule update</span><br>remote: Counting objects: 5, done.<br>remote: Compressing objects: 100% (3/3), done.<br>remote: Total 3 (delta 1), reused 2 (delta 0)<br>Unpacking objects: 100% (3/3), done.<br>From git@github.com:schacon/rack<br>   08d709f..6c5e70b  master     -&gt; origin/master<br>Submodule path &#x27;rack&#x27;: checked out &#x27;6c5e70b984a60b3cecd395edd5b48a7575bf58e0&#x27;<br></code></pre></td></tr></table></figure><p>每次你从主项目中拉取一个子模块的变更都必须这样做。看起来很怪但是管用。</p><p>一个常见问题是当开发者对子模块做了一个本地的变更但是并没有推送到公共服务器。然后他们提交了一个指向那个非公开状态的指针然后推送上层项目。当其他开发者试图运行<br><code>git submodule update</code>，那个子模块系统会找不到所引用的提交，因为它只存在于第一个开发者的系统中。如果发生那种情况，你会看到类似这样的错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git submodule update</span><br>fatal: reference isn’t a tree: 6c5e70b984a60b3cecd395edd5b48a7575bf58e0<br>Unable to checkout &#x27;6c5e70b984a60b3cecd395edd5ba7575bf58e0&#x27; in submodule path &#x27;rack&#x27;<br></code></pre></td></tr></table></figure><p>你不得不去查看谁最后变更了子模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span> -1 rack</span><br>commit 85a3eee996800fcfa91e2119372dd4172bf76678<br>Author: Scott Chacon &lt;schacon@gmail.com&gt;<br>Date:   Thu Apr 9 09:19:14 2009 -0700<br><br>    added a submodule reference I will never make public. hahahahaha!<br></code></pre></td></tr></table></figure><p>然后，你给那个家伙发电子邮件说他一通。</p><h3 id="上层项目"><a href="#上层项目" class="headerlink" title="上层项目"></a>上层项目</h3><p>有时候，开发者想按照他们的分组获取一个大项目的子目录的子集。如果你是从 CVS 或者 Subversion 迁移过来的话这个很常见，在那些系统中你已经定义了一个模块或者子目录的集合，而你想延续这种类型的工作流程。</p><p>在 Git 中实现这个的一个好办法是你将每一个子目录都做成独立的 Git 仓库，然后创建一个上层项目的 Git 仓库包含多个子模块。这个办法的一个优势是你可以在上层项目中通过标签和分支更为明确地定义项目之间的关系。</p><h3 id="子模块的问题"><a href="#子模块的问题" class="headerlink" title="子模块的问题"></a>子模块的问题</h3><p>使用子模块并非没有任何缺点。首先，你在子模块目录中工作时必须相对小心。当你运行<br><code>git submodule update</code>，它会检出项目的指定版本，但是不在分支内。这叫做获得一个分离的头——这意味着 HEAD 文件直接指向一次提交，而不是一个符号引用。问题在于你通常并不想在一个分离的头的环境下工作，因为太容易丢失变更了。如果你先执行了一次<br><code>submodule update</code>，然后在那个子模块目录里不创建分支就进行提交，然后再次从上层项目里运行<br><code>git submodule update</code>同时不进行提交，Git会毫无提示地覆盖你的变更。技术上讲你不会丢失工作，但是你将失去指向它的分支，因此会很难取到。</p><p>为了避免这个问题，当你在子模块目录里工作时应使用<br><code>git checkout -b work</code>创建一个分支。当你再次在子模块里更新的时候，它仍然会覆盖你的工作，但是至少你拥有一个可以回溯的指针。</p><p>切换带有子模块的分支同样也很有技巧。如果你创建一个新的分支，增加了一个子模块，然后切换回不带该子模块的分支，你仍然会拥有一个未被追踪的子模块的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout -b rack</span><br>Switched to a new branch &quot;rack&quot;<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git submodule add git@github.com:schacon/rack.git rack</span><br>Initialized empty Git repository in /opt/myproj/rack/.git/<br>...<br>Receiving objects: 100% (3184/3184), 677.42 KiB | 34 KiB/s, done.<br>Resolving deltas: 100% (1952/1952), done.<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -am <span class="hljs-string">&#x27;added rack submodule&#x27;</span></span><br>[rack cc49a69] added rack submodule<br> 2 files changed, 4 insertions(+), 0 deletions(-)<br> create mode 100644 .gitmodules<br> create mode 160000 rack<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout master</span><br>Switched to branch &quot;master&quot;<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git status</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">On branch master</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Untracked files:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="hljs-keyword">in</span> what will be committed)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#      rack/</span></span><br></code></pre></td></tr></table></figure><p>你将不得不将它移走或者删除，这样的话当你切换回去的时候必须重新克隆它——你可能会丢失你未推送的本地的变更或分支。</p><p>最后一个需要引起注意的是关于从子目录切换到子模块的。如果你已经跟踪了你项目中的一些文件但是想把它们移到子模块去，你必须非常小心，否则Git会生你的气。假设你的项目中有一个子目录里放了 rack 的文件，然后你想将它转换为子模块。如果你删除子目录然后运行<br><code>submodule add</code>，Git会向你大吼：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">rm</span> -Rf rack/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git submodule add git@github.com:schacon/rack.git rack</span><br>&#x27;rack&#x27; already exists in the index<br></code></pre></td></tr></table></figure><p>你必须先将<br><code>rack</code>目录撤回。然后你才能加入子模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">rm</span> -r rack</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git submodule add git@github.com:schacon/rack.git rack</span><br>Initialized empty Git repository in /opt/testsub/rack/.git/<br>remote: Counting objects: 3184, done.<br>remote: Compressing objects: 100% (1465/1465), done.<br>remote: Total 3184 (delta 1952), reused 2770 (delta 1675)<br>Receiving objects: 100% (3184/3184), 677.42 KiB | 88 KiB/s, done.<br>Resolving deltas: 100% (1952/1952), done.<br></code></pre></td></tr></table></figure><p>现在假设你在一个分支里那样做了。如果你尝试切换回一个仍然在目录里保留那些文件而不是子模块的分支时——你会得到下面的错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout master</span><br>error: Untracked working tree file &#x27;rack/AUTHORS&#x27; would be overwritten by merge.<br></code></pre></td></tr></table></figure><p>你必须先移除<br><code>rack</code>子模块的目录才能切换到不包含它的分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mv</span> rack /tmp/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout master</span><br>Switched to branch &quot;master&quot;<br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ls</span></span><br>README  rack<br></code></pre></td></tr></table></figure><p>然后，当你切换回来，你会得到一个空的<br><code>rack</code>目录。你可以运行<br><code>git submodule update</code>重新克隆，也可以将<br><code>/tmp/rack</code>目录重新移回空目录。</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git submodule add git://github.com/chneukirchen/rack.git rack 添加子模块<br>git submodule init 来初始化你的本地配置文件，<br>git submodule update`来从那个项目拉取所有数据并检出你上层项目里所列的合适的提交：<br>git rm -r rack 删除子模块<br></code></pre></td></tr></table></figure><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97">https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java 中 break continue label的使用</title>
    <link href="/articles/java-%E4%B8%AD-break-continue-label%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
    <url>/articles/java-%E4%B8%AD-break-continue-label%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
    
    <content type="html"><![CDATA[<p>java中 label 配合 break continue 使用的其实是比较少的.<br>这种做法在业务代码中比较少见.<br>在读其他库的代码时可能会遇到该语法的使用.<br>下面对该语法做简短解释.</p><span id="more"></span><h3 id="break-label"><a href="#break-label" class="headerlink" title="break label"></a>break label</h3><p>用来终止循环体的循环,使用break 可以终止的循环体包括三种, for,while,do-while</p><h3 id="不带-label使用-break-时"><a href="#不带-label使用-break-时" class="headerlink" title="不带 label使用 break 时"></a>不带 label使用 break 时</h3><p>执行 break ,会终止离 break 关键字最近的循环体的循环.<br>示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    System.out.println(String.format(<span class="hljs-string">&quot;start outer for loop index %d&quot;</span>, i));<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        System.out.println(String.format(<span class="hljs-string">&quot;inner loop with while index %d&quot;</span>, j));<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-comment">//终止最近的for,while,do-while循环</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            j++;<br>        &#125;<br>    &#125;<br>    System.out.println(String.format(<span class="hljs-string">&quot;end outer for loop index %d&quot;</span>, i));<br>&#125;<br></code></pre></td></tr></table></figure><p>结果为</p><p>start outer for loop index 0<br>inner loop with while index 0<br>inner loop with while index 1<br>inner loop with while index 2<br>end outer for loop index 0<br>start outer for loop index 1<br>inner loop with while index 0<br>inner loop with while index 1<br>inner loop with while index 2<br>end outer for loop index 1<br>start outer for loop index 2<br>inner loop with while index 0<br>inner loop with while index 1<br>inner loop with while index 2<br>end outer for loop index 2</p><p>通过打印可以看出,内部循环每次执行到2时就将当前 while 死循环停止.<br>而外部循环则会从0遍历到2,正常循环遍历.不受 break 的影响.</p><h3 id="带-label-的break"><a href="#带-label-的break" class="headerlink" title="带 label 的break"></a>带 label 的break</h3><p>会终止指定 label 所对应的循环体.<br>示例为从二维的student age 数组中,找第一个年纪为9岁的学生.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> students[][] = &#123;&#123;<span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>&#125;, &#123;<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">9</span>, <span class="hljs-number">15</span>, <span class="hljs-number">7</span>&#125;&#125;;<br>jumpOutHere:<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    System.out.println(String.format(<span class="hljs-string">&quot;start outer for loop index %d&quot;</span>, i));<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (j &lt; <span class="hljs-number">3</span>) &#123;<br>        System.out.println(String.format(<span class="hljs-string">&quot;current retrieve value %d&quot;</span>, students[i][j]));<br>        <span class="hljs-keyword">if</span> (students[i][j] == <span class="hljs-number">9</span>) &#123;<br>            <span class="hljs-keyword">break</span> jumpOutHere;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            j++;<br>        &#125;<br>    &#125;<br>    System.out.println(String.format(<span class="hljs-string">&quot;end outer for loop index %d&quot;</span>, i));<br>&#125;<br></code></pre></td></tr></table></figure><p>结果为</p><p>start outer for loop index 0<br>current retrieve value 10<br>current retrieve value 12<br>current retrieve value 11<br>end outer for loop index 0<br>start outer for loop index 1<br>current retrieve value 8<br>current retrieve value 9</p><p>当遍历到二维数组中第一个年纪为9的学生时,直接终止 label 对应的循环.此处为外层循环.</p><h3 id="continue-label"><a href="#continue-label" class="headerlink" title="continue label"></a>continue label</h3><p>用来跳过循环体中本次执行的循环,使用continue 可以跳过的循环体包括三种, for,while,do-while</p><h3 id="不带-label-的-continue"><a href="#不带-label-的-continue" class="headerlink" title="不带 label 的 continue"></a>不带 label 的 continue</h3><p>会跳过距离continue最近的循环体的本次执行,执行下一次循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    System.out.println(String.format(<span class="hljs-string">&quot;start outer for loop index %d&quot;</span>, i));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;k&lt;<span class="hljs-number">3</span>;k++)&#123;<br>        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        System.out.println(String.format(<span class="hljs-string">&quot;inner loop index %d&quot;</span>,k));<br>    &#125;<br>    System.out.println(String.format(<span class="hljs-string">&quot;end outer for loop index %d&quot;</span>, i));<br>&#125;<br></code></pre></td></tr></table></figure><p>start outer for loop index 0<br>inner loop index 0<br>inner loop index 2<br>end outer for loop index 0<br>start outer for loop index 1<br>inner loop index 0<br>inner loop index 2<br>end outer for loop index 1<br>start outer for loop index 2<br>inner loop index 0<br>inner loop index 2<br>end outer for loop index 2</p><p>通过示例可以看出当 k&#x3D;1时会跳过本次内部循环(也是离 continue 最近的循环),直接执行下一次内部循环.</p><h3 id="带-label-的-continue"><a href="#带-label-的-continue" class="headerlink" title="带 label 的 continue"></a>带 label 的 continue</h3><p>会跳过标记为 label 的循环体中的本次循环的执行,并执行, label 标记位置的下一个循环.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">CONTINU_LABLE:<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    System.out.println(String.format(<span class="hljs-string">&quot;start outer for loop index %d&quot;</span>, i));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">3</span>; k++) &#123;<br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">continue</span> CONTINU_LABLE;<br>        System.out.println(String.format(<span class="hljs-string">&quot;inner loop index %d&quot;</span>, k));<br>    &#125;<br>    System.out.println(String.format(<span class="hljs-string">&quot;end outer for loop index %d&quot;</span>, i));<br>&#125;<br></code></pre></td></tr></table></figure><p>start outer for loop index 0<br>inner loop index 0<br>start outer for loop index 1<br>inner loop index 0<br>start outer for loop index 2<br>inner loop index 0</p><p>通过结果可以看出,当 k&#x3D;1时,直接就跳到<em>CONTINU_LABLE</em>标记的循环体的下一次循环了.</p><p>参考链接：<a href="https://www.jianshu.com/p/7954b61bc6ee">https://www.jianshu.com/p/7954b61bc6ee</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 按指定字段自定义列表排序</title>
    <link href="/articles/MySQL-%E6%8C%89%E6%8C%87%E5%AE%9A%E5%AD%97%E6%AE%B5%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%97%E8%A1%A8%E6%8E%92%E5%BA%8F.html"/>
    <url>/articles/MySQL-%E6%8C%89%E6%8C%87%E5%AE%9A%E5%AD%97%E6%AE%B5%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%97%E8%A1%A8%E6%8E%92%E5%BA%8F.html</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>大家都知道, MySQL 中按某字段升序排列的 SQL 为 (以 id 为例, 下同):</p><span id="more"></span><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `MyTable` <br><span class="hljs-keyword">WHERE</span> `id` <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>) <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> `id` <span class="hljs-keyword">ASC</span><br></code></pre></td></tr></table></figure><p>降序排列的 SQL 为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `MyTable` <br><span class="hljs-keyword">WHERE</span> `id` <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>) <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> `id` <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure><p>有时以上排序并不能满足我们的需求. 例如, 我们想要按 id 以 5, 3, 7, 1 的顺序排列, 该如何实现. 这也是很多国内外同行经常遇到的问题之一.</p><p>下面我们给出按表中某字段, 以我们想要的列表方式排序的解决方案.</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>用”按字段排序” (ORDER BY FIELD).</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> FIELD(`id`, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>要注意的是, <strong>FIELD 后面是没有空格的</strong>.</p><p>因此, 完整的 SQL 为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `MyTable` <br><span class="hljs-keyword">WHERE</span> `id` <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>) <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> FIELD(`id`, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="常见应用"><a href="#常见应用" class="headerlink" title="常见应用"></a>常见应用</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `MyTable` <br><span class="hljs-keyword">WHERE</span> `name` <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;孙六&#x27;</span>) <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> FIELD(`name`, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;孙六&#x27;</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql中的concat函数</title>
    <link href="/articles/mysql%E4%B8%AD%E7%9A%84concat%E5%87%BD%E6%95%B0.html"/>
    <url>/articles/mysql%E4%B8%AD%E7%9A%84concat%E5%87%BD%E6%95%B0.html</url>
    
    <content type="html"><![CDATA[<p><strong>MySQL中concat函数</strong></p><p>使用方法：<br><strong>concat(str1,str2,…)</strong></p><p><strong>返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL。</strong></p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select concat(&#x27;11&#x27;,&#x27;22&#x27;,&#x27;33&#x27;);<br>+------------------------+<br>| concat(&#x27;11&#x27;,&#x27;22&#x27;,&#x27;33&#x27;) |<br>+------------------------+<br>| 112233 |<br>+------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>MySQL的concat函数在连接字符串的时候，只要其中一个是NULL,那么将返回NULL</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select concat(&#x27;11&#x27;,&#x27;22&#x27;,null);<br>+------------------------+<br>| concat(&#x27;11&#x27;,&#x27;22&#x27;,null) |<br>+------------------------+<br>| NULL |<br>+------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><hr><p><strong>MySQL中concat_ws函数</strong></p><p>使用方法：<br><strong>contcat_ws(separator,str1,str2,…)</strong></p><p><strong>contcat_ws() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符。分隔符的位置放在要连接的两个字符串之间。分隔符可以是一个字符串，也可以是其它参数。<br>注意：<br>如果分隔符为 NULL，则结果为 NULL。函数会忽略任何分隔符参数后的 NULL 值。</strong></p><p><strong>如连接后以逗号分隔</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select concat_ws(&#x27;,&#x27;,&#x27;11&#x27;,&#x27;22&#x27;,&#x27;33&#x27;);<br><br>+-------------------------------+<br>| concat_ws(&#x27;,&#x27;,&#x27;11&#x27;,&#x27;22&#x27;,&#x27;33&#x27;) |<br>+-------------------------------+<br>| 11,22,33 |<br>+-------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>和MySQL中concat函数不同的是, concat_ws函数在执行的时候,不会因为NULL值而返回NULL</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select concat_ws(&#x27;,&#x27;,&#x27;11&#x27;,&#x27;22&#x27;,NULL);<br>+-------------------------------+<br>| concat_ws(&#x27;,&#x27;,&#x27;11&#x27;,&#x27;22&#x27;,NULL) |<br>+-------------------------------+<br>| 11,22 |<br>+-------------------------------+<br>1 row in set (0.00 sec)<br><br></code></pre></td></tr></table></figure><p><strong>MySQL中group_concat函数</strong></p><hr><p><strong>完整的语法如下：</strong><br><strong>group_concat([DISTINCT] 要连接的字段 [Order BY ASC&#x2F;DESC 排序字段] [Separator ‘分隔符’])</strong></p><p><strong>基本查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from aa;<br>+------+------+<br>| id| name |<br>+------+------+<br>|1 | 10|<br>|1 | 20|<br>|1 | 20|<br>|2 | 20|<br>|3 | 200 |<br>|3 | 500 |<br>+------+------+<br>6 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>以id分组，把name字段的值打印在一行，逗号分隔(默认)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select id,group_concat(name) from aa group by id;<br>+------+--------------------+<br>| id| group_concat(name) |<br>+------+--------------------+<br>|1 | 10,20,20|<br>|2 | 20 |<br>|3 | 200,500|<br>+------+--------------------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>以id分组，把name字段的值打印在一行，分号分隔</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select id,group_concat(name separator &#x27;;&#x27;) from aa group by id;<br>+------+----------------------------------+<br>| id| group_concat(name separator &#x27;;&#x27;) |<br>+------+----------------------------------+<br>|1 | 10;20;20 |<br>|2 | 20|<br>|3 | 200;500 |<br>+------+----------------------------------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>以id分组，把去冗余的name字段的值打印在一行，逗号分隔</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select id,group_concat(distinct name) from aa group by id;<br>+------+-----------------------------+<br>| id| group_concat(distinct name) |<br>+------+-----------------------------+<br>|1 | 10,20|<br>|2 | 20 |<br>|3 | 200,500 |<br>+------+-----------------------------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>以id分组，把name字段的值打印在一行，逗号分隔，以name排倒序</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select id,group_concat(name order by name desc) from aa group by id;<br>+------+---------------------------------------+<br>| id| group_concat(name order by name desc) |<br>+------+---------------------------------------+<br>|1 | 20,20,10 |<br>|2 | 20|<br>|3 | 500,200|<br>+------+---------------------------------------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>MySQL中repeat()函数</strong></p><p><strong>用来复制字符串,如下’ab’表示要复制的字符串，2表示复制的份数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select repeat(&#x27;ab&#x27;,2);<br><br>+----------------+<br>| repeat(&#x27;ab&#x27;,2) |<br>+----------------+<br>| abab |<br>+----------------+<br><br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>又如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select repeat(&#x27;a&#x27;,2);<br><br>+---------------+<br>| repeat(&#x27;a&#x27;,2) |<br>+---------------+<br>| aa |<br>+---------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>参考链接 <a href="https://www.cnblogs.com/yingmo/p/6148360.html">https://www.cnblogs.com/yingmo/p/6148360.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>https页面中引http 资源的解决方式</title>
    <link href="/articles/https%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%BC%95http-%E8%B5%84%E6%BA%90%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F.html"/>
    <url>/articles/https%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%BC%95http-%E8%B5%84%E6%BA%90%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F.html</url>
    
    <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>浏览器默认是不允许在 https 里面引用 http 资源的，一般都会弹出提示框。</p><span id="more"></span><img src="/articles/https%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%BC%95http-%E8%B5%84%E6%BA%90%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/001.png" class=""><p>用户确认后才会继续加载，用户体验非常差。</p><p>而且如果在一个 https 页面里动态的引入 http 资源，比如引入一个 js 文件，会被直接 block 掉的。Chrome v21 之后，在 SSL 加密页面 embed 非 SSL 的 Flash 资源也会被默默的屏蔽掉，只留下一句 console 报告。</p><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><h3 id="相对协议"><a href="#相对协议" class="headerlink" title="相对协议"></a>相对协议</h3><p>如果你的网站同时准备了 https 资源和 http 资源，那么，可以使用<strong>相对协议</strong>可以帮助你实现当网站引入的都是 http 资源，网站域名更换为 https 后的无缝切换。</p><p>具体使用方法为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;//domain.com/img/logo.png&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>简而言之，就是将URL的协议（http、https）去掉，只保留<code>//</code>及后面的内容。这样，在使用<code>https</code>的网站中，浏览器会通过<code>https</code>请求URL，否则就通过<code>http</code>发送请求。</p><blockquote><p>附注：如果是浏览本地文件，浏览器通过<code>file://</code>协议发送请求，导致请求失败，因此本地测试最好是搭建一个本地服务器。</p></blockquote><p><a href="https://html5boilerplate.com/">HTML5 Boilerplate</a> 使用相对协议请求 Google CDN 中的 jQuery ，使用方式为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">!<span class="hljs-variable language_">window</span>.<span class="hljs-property">jQuery</span> &amp;&amp; <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-built_in">unescape</span>(<span class="hljs-string">&#x27;%3Cscript src=&quot;js/libs/jquery-1.4.2.js&quot;%3E%3C/script%3E&#x27;</span>))</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的例子中除了引用 Google CDN 中的文件外，还添加了一个本地 jQuery 链接，以便连接 Google CDN 失败后，使用本地副本。代码判断过程为：</p><ol><li>首先检查 jquery 对象是否存在，如果存在，证明 Google CDN 运行正常；</li><li>如果不存在，则说明连接 Google CDN 失败，引入本地 jQuery 库。</li></ol><blockquote><p>本猿认为，在国内相对特殊的网络环境中，Google CDN 请求缓慢甚至失败常有，因此不推荐引用 Google CDN 托管的各种库。即便有备用链接，浏览器还是会多次尝试请求 Google CDN 中的文件，这个过程可谓漫长，严重影响页面载入速度。</p></blockquote><h3 id="使用-iframe"><a href="#使用-iframe" class="headerlink" title="使用 iframe"></a>使用 iframe</h3><p>使用 iframe 的方式引入 http 资源，比如在 https 里面播放优酷的视频，我们可以先在一个 http 的页面里播放优酷视频，然后将这个页面嵌入到 https 页面里就可以了。</p><p>另外一个典型的例子是在 https 页面里通过 Ajax 的方式请求 http 资源，Chrome 是不允许直接 Ajax 请求 http 的。如果两个页面的内容都可以控制的话，当前窗口可以 iframe 窗口进行通信。</p><h2 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h2><p>这个小技巧同样适用于 CSS ：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.omg</span> &#123; <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">//websbestgifs.net/kittyonadolphin.gif</span>); &#125;<br></code></pre></td></tr></table></figure><blockquote><p>附注：<code>&lt;link&gt;</code>或<code>@import</code>引入样式表时使用相对协议，IE7、IE8 会下载文件两次。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://csspod.com/the-protocol-relative-url/">相对协议URL</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins部署spring boot项目</title>
    <link href="/articles/jenkins%E9%83%A8%E7%BD%B2spring-boot%E9%A1%B9%E7%9B%AE.html"/>
    <url>/articles/jenkins%E9%83%A8%E7%BD%B2spring-boot%E9%A1%B9%E7%9B%AE.html</url>
    
    <content type="html"><![CDATA[<p>部署脚本</p> <span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">使环境变量生效</span><br>source ~/.bash_profile <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">进行编译构建出jar</span> <br>gradle clean<br>gradle build -x test<br>projectName=test-project<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果进程存在则<span class="hljs-built_in">kill</span></span><br>pid=`ps -ef | grep $projectName | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`  <br>if [ -z $pid ] ; then <br>echo &quot;no process id &quot;<br>else  <br>kill -9 $pid<br>echo  &quot;end.................................&quot;<br>sleep 3<br>fi<br>echo  &quot;start...............................&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动spring boot jar</span><br>BUILD_ID=dontKillMe nohup java -jar test-project-2.0.jar &amp;<br></code></pre></td></tr></table></figure><p>test-project-2.0.jar确保跟打包出来的jar名称一样。projectName变量确保为打包出来的jar名称</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>spring-boot</tag>
      
      <tag>jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>撤销git已经提交的版本</title>
    <link href="/articles/%E6%92%A4%E9%94%80git%E5%B7%B2%E7%BB%8F%E6%8F%90%E4%BA%A4%E7%9A%84%E7%89%88%E6%9C%AC.html"/>
    <url>/articles/%E6%92%A4%E9%94%80git%E5%B7%B2%E7%BB%8F%E6%8F%90%E4%BA%A4%E7%9A%84%E7%89%88%E6%9C%AC.html</url>
    
    <content type="html"><![CDATA[<p>git revert 撤销 某次操作，此次操作之前和之后的commit和history都会保留，并且把这次撤销<br>作为一次最新的提交<br><code>git revert HEAD</code> 撤销前一次 commit<br><code>git revert HEAD^</code> 撤销前前一次 commit</p> <span id="more"></span><p><code>git revert fa042ce57ebbe5bb</code> （fa042ce57ebbe5bb是版本sha）撤销指定的版本，撤销也会作为一次提交进行保存。 git revert是提交一个新的版本，将需要revert的版本的内容再反向修改回去， 版本会递增，不影响之前提交的内容</p><p>-——————————————————————————————————————————————-</p><p>git revert 和 git reset的区别</p><ol><li>git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit。</li><li>在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为git revert是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是git reset是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。</li><li>git reset 是把HEAD向后移动了一下，而git revert是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IntelliJ IDEA 的 .idea 目录加入.gitignore无效的解决方法</title>
    <link href="/articles/IntelliJ-IDEA-%E7%9A%84-idea-%E7%9B%AE%E5%BD%95%E5%8A%A0%E5%85%A5-gitignore%E6%97%A0%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html"/>
    <url>/articles/IntelliJ-IDEA-%E7%9A%84-idea-%E7%9B%AE%E5%BD%95%E5%8A%A0%E5%85%A5-gitignore%E6%97%A0%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html</url>
    
    <content type="html"><![CDATA[<p>无效的原因是：对应的目录或者文件已经被git跟踪，此时再加入.gitignore后就无效了，</p><p>解决办法：</p><span id="more"></span><p>先执行</p><p>[文件夹]  git rm -r –cached .idea</p><p>[文件]     git rm –cached demo-project.iml</p><p>再重新加入.gitignore文件</p>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>do{...}while(false)的用法</title>
    <link href="/articles/do-while-false-%E7%9A%84%E7%94%A8%E6%B3%95.html"/>
    <url>/articles/do-while-false-%E7%9A%84%E7%94%A8%E6%B3%95.html</url>
    
    <content type="html"><![CDATA[<p>今天看代码时发现个不太理解的风格，一些代码都分段包含在了do{…}while(false)区间里。一般来说，使用do while是为了循环，但这里循环条件是false，根本就不会有循环，那么意义何在？</p><span id="more"></span><p>上网查了下后得到结论：使用do{…}while(false)结构可以简化多级判断时代码的嵌套。</p><p>举个例子：现在要实现一个功能，但需要A、B、C、D四个前提条件，并且这四个前提条件都存在上级依赖，即B依赖于A，C依赖于A和B，D依赖于A、B和C。如果按照一般的写法，是这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>( A==<span class="hljs-literal">true</span> )<br>&#123;<br>    <span class="hljs-comment">//do nothing</span><br>    <span class="hljs-keyword">if</span>( B==<span class="hljs-literal">true</span> )<br>    &#123;<br>        <span class="hljs-comment">//do nothing</span><br>        <span class="hljs-keyword">if</span>( C==<span class="hljs-literal">true</span> )<br>        &#123;<br>            <span class="hljs-comment">//do nothing</span><br>            <span class="hljs-keyword">if</span>( D==<span class="hljs-literal">true</span> )<br>            &#123;<br>                <span class="hljs-comment">//do nothing</span><br>                <span class="hljs-comment">//实现功能代码</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 可能看出来，这样导致多层if语句嵌套，看起来逻辑很不清晰。</p><p>一种解决的办法是使用goto语句，当某个条件不成立时，直接跳转到之后的语句段，形如这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>( A==<span class="hljs-literal">false</span> )<br>    <span class="hljs-comment">//do nothing</span><br>    <span class="hljs-keyword">goto</span> tag;<br><span class="hljs-keyword">if</span>( B==<span class="hljs-literal">false</span> )<br>    <span class="hljs-comment">//do nothing</span><br>    <span class="hljs-keyword">goto</span> tag;<br><span class="hljs-keyword">if</span>( C==<span class="hljs-literal">false</span> )<br>    <span class="hljs-comment">//do nothing</span><br>    <span class="hljs-keyword">goto</span> tag;<br><span class="hljs-keyword">if</span>( D==<span class="hljs-literal">false</span> )<br>    <span class="hljs-comment">//do nothing</span><br>    <span class="hljs-keyword">goto</span> tag;<br><span class="hljs-comment">//实现功能代码</span><br><br>tag:<br>...<br></code></pre></td></tr></table></figure><p> 这样看起来风格是好多了，但使用goto语句会有很多隐患，一般是不建议用的。</p><p>其实使用do while语句也可以实现类似goto的功能，但代码可读性会比goto风格好很多。代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">do</span><br>&#123;<br>    <span class="hljs-keyword">if</span>( A==<span class="hljs-literal">false</span> )<br>        <span class="hljs-comment">//do nothing</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span>( B==<span class="hljs-literal">false</span> )<br>        <span class="hljs-comment">//do nothing</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span>( C==<span class="hljs-literal">false</span> )<br>        <span class="hljs-comment">//do nothing</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span>( D==<span class="hljs-literal">false</span> )<br>        <span class="hljs-comment">//do nothing</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-comment">//实现功能代码</span><br>&#125;<span class="hljs-keyword">while</span>(<span class="hljs-literal">false</span>);<br>...<br></code></pre></td></tr></table></figure><p> 这样就可以明白了： 在 do{…}while(false)中的代码段，可以用break的方式实现类似goto的跳转功能，在实际工程中很有使用价值。</p><hr><p>参考文章:</p><ul><li><a href="https://blog.csdn.net/this_capslock/article/details/41843371">https://blog.csdn.net/this_capslock/article/details/41843371</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS7 安装Gradle</title>
    <link href="/articles/CentOS7-%E5%AE%89%E8%A3%85Gradle.html"/>
    <url>/articles/CentOS7-%E5%AE%89%E8%A3%85Gradle.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1.下载安装包"></a>1.下载安装包</h1><p><a href="https://downloads.gradle.org/distributions/gradle-3.2.1-all.zip">https://downloads.gradle.org/distributions/gradle-3.2.1-all.zip</a></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">wget https://downloads.gradle<span class="hljs-meta">.org</span>/distributions/gradle<span class="hljs-number">-3.2</span><span class="hljs-number">.1</span>-all.zip<br></code></pre></td></tr></table></figure><span id="more"></span><h1 id="2-解压安装"><a href="#2-解压安装" class="headerlink" title="2.解压安装"></a>2.解压安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /usr/software/<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>unzip gradle-<span class="hljs-number">3.2</span>.<span class="hljs-number">1</span>-all.zip<br></code></pre></td></tr></table></figure><h1 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置环境变量</h1><p>1.打开 &#x2F;etc&#x2F; 目录下的 profile 文件：</p><p>一般有的profile在~目录中，名字可能叫.profile或.bash_profils</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>vi /etc/profile<br></code></pre></td></tr></table></figure><p>2.将如下代码追加到 profile 文件末尾：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># gradle settings start 2017-05-16</span><br><br>GRADLE_HOME=/usr/software/gradle-3.2.1<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$&#123;GRADLE_HOME&#125;</span>/bin:<span class="hljs-variable">$&#123;PATH&#125;</span><br><br><span class="hljs-comment"># gradle settings end - 2017-05-16</span><br></code></pre></td></tr></table></figure><p>3.重载&#x2F;etc&#x2F;profile这个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h1 id="4-检验是否安装成功"><a href="#4-检验是否安装成功" class="headerlink" title="4.检验是否安装成功"></a>4.检验是否安装成功</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>gradle -version<br></code></pre></td></tr></table></figure><hr><p>参考文章:</p><ul><li><a href="https://blog.csdn.net/jeikerxiao/article/details/72235411">https://blog.csdn.net/jeikerxiao/article/details/72235411</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang 在 Mac、Linux、Windows 下如何交叉编译</title>
    <link href="/articles/Golang-%E5%9C%A8-Mac%E3%80%81Linux%E3%80%81Windows-%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91.html"/>
    <url>/articles/Golang-%E5%9C%A8-Mac%E3%80%81Linux%E3%80%81Windows-%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91.html</url>
    
    <content type="html"><![CDATA[<p>Golang 支持交叉编译，在一个平台上生成另一个平台的可执行程序，最近使用了一下，非常好用，这里备忘一下。</p><span id="more"></span><p>Mac 下编译 Linux 和 Windows 64位可执行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">CGO_ENABLED GOOS=linux GOARCH=amd64  build main.go<br>CGO_ENABLED GOOS=windows GOARCH=amd64  build main.go<br></code></pre></td></tr></table></figure><p>Linux 下编译 Mac 和 Windows 64位可执行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">CGO_ENABLED GOOS=darwin GOARCH=amd64  build main.go<br>CGO_ENABLED GOOS=windows GOARCH=amd64  build main.go<br></code></pre></td></tr></table></figure><p>Windows 下编译 Mac 和 Linux 64位可执行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">SET CGO_ENABLED=0<br>SET GOOS=darwin<br>SET GOARCH=amd64<br>go build main.go<br><br>SET CGO_ENABLED=0<br>SET GOOS=linux<br>SET GOARCH=amd64<br>go build main.go<br></code></pre></td></tr></table></figure><p>GOOS：目标平台的操作系统（darwin、freebsd、linux、windows）<br>GOARCH：目标平台的体系架构（386、amd64、arm）<br>交叉编译不支持 CGO 所以要禁用它</p><p>上面的命令编译 64 位可执行程序，你当然应该也会使用 386 编译 32 位可执行程序<br>很多博客都提到要先增加对其它平台的支持，但是我跳过那一步，上面所列的命令也都能成功，且得到我想要的结果，可见那一步应该是非必须的，或是我所使用的 Go 版本已默认支持所有平台。</p>]]></content>
    
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决手机等移动设备中照片上传至服务器方向不正确的问题</title>
    <link href="/articles/%E8%A7%A3%E5%86%B3%E6%89%8B%E6%9C%BA%E7%AD%89%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87%E4%B8%AD%E7%85%A7%E7%89%87%E4%B8%8A%E4%BC%A0%E8%87%B3%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%B9%E5%90%91%E4%B8%8D%E6%AD%A3%E7%A1%AE%E7%9A%84%E9%97%AE%E9%A2%98.html"/>
    <url>/articles/%E8%A7%A3%E5%86%B3%E6%89%8B%E6%9C%BA%E7%AD%89%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87%E4%B8%AD%E7%85%A7%E7%89%87%E4%B8%8A%E4%BC%A0%E8%87%B3%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%B9%E5%90%91%E4%B8%8D%E6%AD%A3%E7%A1%AE%E7%9A%84%E9%97%AE%E9%A2%98.html</url>
    
    <content type="html"><![CDATA[<h2 id="如果将手机等移动设备中的照片上传至服务器，再显示已上传的图片，可能会有方向不正确的问题，例如下图"><a href="#如果将手机等移动设备中的照片上传至服务器，再显示已上传的图片，可能会有方向不正确的问题，例如下图" class="headerlink" title="如果将手机等移动设备中的照片上传至服务器，再显示已上传的图片，可能会有方向不正确的问题，例如下图"></a>如果将手机等移动设备中的照片上传至服务器，再显示已上传的图片，可能会有方向不正确的问题，例如下图</h2> <span id="more"></span><img src="/articles/%E8%A7%A3%E5%86%B3%E6%89%8B%E6%9C%BA%E7%AD%89%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87%E4%B8%AD%E7%85%A7%E7%89%87%E4%B8%8A%E4%BC%A0%E8%87%B3%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%B9%E5%90%91%E4%B8%8D%E6%AD%A3%E7%A1%AE%E7%9A%84%E9%97%AE%E9%A2%98/001.png" class="" title="image.png"><h2 id="这是因为照片中含有旋转参数（存放在照片exif信息里面），它告知你照片是什么方向的，但我们如果没有处理方向，显示就会不正确。"><a href="#这是因为照片中含有旋转参数（存放在照片exif信息里面），它告知你照片是什么方向的，但我们如果没有处理方向，显示就会不正确。" class="headerlink" title="这是因为照片中含有旋转参数（存放在照片exif信息里面），它告知你照片是什么方向的，但我们如果没有处理方向，显示就会不正确。"></a>这是因为照片中含有旋转参数（存放在照片exif信息里面），它告知你照片是什么方向的，但我们如果没有处理方向，显示就会不正确。</h2><p>首先介绍一下什么是EXIF，EXIF是 Exchangeable Image File的缩写，这是一种专门为数码相机照片设定的格式。这种格式可以用来记录数字照片的属性信息，例如相机的品牌及型号、相片的拍摄时间、拍摄时所设置的光圈大小、快门速度、ISO等等信息。除此之外它还能够记录拍摄数据，以及照片格式化方式，这样就可以输出到兼容EXIF格式的外设上，例如照片打印机等。</p><p>目前最常见的支持EXIF信息的图片格式是JPG，很多的图像工具都可以直接显示图片的EXIF信息，包括现在的一些著名的相册网站也提供页面用于显示照片的EXIF信息。本文主要介绍Java语言如何读取图像的EXIF信息，包括如何根据EXIF信息对图像进行调整以适合用户浏览。</p><p>目前最简单易用的EXIF信息处理的Java包是Drew Noakes写的metadata-extractor，该项目最新的版本是2.3.0，支持EXIF 2.2版本。你可以直接从<a href="http://www.drewnoakes.com/code/exif/">http://www.drewnoakes.com/code/exif/</a> 下载该项目的最新版本包括其源码。</p><p>需要注意的是，并不是每个JPG图像文件都包含有EXIF信息，你可以在Windows资源管理器单击选中图片后，如果该图片包含EXIF信息，则在窗口状态栏会显示出相机的型号，如下图所示：</p><p>拍摄设备的型号便是EXIF信息中的其中一个。</p><h2 id="下面我们给出一段代码将这个图片的所有的EXIF信息全部打印出来。"><a href="#下面我们给出一段代码将这个图片的所有的EXIF信息全部打印出来。" class="headerlink" title="下面我们给出一段代码将这个图片的所有的EXIF信息全部打印出来。"></a>下面我们给出一段代码将这个图片的所有的EXIF信息全部打印出来。</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> com.drew.imaging.jpeg.JpegMetadataReader;<br><span class="hljs-keyword">import</span> com.drew.metadata.Directory;<br><span class="hljs-keyword">import</span> com.drew.metadata.Metadata;<br><span class="hljs-keyword">import</span> com.drew.metadata.Tag;<br><span class="hljs-keyword">import</span> com.drew.metadata.exif.ExifDirectory;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试用于读取图片的EXIF信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> ExifTester &#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) <span class="hljs-keyword">throws</span> Exception &#123;<br>         <span class="hljs-keyword">File</span> jpegFile = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;D:\\我的文档\\我的相册\\DSCF1749.JPG&quot;</span>);<br>         Metadata metadata = JpegMetadataReader.readMetadata(jpegFile);<br>         Directory exif = metadata.getDirectory(ExifDirectory.<span class="hljs-keyword">class</span>);<br>         Iterator tags = exif.getTagIterator();<br>         <span class="hljs-keyword">while</span> (tags.hasNext()) &#123;<br>             Tag tag = (Tag)tags.<span class="hljs-keyword">next</span>();<br>             System.out.<span class="hljs-keyword">println</span>(tag);<br>         &#125;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="如何把方向不正确的图片旋转正确，下面提供一段旋转图片的代码"><a href="#如何把方向不正确的图片旋转正确，下面提供一段旋转图片的代码" class="headerlink" title="如何把方向不正确的图片旋转正确，下面提供一段旋转图片的代码"></a>如何把方向不正确的图片旋转正确，下面提供一段旋转图片的代码</h2><h2 id="注-代码对于图片的旋转并不能使所有图片都展示正常，毕竟有很多本身就是展示错误，并且无EXIF信息的图片，所以，对于旋转一般要求前台加上手动旋转的功能"><a href="#注-代码对于图片的旋转并不能使所有图片都展示正常，毕竟有很多本身就是展示错误，并且无EXIF信息的图片，所以，对于旋转一般要求前台加上手动旋转的功能" class="headerlink" title="注:代码对于图片的旋转并不能使所有图片都展示正常，毕竟有很多本身就是展示错误，并且无EXIF信息的图片，所以，对于旋转一般要求前台加上手动旋转的功能"></a>注:代码对于图片的旋转并不能使所有图片都展示正常，毕竟有很多本身就是展示错误，并且无EXIF信息的图片，所以，对于旋转一般要求前台加上手动旋转的功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.drew.imaging.jpeg.JpegMetadataReader;<br><span class="hljs-keyword">import</span> com.drew.imaging.jpeg.JpegProcessingException;<br><span class="hljs-keyword">import</span> com.drew.metadata.Directory;<br><span class="hljs-keyword">import</span> com.drew.metadata.Metadata;<br><span class="hljs-keyword">import</span> com.drew.metadata.MetadataException;<br><span class="hljs-keyword">import</span> com.drew.metadata.exif.ExifIFD0Directory;<br><br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> java.awt.Dimension;<br><span class="hljs-keyword">import</span> java.awt.Graphics2D;<br><span class="hljs-keyword">import</span> java.awt.Rectangle;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据图片属性判断图片是否需要旋转</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> king.wyx@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018-09-06</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoRotatePhotoUtil</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否需要对图片进行旋转</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputStream</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">verifyCorrection</span><span class="hljs-params">(InputStream inputStream)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">angle</span> <span class="hljs-operator">=</span> getDegreeRotation(inputStream);<br>        <span class="hljs-keyword">return</span> angle != <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取旋转角度</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputStream</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 旋转角度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDegreeRotation</span><span class="hljs-params">(InputStream inputStream)</span> &#123;<br>        <span class="hljs-type">Metadata</span> <span class="hljs-variable">metadata</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">orientation</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            metadata = JpegMetadataReader.readMetadata(inputStream);<br>            <span class="hljs-type">Directory</span> <span class="hljs-variable">directory</span> <span class="hljs-operator">=</span> metadata.getFirstDirectoryOfType(ExifIFD0Directory.class);<br>            orientation = directory.getInt(ExifIFD0Directory.TAG_ORIENTATION);<br>        &#125; <span class="hljs-keyword">catch</span> (JpegProcessingException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (MetadataException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    inputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">angle</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">switch</span> (orientation) &#123;<br>            <span class="hljs-comment">//3旋转180</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                angle = <span class="hljs-number">180</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                <span class="hljs-comment">//6旋转90</span><br>                angle = <span class="hljs-number">90</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>                <span class="hljs-comment">//8旋转90</span><br>                angle = <span class="hljs-number">270</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> angle;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对图片流进行角度旋转</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputStream</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> angel</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InputStream <span class="hljs-title function_">rotatePhonePhoto</span><span class="hljs-params">(InputStream inputStream, <span class="hljs-type">int</span> angel)</span> &#123;<br>        <span class="hljs-keyword">if</span> (inputStream == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">BufferedImage</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            src = ImageIO.read(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    inputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span> src.getWidth(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> src.getHeight(<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">Rectangle</span> <span class="hljs-variable">rect_des</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dimension</span>(width, height));<br><br>        <span class="hljs-type">BufferedImage</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedImage</span>(rect_des.width, rect_des.height, BufferedImage.TYPE_INT_RGB);<br>        <span class="hljs-type">Graphics2D</span> <span class="hljs-variable">g2</span> <span class="hljs-operator">=</span> res.createGraphics();<br><br>        g2.translate((rect_des.width - width) / <span class="hljs-number">2</span>,<br>                (rect_des.height - height) / <span class="hljs-number">2</span>);<br>        g2.rotate(Math.toRadians(angel), width / <span class="hljs-number">2</span>, height / <span class="hljs-number">2</span>);<br><br>        g2.drawImage(src, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            ImageIO.write(res, <span class="hljs-string">&quot;jpg&quot;</span>, os);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(os.toByteArray());<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>文件处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux 安装nginx</title>
    <link href="/articles/linux-%E5%AE%89%E8%A3%85nginx.html"/>
    <url>/articles/linux-%E5%AE%89%E8%A3%85nginx.html</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h1><h3 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">yum install gcc gcc-c++ make <span class="hljs-built_in">auto</span>make <span class="hljs-built_in">auto</span>conf libtool pcre pcre-devel zlib zlib-devel openssl openssl-devel<br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="2-下载nginx"><a href="#2-下载nginx" class="headerlink" title="2.下载nginx"></a>2.下载nginx</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">http:</span>//nginx<span class="hljs-meta">.org</span>/en/download.html<br><span class="hljs-symbol">http:</span>//nginx<span class="hljs-meta">.org</span>/download/nginx<span class="hljs-number">-1.6</span><span class="hljs-number">.2</span>.tar.gz<br></code></pre></td></tr></table></figure><h3 id="3-启动server状态页和https模块"><a href="#3-启动server状态页和https模块" class="headerlink" title="3.启动server状态页和https模块"></a>3.启动server状态页和https模块</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./configure</span> <span class="hljs-params">--with-http_stub_status_module</span> <span class="hljs-params">--with-http_ssl_module</span><br></code></pre></td></tr></table></figure><h3 id="4-编译安装"><a href="#4-编译安装" class="headerlink" title="4.编译安装"></a>4.编译安装</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">make</span><br><span class="hljs-built_in">make</span> install<br></code></pre></td></tr></table></figure><h3 id="5-查看nginx版本"><a href="#5-查看nginx版本" class="headerlink" title="5.查看nginx版本"></a>5.查看nginx版本</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -v<br></code></pre></td></tr></table></figure><h1 id="Nginx命令"><a href="#Nginx命令" class="headerlink" title="Nginx命令"></a>Nginx命令</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">检查配置文件ngnix.conf的正确性命令：<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -t<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/webserver/</span>nginx<span class="hljs-regexp">/sbin/</span>nginx -s reload            <span class="hljs-comment"># 重新载入配置文件</span><br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/webserver/</span>nginx<span class="hljs-regexp">/sbin/</span>nginx -s reopen            <span class="hljs-comment"># 重启 Nginx</span><br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/webserver/</span>nginx<span class="hljs-regexp">/sbin/</span>nginx -s stop              <span class="hljs-comment"># 停止 Nginx</span><br></code></pre></td></tr></table></figure><h1 id="类库缺少解决方案"><a href="#类库缺少解决方案" class="headerlink" title="类库缺少解决方案"></a>类库缺少解决方案</h1><p><strong>1、GCC——GNU编译器集合（GCC可以使用默认包管理器的仓库（repositories）来安装，包管理器的选择依赖于你使用的Linux发布版本，包管理器有不同的实现：yum是基于Red Hat的发布版本；apt用于Debian和Ubuntu；yast用于SuSE Linux等等。）</strong><br>RedHat中安装GCC：  </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> gcc<br></code></pre></td></tr></table></figure><p>Ubuntu中安装GCC：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> install gcc<br></code></pre></td></tr></table></figure><p><strong>2、PCRE库（Nginx编译需要PCRE（Perl Compatible Regular Expression），因为Nginx的Rewrite模块和HTTP核心模块会使用到PCRE正则表达式语法。这里需要安装两个安装包pcre和pcre-devel。第一个安装包提供编译版本的库，而第二个提供开发阶段的头文件和编译项目的源代码，这正是我们需要的理由。）</strong><br>RedHat中安装PCRE：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> pcre pcre-devel<br></code></pre></td></tr></table></figure><p>Ubuntu中安装PCRE：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">apt-<span class="hljs-built_in">get</span> install libpcre3 libpcre3-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><p><strong>3、zlib库（zlib库提供了开发人员的压缩算法，在Nginx的各种模块中需要使用gzip压缩。如同安装PCRE一样，同样需要安装库和它的源代码：zlib和zlib-devel。）</strong><br>RedHat中安装zlib：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">yum install <span class="hljs-literal">zlib</span> <span class="hljs-literal">zlib</span>-devel<br></code></pre></td></tr></table></figure><p>Ubuntu中安装zlib：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">apt-<span class="hljs-built_in">get</span> install zlib1g zlib1g-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><p><strong>4、OpenSSL库（在Nginx中，如果服务器提供安全网页时则会用到OpenSSL库，我们需要安装库文件和它的开发安装包（openssl和openssl-devel）。）</strong><br>RedHat中安装OpenSSL：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> openssl openssl-devel<br>sudo apt-get <span class="hljs-keyword">install</span> libssl-dev<br></code></pre></td></tr></table></figure><p>Ubuntu中安装OpenSSL：（注：Ubuntu14.04的仓库中没有发现openssl-dev）：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">apt-<span class="hljs-built_in">get</span> install openssl openssl-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><h1 id="Nginx配置文件示例"><a href="#Nginx配置文件示例" class="headerlink" title="Nginx配置文件示例"></a>Nginx配置文件示例</h1><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#user  nobody;</span><br>worker_processes  <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br><br>events &#123;<br>    worker_connections  <span class="hljs-number">1024</span>;<br>&#125;<br><br><br>http &#123;<br>    include       mime.types;<br>    default_type  application/octet-stream;<br><br>    <span class="hljs-comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br><br>    sendfile        on;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    keepalive_timeout  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br>      upstream idea &#123;<br>        least_conn;<br>        server <span class="hljs-number">127.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8080</span>;<br>      &#125;<br><br>      upstream king &#123;<br>        least_conn;<br>        server <span class="hljs-number">127.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8082</span>;<br>      &#125;<br><br>    server&#123;<br><span class="hljs-keyword">listen</span> <span class="hljs-number">80</span>;<br>rewrite  ^<span class="hljs-regexp">/(.*)$ https:/</span><span class="hljs-regexp">/www.kingblog.cc/</span>$1 permanent;<br>    &#125;<br><br>    server &#123;<br>        <span class="hljs-keyword">listen</span> <span class="hljs-number">443</span> ssl;<br>        server_name kingblog.cc; <span class="hljs-comment">#填写绑定证书的域名</span><br>        ssl_certificate <span class="hljs-number">1_</span>kingblog.cc_bundle.crt;<br>        ssl_certificate_key <span class="hljs-number">2_</span>kingblog.cc.key;<br>        ssl_session_timeout <span class="hljs-number">5</span>m;<br>        ssl_protocols TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>; <span class="hljs-comment">#按照这个协议配置</span><br>        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<span class="hljs-comment">#按照这个套件配置</span><br>        ssl_prefer_server_ciphers on;<br><br><br>location / &#123;<br>            proxy_pass http:<span class="hljs-regexp">//</span>king;<br>            proxy_redirect default;<br>            proxy_set_header Host $host:$proxy_port;<br>            proxy_set_header X-Real-IP $remote_addr;<br>            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        &#125;<br><br>  location /idea &#123;<br>            proxy_pass http:<span class="hljs-regexp">//id</span>ea;<br>            proxy_redirect default;<br>proxy_set_header Host $host:$proxy_port;<br>proxy_set_header X-Real-IP $remote_addr;<br>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        &#125;<br>        error_page  <span class="hljs-number">404</span>              /<span class="hljs-number">404</span>.html;<br><br>        error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>        location = /<span class="hljs-number">50</span>x.html &#123;<br>            root   html;<br>        &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx负载均衡策略</title>
    <link href="/articles/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5.html"/>
    <url>/articles/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-轮询（默认）"><a href="#1-轮询（默认）" class="headerlink" title="1.轮询（默认）"></a><strong>1.轮询（默认）</strong></h2><p>每个web请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除(自动剔除需要第三方软件支持)</p><span id="more"></span><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> nginxDemo &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8081</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8082</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-最少链接"><a href="#2-最少链接" class="headerlink" title="2.最少链接"></a><strong>2.最少链接</strong></h2><p>web请求会被转发到连接数最少的服务器上。</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">upstream nginxDemo &#123;<br>    <span class="hljs-attribute">least_conn;</span><br><span class="hljs-attribute">    server 127.0.0.1</span>:8081;<br>    <span class="hljs-attribute">server 127.0.0.1</span>:8082;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-weight-权重"><a href="#3-weight-权重" class="headerlink" title="3.weight 权重"></a><strong>3.weight 权重</strong></h2><p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况，weight默认是1,max_fails&#x3D;3:最大失败次数为 3，也就是最多进行 3 次尝试</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#服务器A和服务器B的访问比例为：2-1;比如有3个请求，前两个会访问A，三个访问B，其它规则和轮询一样。</span><br>upstream nginxDemo &#123;<br>   <span class="hljs-built_in"> server </span>127.0.0.1:8081 <span class="hljs-attribute">weight</span>=2 <span class="hljs-attribute">max_fails</span>=3 <span class="hljs-attribute">fail_timeout</span>=30s;; #服务器A<br>   <span class="hljs-built_in"> server </span>127.0.0.1:8082; #服务器B<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-ip-hash"><a href="#4-ip-hash" class="headerlink" title="4.ip_hash"></a><strong>4.ip_hash</strong></h2><p>每个请求按访问ip的hash值分配，这样同一客户端连续的Web请求都会被分发到同一服务器进行处理，可以解决session的问题。当后台服务器宕机时，会自动跳转到其它服务器</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">upstream nginxDemo &#123;<br>    <span class="hljs-attribute">ip_hash;</span><br><span class="hljs-attribute">    server 127.0.0.1</span>:8081 weight=2; <span class="hljs-comment">#服务器A</span><br>    <span class="hljs-attribute">server 127.0.0.1</span>:8082; <span class="hljs-comment">#服务器B</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-url-hash（第三方）"><a href="#5-url-hash（第三方）" class="headerlink" title="5.url_hash（第三方）"></a><strong>5.url_hash（第三方）</strong></h2><p>url_hash是nginx的第三方模块，nginx本身不支持，需要打补丁。<br>nginx按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存服务器、文件服务器、静态服务器时比较有效。缺点是当后端服务器宕机的时候，url_hash不会自动跳转的其他缓存服务器，而是返回给用户一个503错误</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> nginxDemo &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8081</span>; <span class="hljs-comment">#服务器A</span><br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8082</span>; <span class="hljs-comment">#服务器B</span><br>    <span class="hljs-attribute">hash</span> <span class="hljs-variable">$request_url</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-fair（第三方）"><a href="#6-fair（第三方）" class="headerlink" title="6.fair（第三方）"></a><strong>6.fair（第三方）</strong></h2><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs axapta">upstream nginxDemo &#123;<br>    <span class="hljs-keyword">server</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8081</span>; <span class="hljs-meta">#服务器A</span><br>    <span class="hljs-keyword">server</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8082</span>; <span class="hljs-meta">#服务器B</span><br>    fair;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven和gradle构建SpringBoot war</title>
    <link href="/articles/maven%E5%92%8Cgradle%E6%9E%84%E5%BB%BASpringBoot-war.html"/>
    <url>/articles/maven%E5%92%8Cgradle%E6%9E%84%E5%BB%BASpringBoot-war.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、应用插件"><a href="#一、应用插件" class="headerlink" title="一、应用插件"></a>一、应用插件</h3><h4 id="1-1-gradle"><a href="#1-1-gradle" class="headerlink" title="1.1 gradle"></a>1.1 gradle</h4><p>在gradle.build文件中新增<code>apply plugin: war</code>:</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">apply plugin: <span class="hljs-string">&#x27;java&#x27;</span><br>apply plugin: <span class="hljs-string">&#x27;war&#x27;</span><br>apply plugin: <span class="hljs-string">&#x27;org.springframework.boot&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="1-2-maven"><a href="#1-2-maven" class="headerlink" title="1.2 maven"></a>1.2 maven</h4><p>需把元素的值从jar改为war。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;packaging&gt;war&lt;/packaging&gt;<br></code></pre></td></tr></table></figure><h3 id="二、新增类"><a href="#二、新增类" class="headerlink" title="二、新增类"></a>二、新增类</h3><p>这样就能生成WAR文件了。但如果WAR文件里没有启用Spring MVC DispatcherServlet 的web.xml文件或者Servlet初始化类，这个WAR文件就一无是处。</p><p>此时就该Spring Boot出马了。它提供的SpringBootServletInitializer是一个支持 Spring Boot的Spring WebApplicationInitializer实现。除了配置Spring的Dispatcher- Servlet，SpringBootServletInitializer还会在Spring应用程序上下文里查找Filter、 Servlet或ServletContextInitializer类型的Bean，把它们绑定到Servlet容器里。</p><p>要使用SpringBootServletInitializer，只需创建一个子类，覆盖configure()方法 来指定Spring配置类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SSOApplication</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SpringBootServletInitializer</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SSOApplication.class, args);<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *重写configure</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> builder</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> SpringApplicationBuilder <span class="hljs-title function_">configure</span><span class="hljs-params">(SpringApplicationBuilder builder)</span> &#123;<br>        <span class="hljs-keyword">return</span> builder.sources(SSOApplication.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然应用程序里还有其他Spring配置类，但没有必要在这里把它们全部注册进来。 Application类上添加了@SpringBootApplication注解。这会隐性开启组件扫描，而组件扫 描则会发现并应用其他配置类。</p><h3 id="三、构建"><a href="#三、构建" class="headerlink" title="三、构建"></a>三、构建</h3><p>现在我们可以构建应用程序了。如果使用Gradle，你只需调用build任务即可:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">gradle build</span><br></code></pre></td></tr></table></figure><p>没问题的话，你可以在build&#x2F;libs里看到一个名为readinglist-0.0.1-SNAPSHOT.war的文件。</p><p>对于基于Maven的项目，可以使用package:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">mvn <span class="hljs-keyword">package</span><br></code></pre></td></tr></table></figure><p>成功构建之后，你可以在target目录里找到WAR文件。</p><p><strong>参考链接</strong></p><ul><li><a href="https://blog.csdn.net/KingBoyWorld/article/details/75244769">https://blog.csdn.net/KingBoyWorld/article/details/75244769</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>gradle</tag>
      
      <tag>java</tag>
      
      <tag>maven</tag>
      
      <tag>spring-boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA中的栈和堆</title>
    <link href="/articles/JAVA%E4%B8%AD%E7%9A%84%E6%A0%88%E5%92%8C%E5%A0%86.html"/>
    <url>/articles/JAVA%E4%B8%AD%E7%9A%84%E6%A0%88%E5%92%8C%E5%A0%86.html</url>
    
    <content type="html"><![CDATA[<p>JAVA在程序运行时，在内存中划分5片空间进行数据的存储。分别是：1：寄存器。2：本地方法区。3：方法区。4：栈。5：堆。</p><p>基本，栈stack和堆heap这两个概念很重要，不了解清楚，后面就不用学了。</p><p>以下是这几天栈和堆的学习记录和心得。得些记录下来。以后有学到新的，会慢慢补充。</p><span id="more"></span>  <p><font color="red"><strong>一、先说一下最基本的要点</strong></font></p><p>基本数据类型、局部变量都是存放在栈内存中的，用完就消失。<br>new创建的实例化对象及数组，是存放在堆内存中的，用完之后靠垃圾回收机制不定期自动消除。</p><p><font color="red"><strong>二、先明确以上两点，以下示例就比较好理解了</strong></font></p><p><strong>示例1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">main()<br>　　<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>;<br>show ()<br>　　<span class="hljs-type">int</span> x=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>主函数main()中定义变量int x&#x3D;1，show()函数中定义变量int x&#x3D;1。最后show()函数执行完毕。</p><p><font color="red">以上程序执行步骤：</font></p><p>第1步——main()函数是程序入口，JVM先执行，在栈内存中开辟一个空间，存放int类型变量x，同时附值1。<br>第2步——JVM执行show()函数，在栈内存中又开辟一个新的空间，存放int类型变量x，同时附值2。<br>　　　　　此时main空间与show空间并存，同时运行，互不影响。<br>第3步——show()执行完毕，变量x立即释放，空间消失。但是main()函数空间仍存在，main中的变量x仍然存在，不受影响。</p><p><font color="red">示意图如下：</font></p><img src="/articles/JAVA%E4%B8%AD%E7%9A%84%E6%A0%88%E5%92%8C%E5%A0%86/001.jpeg" class="" title="pass1"><p><strong>示例2</strong></p><p>main()<br>　　int[] x&#x3D;new int[3];<br>　　x[0]&#x3D;20</p><p>主函数main()中定义数组x，元素类型int，元素个数3。</p><p><font color="red">以上程序执行步骤</font><br>第1步——执行int[] x&#x3D;new int[3];<br>　　隐藏以下几分支<br>　　JVM执行main()函数，在栈内存中开辟一个空间，存放x变量（x变量是局部变量）。<br>　　同时，在堆内存中也开辟一个空间，存放new int[3]数组，堆内存会自动内存首地址值，如0x0045。<br>　　数组在栈内存中的地址值，会附给x，这样x也有地址值。所以，x就指向（引用）了这个数组。此时，所有元素均未附值，但都有默认初始化值0。</p><p>第2步——执行x[0]&#x3D;20<br>　　即在堆内存中将20附给[0]这个数组元素。这样，数组的三个元素值分别为20,0,0</p><p><font color="red">示图如下：</font></p><img src="/articles/JAVA%E4%B8%AD%E7%9A%84%E6%A0%88%E5%92%8C%E5%A0%86/002.jpg" class="" title="pass1"><p><strong>示例3</strong><br>main()<br>　　int[] x&#x3D;new int[3];<br>　　x[0]&#x3D;20<br>　　x&#x3D;null;</p><p><font color="red">以上步骤执行步骤</font><br>第1、2步——与示例2完全一样，略。</p><p>第3步——执行x&#x3D;null;<br>　　null表示空值，即x的引用数组内存地址0x0045被删除了，则不再指向栈内存中的数组。此时，堆中的数组不再被x使用了，即被视为垃圾，JVM会启动垃圾回收机制，不定时自动删除。</p><p><font color="red">示图如下</font></p><img src="/articles/JAVA%E4%B8%AD%E7%9A%84%E6%A0%88%E5%92%8C%E5%A0%86/003.jpg" class="" title="pass1"><p><strong>示例4</strong><br>main()<br>　　int[] x&#x3D;new int[3];<br>　　int[] y&#x3D;x;<br>　　y[1]&#x3D;100<br>　　x&#x3D;null;</p><p><font color="red">以上步骤执行步骤</font></p><p>第1步——与示例2第1步一致，略。<br>第2步——执行int[] y&#x3D;x，<br>　　在栈内存定义了新的数组变量内存y，同时将x的值0x0045附给了y。所以，y也指向了堆内存中的同一个数组。<br>第3步——执行y[1]&#x3D;100<br>　　即在堆内存中将20附给[0]这个数组元素。这样，数组的三个元素值分别为0,100,0<br>第4步——执行x&#x3D;null<br>　　则变量x不再指向栈内存中的数组了。但是，变量y仍然指向，所以数组不消失。</p><p><font color="red">示图如下</font></p><img src="/articles/JAVA%E4%B8%AD%E7%9A%84%E6%A0%88%E5%92%8C%E5%A0%86/004.jpg" class="" title="pass1"><p>示例5</p><p>Car c&#x3D;new Car;<br>c.color&#x3D;”blue”;<br>Car c1&#x3D;new Car;<br>c1.num&#x3D;5;</p><p> 虽然是个对象都引用new Car，但是是两个不同的对象。每一次new，都产生不同的实体</p><img src="/articles/JAVA%E4%B8%AD%E7%9A%84%E6%A0%88%E5%92%8C%E5%A0%86/005.jpg" class="" title="pass1"><p>示例6</p><p>Car c&#x3D;new Car;<br>c.num&#x3D;5;<br>Car c1&#x3D;c;<br>c1.color&#x3D;”green”;<br>c.run();</p><p>Car c1&#x3D;c，这句话相当于将对象复制一份出来，两个对象的内存地址值一样。所以指向同一个实体，对c1的属性修改，相当于c的属性也改了</p><img src="/articles/JAVA%E4%B8%AD%E7%9A%84%E6%A0%88%E5%92%8C%E5%A0%86/006.jpg" class="" title="pass1"><p><font color="red">三、栈和堆的特点</font></p><p>栈：</p><p>函数中定义的基本类型变量，对象的引用变量都在函数的栈内存中分配。<br>栈内存特点，数数据一执行完毕，变量会立即释放，节约内存空间。<br>栈内存中的数据，没有默认初始化值，需要手动设置。</p><p>堆：</p><p>堆内存用来存放new创建的对象和数组。<br>堆内存中所有的实体都有内存地址值。<br>堆内存中的实体是用来封装数据的，这些数据都有默认初始化值。<br>堆内存中的实体不再被指向时，JVM启动垃圾回收机制，自动清除，这也是JAVA优于C++的表现之一（C++中需要程序员手动清除）。</p><p>注：</p><p>什么是局部变量：定义在函数中的变量、定义在函数中的参数上的变量、定义在for循环内部的变量</p><p>参考文章</p><ul><li><a href="https://www.cnblogs.com/ibelieve618/p/6380328.html">https://www.cnblogs.com/ibelieve618/p/6380328.html</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>概念分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux 局域网内文件传送</title>
    <link href="/articles/linux-%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E6%96%87%E4%BB%B6%E4%BC%A0%E9%80%81.html"/>
    <url>/articles/linux-%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E6%96%87%E4%BB%B6%E4%BC%A0%E9%80%81.html</url>
    
    <content type="html"><![CDATA[<p>Linux scp命令用于Linux之间复制文件和目录，具体如何使用这里好好介绍一下，从本地复制到远程、从远程复制到本地是两种使用方式。这里有具体举例：</p><span id="more"></span><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p><strong>Linux scp 命令</strong></p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>scp 可以在 2个 linux 主机间复制文件；</p><p>命令基本格式：</p><p>scp [可选参数] file_source file_target</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p><strong>从 本地 复制到 远程</strong></p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>* 复制文件：</p><p>* 命令格式：</p><p>scp local_file remote_username@remote_ip:remote_folder</p><p>或者</p><p>scp local_file remote_username@remote_ip:remote_file</p><p>或者</p><p>scp local_file remote_ip:remote_folder</p><p>或者</p><p>scp local_file remote_ip:remote_file</p><p>第1,2个指定了用户名，命令执行后需要再输入密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名；</p><p>第3,4个没有指定用户名，命令执行后需要输入用户名和密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名；</p><p>* 例子：</p><p>scp &#x2F;home&#x2F;space&#x2F;music&#x2F;1.mp3 <a href="mailto:&#114;&#x6f;&#x6f;&#x74;&#64;&#119;&#x77;&#119;&#46;&#99;&#117;&#109;&#x74;&#x2e;&#x65;&#x64;&#x75;&#x2e;&#x63;&#x6e;">&#114;&#x6f;&#x6f;&#x74;&#64;&#119;&#x77;&#119;&#46;&#99;&#117;&#109;&#x74;&#x2e;&#x65;&#x64;&#x75;&#x2e;&#x63;&#x6e;</a>:&#x2F;home&#x2F;root&#x2F;others&#x2F;music</p><p>scp &#x2F;home&#x2F;space&#x2F;music&#x2F;1.mp3 <a href="mailto:&#114;&#111;&#111;&#x74;&#x40;&#x77;&#119;&#119;&#46;&#99;&#x75;&#x6d;&#x74;&#x2e;&#x65;&#x64;&#117;&#46;&#99;&#x6e;">&#114;&#111;&#111;&#x74;&#x40;&#x77;&#119;&#119;&#46;&#99;&#x75;&#x6d;&#x74;&#x2e;&#x65;&#x64;&#117;&#46;&#99;&#x6e;</a>:&#x2F;home&#x2F;root&#x2F;others&#x2F;music&#x2F;001.mp3</p><p>scp &#x2F;home&#x2F;space&#x2F;music&#x2F;1.mp3 <a href="http://www.cumt.edu.cn/home/root/others/music">www.cumt.edu.cn:/home/root/others/music</a></p><p>scp &#x2F;home&#x2F;space&#x2F;music&#x2F;1.mp3 <a href="http://www.cumt.edu.cn/home/root/others/music/001.mp3">www.cumt.edu.cn:/home/root/others/music/001.mp3</a></p><p>* 复制目录：</p><p>* 命令格式：</p><p>scp -r local_folder remote_username@remote_ip:remote_folder</p><p>或者</p><p>scp -r local_folder remote_ip:remote_folder</p><p>第1个指定了用户名，命令执行后需要再输入密码；</p><p>第2个没有指定用户名，命令执行后需要输入用户名和密码；</p><p>* 例子：</p><p>scp -r &#x2F;home&#x2F;space&#x2F;music&#x2F; <a href="mailto:&#x72;&#111;&#111;&#x74;&#64;&#119;&#x77;&#119;&#x2e;&#x63;&#x75;&#x6d;&#x74;&#x2e;&#x65;&#100;&#x75;&#x2e;&#99;&#110;">&#x72;&#111;&#111;&#x74;&#64;&#119;&#x77;&#119;&#x2e;&#x63;&#x75;&#x6d;&#x74;&#x2e;&#x65;&#100;&#x75;&#x2e;&#99;&#110;</a>:&#x2F;home&#x2F;root&#x2F;others&#x2F;</p><p>scp -r &#x2F;home&#x2F;space&#x2F;music&#x2F; <a href="http://www.cumt.edu.cn/home/root/others/">www.cumt.edu.cn:/home/root/others/</a></p><p>上面 命令 将 本地 music 目录 复制 到 远程 others 目录下，即复制后有 远程 有 ..&#x2F;others&#x2F;music&#x2F; 目录</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p><strong>从 远程 复制到 本地</strong></p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>从 远程 复制到 本地，只要将 从 本地 复制到 远程 的命令 的 后2个参数 调换顺序 即可；</p><p>例如：</p><p>scp <a href="mailto:&#x72;&#111;&#x6f;&#x74;&#x40;&#x77;&#x77;&#119;&#x2e;&#x63;&#x75;&#109;&#116;&#46;&#x65;&#x64;&#117;&#46;&#99;&#x6e;">&#x72;&#111;&#x6f;&#x74;&#x40;&#x77;&#x77;&#119;&#x2e;&#x63;&#x75;&#109;&#116;&#46;&#x65;&#x64;&#117;&#46;&#99;&#x6e;</a>:&#x2F;home&#x2F;root&#x2F;others&#x2F;music &#x2F;home&#x2F;space&#x2F;music&#x2F;1.mp3</p><p>scp -r <a href="http://www.cumt.edu.cn/home/root/others/">www.cumt.edu.cn:/home/root/others/</a> &#x2F;home&#x2F;space&#x2F;music&#x2F;</p><p>最简单的应用如下 :</p><p>scp 本地用户名 @IP 地址 : 文件名 1 远程用户名 @IP 地址 : 文件名 2</p><p>[ 本地用户名 @IP 地址 :] 可以不输入 , 可能需要输入远程用户名所对应的密码 .</p><p>可能有用的几个参数 :</p><p>-v 和大多数 linux 命令中的 -v 意思一样 , 用来显示进度 . 可以用来查看连接 , 认证 , 或是配置错误 .</p><p>-C 使能压缩选项 .</p><p>-P 选择端口 . 注意 -p 已经被 rcp 使用 .</p><p>-4 强行使用 IPV4 地址 .</p><p>-6 强行使用 IPV6 地址 .</p><p>Linux scp命令的使用方法应该可以满足大家对Linux文件和目录的复制使用了。</p><p>参考文章</p><ul><li><a href="http://www.blogjava.net/wangjiaddr/archive/2016/09/18/431807.html">http://www.blogjava.net/wangjiaddr/archive/2016/09/18/431807.html</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java序列化与反序列化.md</title>
    <link href="/articles/Java%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-md.html"/>
    <url>/articles/Java%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-md.html</url>
    
    <content type="html"><![CDATA[<h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><h3 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><h4 id="1、什么是序列化和反序列化"><a href="#1、什么是序列化和反序列化" class="headerlink" title="1、什么是序列化和反序列化"></a>1、什么是序列化和反序列化</h4><ul><li>（1）Java序列化是指把Java对象转换为字节序列的过程，而Java反序列化是指把字节序列恢复为Java对象的过程</li></ul><span id="more"></span>  <ul><li><p>（2）<strong>序列化</strong>：对象序列化的最主要的用处就是在传递和保存对象的时候，保证对象的完整性和可传递性。序列化是把对象转换成有序字节流，以便在网络上传输或者保存在本地文件中。序列化后的字节流保存了Java对象的状态以及相关的描述信息。序列化机制的核心作用就是对象状态的保存与重建</p></li><li><p>（3）<strong>反序列化</strong>：客户端从文件中或网络上获得序列化后的对象字节流后，根据字节流中所保存的对象状态及描述信息，通过反序列化重建对象。</p></li><li><p>（4）本质上讲，序列化就是把实体对象状态按照一定的格式写入到有序字节流，反序列化就是从有序字节流重建对象，恢复对象状态。</p><p>2、为什么需要序列化与反序列化</p></li></ul><p>我们知道，当两个进程进行远程通信时，可以相互发送各种类型的数据，包括文本、图片、音频、视频等， 而这些数据都会以二进制序列的形式在网络上传送。</p><p>那么当两个Java进程进行通信时，能否实现进程间的对象传送呢？答案是可以的！如何做到呢？这就需要Java序列化与反序列化了！</p><p>换句话说，一方面，发送方需要把这个Java对象转换为字节序列，然后在网络上传送；另一方面，接收方需要从字节序列中恢复出Java对象。</p><p>当我们明晰了为什么需要Java序列化和反序列化后，我们很自然地会想Java序列化的好处。其好处一是实现了数据的持久化，通过序列化可以把数据永久地保存到硬盘上（通常存放在文件里），二是，利用序列化实现远程通信，即在网络上传送对象的字节序列。</p><p>总的来说可以归结为以下几点：</p><p>（1）永久性保存对象，保存对象的字节序列到本地文件或者数据库中；</p><p>（2）通过序列化以字节流的形式使对象在网络中进行传递和接收；</p><p>（3）通过序列化在进程间传递对象；</p><h4 id="3、序列化算法一般会按步骤做如下事情："><a href="#3、序列化算法一般会按步骤做如下事情：" class="headerlink" title="3、序列化算法一般会按步骤做如下事情："></a>3、序列化算法一般会按步骤做如下事情：</h4><p>（1）将对象实例相关的类元数据输出。</p><p>（2）递归地输出类的超类描述直到不再有超类。</p><p>（3）类元数据完了以后，开始从最顶层的超类开始输出对象实例的实际数据值。</p><p>（4）从上至下递归输出实例的数据</p><h3 id="二、Java如何实现序列化和反序列化"><a href="#二、Java如何实现序列化和反序列化" class="headerlink" title="二、Java如何实现序列化和反序列化"></a>二、Java如何实现序列化和反序列化</h3><h4 id="1、JDK类库中序列化和反序列化API"><a href="#1、JDK类库中序列化和反序列化API" class="headerlink" title="1、JDK类库中序列化和反序列化API"></a>1、JDK类库中序列化和反序列化API</h4><p>（1）java.io.ObjectOutputStream：表示对象输出流；</p><p>它的writeObject(Object obj)方法可以对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中；</p><p>（2）java.io.ObjectInputStream：表示对象输入流；</p><p>它的readObject()方法源输入流中读取字节序列，再把它们反序列化成为一个对象，并将其返回；</p><h4 id="2、实现序列化的要求"><a href="#2、实现序列化的要求" class="headerlink" title="2、实现序列化的要求"></a>2、实现序列化的要求</h4><p>只有实现了Serializable或Externalizable接口的类的对象才能被序列化，否则抛出异常！<br /><a href="https://blog.csdn.net/mengtuoling111/article/details/50156307">https://blog.csdn.net/mengtuoling111/article/details/50156307</a></p><h4 id="3、实现Java对象序列化与反序列化的方法"><a href="#3、实现Java对象序列化与反序列化的方法" class="headerlink" title="3、实现Java对象序列化与反序列化的方法"></a>3、实现Java对象序列化与反序列化的方法</h4><p>假定一个User类，它的对象需要序列化，可以有如下三种方法：</p><p>（1）若User类仅仅实现了Serializable接口，则可以按照以下方式进行序列化和反序列化</p><p>ObjectOutputStream采用默认的序列化方式，对User对象的非transient的实例变量进行序列化。</p><p>ObjcetInputStream采用默认的反序列化方式，对对User对象的非transient的实例变量进行反序列化。</p><p>（2）若User类仅仅实现了Serializable接口，并且还定义了readObject(ObjectInputStream in)和writeObject(ObjectOutputSteam out)，则采用以下方式进行序列化与反序列化。</p><p>ObjectOutputStream调用User对象的writeObject(ObjectOutputStream out)的方法进行序列化。</p><p>ObjectInputStream会调用User对象的readObject(ObjectInputStream in)的方法进行反序列化。</p><p>（3）若User类实现了Externalnalizable接口，且User类必须实现readExternal(ObjectInput in)和writeExternal(ObjectOutput out)方法，则按照以下方式进行序列化与反序列化。</p><p>ObjectOutputStream调用User对象的writeExternal(ObjectOutput out))的方法进行序列化。</p><p>ObjectInputStream会调用User对象的readExternal(ObjectInput in)的方法进行反序列化。</p><h4 id="4、JDK类库中序列化的步骤"><a href="#4、JDK类库中序列化的步骤" class="headerlink" title="4、JDK类库中序列化的步骤"></a>4、JDK类库中序列化的步骤</h4><p>步骤一：创建一个对象输出流，它可以包装一个其它类型的目标输出流，如文件输出流：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">ObjectOutputStream oos = <span class="hljs-keyword">new</span> <span class="hljs-type">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\object.out&quot;</span>));<br></code></pre></td></tr></table></figure><p>步骤二：通过对象输出流的writeObject()方法写对象：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">oos.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-type">User</span>(<span class="hljs-string">&quot;king&quot;</span>));<br></code></pre></td></tr></table></figure><h4 id="5、JDK类库中反序列化的步骤"><a href="#5、JDK类库中反序列化的步骤" class="headerlink" title="5、JDK类库中反序列化的步骤"></a>5、JDK类库中反序列化的步骤</h4><p>步骤一：创建一个对象输入流，它可以包装一个其它类型输入流，如文件输入流：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">ObjectInputStream ois= <span class="hljs-keyword">new</span> <span class="hljs-type">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">FileInputStream</span>(<span class="hljs-string">&quot;object.out&quot;</span>));<br></code></pre></td></tr></table></figure><p>步骤二：通过对象输出流的readObject()方法读取对象：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">User</span> <span class="hljs-title">user</span> = (User) ois.readObject();<br></code></pre></td></tr></table></figure><p>说明：。</p><p><a name="720be5b9"></a></p><h4 id="6、序列化和反序列化的示例"><a href="#6、序列化和反序列化的示例" class="headerlink" title="6、序列化和反序列化的示例"></a>6、序列化和反序列化的示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<span class="hljs-comment">//以下代码实现序列化</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;my.out&quot;</span>));<span class="hljs-comment">//输出流保存的文件名为 my.out ；ObjectOutputStream能把Object输出成Byte流</span><br>            <span class="hljs-type">User</span> <span class="hljs-variable">myTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>            myTest.setName(<span class="hljs-string">&quot;king&quot;</span>);<br>            oos.writeObject(myTest);<br>            oos.flush();  <span class="hljs-comment">//缓冲流</span><br>            oos.close(); <span class="hljs-comment">//关闭流</span><br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        fan();<span class="hljs-comment">//调用下面的  反序列化  代码</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fan</span><span class="hljs-params">()</span><span class="hljs-comment">//反序列的过程</span><br>    &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">oin</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//局部变量必须要初始化</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            oin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;my.out&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e1) &#123;<br>            e1.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e1) &#123;<br>            e1.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">mts</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            mts = (User) oin.readObject();<span class="hljs-comment">//由Object对象向下转型为User对象</span><br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;name=&quot;</span> + mts.getName());<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="三、相关注意事项"><a href="#三、相关注意事项" class="headerlink" title="三、相关注意事项"></a>三、相关注意事项</h3><h4 id="1、序列化时，只对对象的状态进行保存，而不管对象的方法；"><a href="#1、序列化时，只对对象的状态进行保存，而不管对象的方法；" class="headerlink" title="1、序列化时，只对对象的状态进行保存，而不管对象的方法；"></a>1、序列化时，只对对象的状态进行保存，而不管对象的方法；</h4><h4 id="2、当一个父类实现序列化，子类自动实现序列化，不需要显式实现Serializable接口；"><a href="#2、当一个父类实现序列化，子类自动实现序列化，不需要显式实现Serializable接口；" class="headerlink" title="2、当一个父类实现序列化，子类自动实现序列化，不需要显式实现Serializable接口；"></a>2、当一个父类实现序列化，子类自动实现序列化，不需要显式实现Serializable接口；</h4><h4 id="3、当一个对象的实例变量引用其他对象，序列化该对象时也把引用对象进行序列化；"><a href="#3、当一个对象的实例变量引用其他对象，序列化该对象时也把引用对象进行序列化；" class="headerlink" title="3、当一个对象的实例变量引用其他对象，序列化该对象时也把引用对象进行序列化；"></a>3、当一个对象的实例变量引用其他对象，序列化该对象时也把引用对象进行序列化；</h4><h4 id="4、并非所有的对象都可以序列化，至于为什么不可以，有很多原因了，比如："><a href="#4、并非所有的对象都可以序列化，至于为什么不可以，有很多原因了，比如：" class="headerlink" title="4、并非所有的对象都可以序列化，至于为什么不可以，有很多原因了，比如："></a>4、并非所有的对象都可以序列化，至于为什么不可以，有很多原因了，比如：</h4><ul><li>安全方面的原因，比如一个对象拥有private，public等field，对于一个要传输的对象，比如写到文件，或者进行RMI传输等等，在序列化进行传输的过程中，这个对象的private等域是不受保护的；</li><li>资源分配方面的原因，比如socket，thread类，如果可以序列化，进行传输或者保存，也无法对他们进行重新的资源分配，而且，也是没有必要这样实现；</li></ul><h4 id="5、声明为static和transient类型的成员数据不能被序列化。因为static代表类的状态，transient代表对象的临时数据。"><a href="#5、声明为static和transient类型的成员数据不能被序列化。因为static代表类的状态，transient代表对象的临时数据。" class="headerlink" title="5、声明为static和transient类型的成员数据不能被序列化。因为static代表类的状态，transient代表对象的临时数据。"></a>5、声明为static和transient类型的成员数据不能被序列化。因为static代表类的状态，transient代表对象的临时数据。</h4><h4 id="6、序列化运行时使用一个称为-serialVersionUID-的版本号与每个可序列化类相关联，该序列号在反序列化过程中用于验证序列化对象的发送者和接收者是否为该对象加载了与序列化兼容的类。为它赋予明确的值。显式地定义serialVersionUID有两种用途："><a href="#6、序列化运行时使用一个称为-serialVersionUID-的版本号与每个可序列化类相关联，该序列号在反序列化过程中用于验证序列化对象的发送者和接收者是否为该对象加载了与序列化兼容的类。为它赋予明确的值。显式地定义serialVersionUID有两种用途：" class="headerlink" title="6、序列化运行时使用一个称为 serialVersionUID 的版本号与每个可序列化类相关联，该序列号在反序列化过程中用于验证序列化对象的发送者和接收者是否为该对象加载了与序列化兼容的类。为它赋予明确的值。显式地定义serialVersionUID有两种用途："></a>6、序列化运行时使用一个称为 serialVersionUID 的版本号与每个可序列化类相关联，该序列号在反序列化过程中用于验证序列化对象的发送者和接收者是否为该对象加载了与序列化兼容的类。为它赋予明确的值。显式地定义serialVersionUID有两种用途：</h4><ul><li>在某些场合，希望类的不同版本对序列化兼容，因此需要确保类的不同版本具有相同的serialVersionUID；</li><li>在某些场合，不希望类的不同版本对序列化兼容，因此需要确保类的不同版本具有不同的serialVersionUID。</li></ul><h4 id="7、Java有很多基础类已经实现了serializable接口，比如String-Vector等。但是也有一些没有实现serializable接口的；"><a href="#7、Java有很多基础类已经实现了serializable接口，比如String-Vector等。但是也有一些没有实现serializable接口的；" class="headerlink" title="7、Java有很多基础类已经实现了serializable接口，比如String,Vector等。但是也有一些没有实现serializable接口的；"></a>7、Java有很多基础类已经实现了serializable接口，比如String,Vector等。但是也有一些没有实现serializable接口的；</h4><h4 id="8、如果一个对象的成员变量是一个对象，那么这个对象的数据成员也会被保存！这是能用序列化解决深拷贝的重要原因；"><a href="#8、如果一个对象的成员变量是一个对象，那么这个对象的数据成员也会被保存！这是能用序列化解决深拷贝的重要原因；" class="headerlink" title="8、如果一个对象的成员变量是一个对象，那么这个对象的数据成员也会被保存！这是能用序列化解决深拷贝的重要原因；"></a>8、如果一个对象的成员变量是一个对象，那么这个对象的数据成员也会被保存！这是能用序列化解决深拷贝的重要原因；</h4><h4 id="9-序列化前和序列化后的对象的关系"><a href="#9-序列化前和序列化后的对象的关系" class="headerlink" title="9.序列化前和序列化后的对象的关系"></a>9.序列化前和序列化后的对象的关系</h4><p>是 “&#x3D;&#x3D;”还是equals？ or  是浅复制还是深复制？</p><p>答案：深复制，反序列化还原后的对象地址与原来的的地址不同</p><p>序列化前后对象的地址不同了，但是内容是一样的，而且对象中包含的引用也相同。换句话说，通过序列化操作,我们可以实现对任何可Serializable对象的”深度复制（deep copy）”——这意味着我们复制的是整个对象网，而不仅仅是基本对象及其引用。对于同一流的对象，他们的地址是相同，说明他们是同一个对象，但是与其他流的对象地址却不相同。也就说，只要将对象序列化到单一流中，就可以恢复出与我们写出时一样的对象网，而且只要在同一流中，对象都是同一个。</p><h4 id="Transient-关键字"><a href="#Transient-关键字" class="headerlink" title="Transient 关键字"></a>Transient 关键字</h4><p>Transient 关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件中，在被反序列化后，transient 变量的值被设为初始值，如 int 型的是 0，对象型的是 null。关于Transient 关键字的拓展知识欢迎阅读深入分析Java的序列化与反序列化</p><h4 id="序列化ID"><a href="#序列化ID" class="headerlink" title="序列化ID"></a>序列化ID</h4><p>虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，一个非常重要的一点是两个类的序列化 ID 是否一致（就是 private static final long serialVersionUID)</p><p>序列化 ID 在 Eclipse 下提供了两种生成策略，一个是固定的 1L，一个是随机生成一个不重复的 long 类型数据（实际上是使用 JDK 工具生成），在这里有一个建议，如果没有特殊需求，就是用默认的 1L 就可以，这样可以确保代码一致时反序列化成功。那么随机生成的序列化 ID 有什么作用呢，有些时候，通过改变序列化 ID 可以用来限制某些用户的使用。</p><p>反序列化代码</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl">O<span class="hljs-function"><span class="hljs-title">bjectInputStream</span>.readObject -&gt;</span> <span class="hljs-function"><span class="hljs-title">readObject0</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">readOrdinaryObject</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">readClassDesc</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">readNonProxyDesc</span> -&gt;</span> ObjectStreamClass.initNonProxy<br></code></pre></td></tr></table></figure><h4 id="一般写代码时如果实现了Serializable，强烈建议一定要写上serialVersionUID"><a href="#一般写代码时如果实现了Serializable，强烈建议一定要写上serialVersionUID" class="headerlink" title="一般写代码时如果实现了Serializable，强烈建议一定要写上serialVersionUID"></a>一般写代码时如果实现了Serializable，强烈建议一定要写上serialVersionUID</h4><p>当不写serialVersionUI的时候,jdk会根据类成员与方法生成 一个serialVersionUID，当你增加字段之后，以前的数据对象就不能正确的序列化回来了</p><hr><p>参考文章</p><ul><li><a href="https://blog.csdn.net/xlgen157387/article/details/79840134">https://blog.csdn.net/xlgen157387/article/details/79840134</a></li><li><a href="https://blog.csdn.net/sheepmu/article/details/27579895">https://blog.csdn.net/sheepmu/article/details/27579895</a></li><li><a href="http://www.importnew.com/17964.html">http://www.importnew.com/17964.html</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>概念分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么阿里巴巴禁止开发人员使用isSuccess作为变量名</title>
    <link href="/articles/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%A6%81%E6%AD%A2%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E4%BD%BF%E7%94%A8isSuccess%E4%BD%9C%E4%B8%BA%E5%8F%98%E9%87%8F%E5%90%8D.html"/>
    <url>/articles/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%A6%81%E6%AD%A2%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E4%BD%BF%E7%94%A8isSuccess%E4%BD%9C%E4%B8%BA%E5%8F%98%E9%87%8F%E5%90%8D.html</url>
    
    <content type="html"><![CDATA[<p>在日常开发中，我们经常要在类中定义布尔类型的变量，比如在提供RPC接口的时候，我们一般会定义一个字段表示本次请求是否成功的。</p><p>关于这个”本次请求是否成功”的字段的定义，其实是有很多种讲究和坑的，本文就来围绕这个简单分析一下。到底该如何定一个布尔类型的成员变量</p><p>一般情况下，我们可以有以下四种方式来定义一个布尔类型的成员变量：</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> success<br><span class="hljs-type">boolean</span> isSuccess<br>Boolean success<br>Boolean isSuccess<br></code></pre></td></tr></table></figure><p>通过观察我们可以发现</p><ul><li><p>前两种和后两种的主要区别是变量的类型不同，前者使用的是boolean，后者使用的是Boolean。</p></li><li><p>另外，第一种和第三种在定义变量的时候，变量命名是success，而另外两种使用isSuccess来命名的。</p></li></ul><h3 id="首先，我们来分析一下，到底应该是用success来命名，还是使用isSuccess更好一点。"><a href="#首先，我们来分析一下，到底应该是用success来命名，还是使用isSuccess更好一点。" class="headerlink" title="首先，我们来分析一下，到底应该是用success来命名，还是使用isSuccess更好一点。"></a>首先，我们来分析一下，到底应该是用success来命名，还是使用isSuccess更好一点。</h3><p>到底应该是用success还是isSuccess来给变量命名呢？从语义上面来讲，两种命名方式都可以讲的通，并且也都没有歧义。那么还有什么原则可以参考来让我们做选择呢。</p><p>在阿里巴巴Java开发手册中关于这一点，有过一个『强制性』规定：</p> <img src="/articles/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%A6%81%E6%AD%A2%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E4%BD%BF%E7%94%A8isSuccess%E4%BD%9C%E4%B8%BA%E5%8F%98%E9%87%8F%E5%90%8D/001.png" class="" title="image.png"><p>那么，为什么会有这样的规定呢？我们看一下POJO中布尔类型变量不同的命名有什么区别吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yungu.success;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model1</span> &#123;<br>    <span class="hljs-keyword">private</span> Boolean isSuccess;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSuccess</span><span class="hljs-params">(Boolean success)</span> &#123;<br>        isSuccess = success;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getSuccess</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> isSuccess;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model2</span> &#123;<br>    <span class="hljs-keyword">private</span> Boolean success;<br><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getSuccess</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> success;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSuccess</span><span class="hljs-params">(Boolean success)</span> &#123;<br>        <span class="hljs-built_in">this</span>.success = success;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model3</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isSuccess;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSuccess</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> isSuccess;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSuccess</span><span class="hljs-params">(<span class="hljs-type">boolean</span> success)</span> &#123;<br>        isSuccess = success;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model4</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> success;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSuccess</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> success;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSuccess</span><span class="hljs-params">(<span class="hljs-type">boolean</span> success)</span> &#123;<br>        <span class="hljs-built_in">this</span>.success = success;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以上代码的setter&#x2F;getter是使用Intellij IDEA自动生成的，仔细观察以上代码，你会发现以下规律：</p><ul><li>基本类型自动生成的getter和setter方法，名称都是<code>isXXX()</code> 和<code>setXXX()</code> 形式的。</li><li>包装类型自动生成的getter和setter方法，名称都是<code>getXXX()</code> 和<code>setXXX()</code> 形式的。</li></ul><hr><p>我们可以发现，虽然Model3和Model4中的成员变量的名称不同，一个是success，另外一个是isSuccess，但是他们自动生成的getter和setter方法名称都是<code>isSuccess</code>和 <code>setSuccess</code>。</p><p>Java Bean中关于setter&#x2F;getter的规范</p><p>关于Java Bean中的getter&#x2F;setter方法的定义其实是有明确的规定的，根据JavaBeans(TM) Specificatio nttps:&#x2F;&#x2F;download.oracle.com&#x2F;otndocs&#x2F;jcp&#x2F;7224-javabeans-1.01-fr-spec-oth-JSpec 规定，</p><p>如果是普通的参数propertyName，要以以下方式定义其setter&#x2F;getter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;PropertyType&gt; get&lt;PropertyName&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> set&lt;PropertyName&gt;(&lt;PropertyType&gt; a);<br></code></pre></td></tr></table></figure><p>但是，布尔类型的变量propertyName则是单独定义的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> is&lt;PropertyName&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> set&lt;PropertyName&gt;(<span class="hljs-type">boolean</span> m);<br></code></pre></td></tr></table></figure> <img src="/articles/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%A6%81%E6%AD%A2%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E4%BD%BF%E7%94%A8isSuccess%E4%BD%9C%E4%B8%BA%E5%8F%98%E9%87%8F%E5%90%8D/002.png" class="" title="image.png"><p>通过对照这份JavaBeans规范，我们发现，在Model4中，变量名为isSuccess，如果严格按照规范定义的话，他的getter方法应该叫isIsSuccess。但是很多IDE都会默认生成为isSuccess。</p><p>那这样做会带来什么问题呢。</p><p>在一般情况下，其实是没有影响的。但是有一种特殊情况就会有问题，那就是发生序列化的时候。</p><hr><p>序列化带来的影响</p><p>关于序列化和反序列化请参考Java对象的序列化与反序列化。我们这里拿比较常用的JSON序列化来举例，看看常用的fastJson、jackson和Gson之间有何区别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><span class="hljs-keyword">import</span> org.codehaus.jackson.map.ObjectMapper;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BooleanMainTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;       <span class="hljs-comment">//定一个Model3类型</span><br><br>        <span class="hljs-type">Model6</span> <span class="hljs-variable">model3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Model6</span>();<br>        model3.setSuccess(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 使用fastjson(1.2.16)序列化model3成字符串并输出</span><br>        System.out.println(<span class="hljs-string">&quot;Serializable Result With fastjson :&quot;</span> + JSON.toJSONString(model3));<br>        <span class="hljs-comment">//使用Gson(2.8.5)序列化model3成字符串并输出</span><br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        System.out.println(<span class="hljs-string">&quot;Serializable Result With Gson :&quot;</span> + gson.toJson(model3));<br>        <span class="hljs-comment">//使用jackson(2.9.7)序列化model3成字符串并输出</span><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        System.out.println(<span class="hljs-string">&quot;Serializable Result With jackson :&quot;</span> + om.writeValueAsString(model3));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model6</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1836697963736227954L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isSuccess;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSuccess</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> isSuccess;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSuccess</span><span class="hljs-params">(<span class="hljs-type">boolean</span> success)</span> &#123;<br>        isSuccess = success;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getHollis</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hollischuang&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以上代码的Model6中，只有一个成员变量即isSuccess，三个方法，分别是IDE帮我们自动生成的isSuccess和setSuccess，另外一个是作者自己增加的一个符合getter命名规范的方法。</p><p>以上代码输出结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">Serializable Result With fastjson <span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;hollis&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;hollischuang&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;success&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><br>Serializable Result With Gson <span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;isSuccess&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><br>Serializable Result With jackson <span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;hollis&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;hollischuang&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;success&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在fastjson和jackson的结果中，原来类中的isSuccess字段被序列化成success，并且其中还包含hollis值。而Gson中只有isSuccess字段。</p><p>我们可以得出结论：fastjson和jackson在把对象序列化成json字符串的时候，是通过反射遍历出该类中的所有getter方法，得到getHollis和isSuccess，然后根据JavaBeans规则，他会认为这是两个属性hollis和success的值。直接序列化成json，但是Gson并不是这么做的，他是通过反射遍历该类中的所有属性，并把其值序列化成json</p><hr><p><strong>可以看到，由于不同的序列化工具，在进行序列化的时候使用到的策略是不一样的，所以，对于同一个类的同一个对象的序列化结果可能是不同的。</strong></p><p>前面提到的关于对getHollis的序列化只是为了说明fastjson、jackson和Gson之间的序列化策略的不同，我们暂且把他放到一边，我们把他从Model6中删除后，重新执行下以上代码，得到结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">Serializable Result With fastjson <span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;success&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><br>Serializable Result With Gson <span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;isSuccess&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><br>Serializable Result With jackson <span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;success&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>现在，不同的序列化框架得到的json内容并不相同，如果对于同一个对象，我使用fastjson进行序列化，再使用Gson反序列化会发生什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.StringJoiner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BooleanMainTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Model7</span> <span class="hljs-variable">model7</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Model7</span>();<br>        model7.setSuccess(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        System.out.println(gson.fromJson(JSON.toJSONString(model7), Model7.class));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model7</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1836697963736227954L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isSuccess;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSuccess</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> isSuccess;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSuccess</span><span class="hljs-params">(<span class="hljs-type">boolean</span> success)</span> &#123;<br>        isSuccess = success;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;, &quot;</span>, Model7.class.getSimpleName() + <span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&quot;]&quot;</span>).add(<span class="hljs-string">&quot;isSuccess=&quot;</span> + isSuccess).toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码，输出结果：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Model7[<span class="hljs-attribute">isSuccess</span>=<span class="hljs-literal">false</span>]<br></code></pre></td></tr></table></figure><p>这和我们预期的结果完全相反，原因是因为JSON框架通过扫描所有的getter后发现有一个isSuccess方法，然后根据JavaBeans的规范，解析出变量名为success，把model对象序列化城字符串后内容为<code>&#123;&quot;success&quot;:true&#125;</code>。</p><p>根据<code>&#123;&quot;success&quot;:true&#125;</code>这个json串，Gson框架在通过解析后，通过反射寻找Model类中的success属性，但是Model类中只有isSuccess属性，所以，最终反序列化后的Model类的对象中，isSuccess则会使用默认值false。</p><p>但是，<strong>一旦以上代码发生在生产环境，这绝对是一个致命的问题。</strong></p><p>所以，作为开发者，我们应该想办法尽量避免这种问题的发生，对于POJO的设计者来说，只需要做简单的一件事就可以解决这个问题了，那就是把isSuccess改为success。</p><p>这样，该类里面的成员变量时success，getter方法是isSuccess，这是完全符合JavaBeans规范的。无论哪种序列化框架，执行结果都一样。就从源头避免了这个问题。<br> <img src="/articles/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%A6%81%E6%AD%A2%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E4%BD%BF%E7%94%A8isSuccess%E4%BD%9C%E4%B8%BA%E5%8F%98%E9%87%8F%E5%90%8D/003.png" class="" title="image.png"></p><p>所以，<strong>在定义POJO中的布尔类型的变量时，不要使用isSuccess这种形式，而要直接使用success！</strong></p><h3 id="Boolean还是boolean？"><a href="#Boolean还是boolean？" class="headerlink" title="Boolean还是boolean？"></a>Boolean还是boolean？</h3><p>前面我们介绍完了在success和isSuccess之间如何选择，那么排除错误答案后，备选项还剩下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">boolean</span> success<br><span class="hljs-built_in">Boolean</span> success<br></code></pre></td></tr></table></figure><p>当我们没有设置字段的值的时候，Boolean类型的变量会设置默认值为<code>null</code>，而boolean类型的变量会设置默认值为 <code>false</code>。</p><p>即对象的默认值是<code>null</code>，boolean基本数据类型的默认值是 <code>false</code>。</p><p>在阿里巴巴Java开发手册中，对于POJO中如何选择变量的类型也有着一些规定：<br> <img src="/articles/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%A6%81%E6%AD%A2%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E4%BD%BF%E7%94%A8isSuccess%E4%BD%9C%E4%B8%BA%E5%8F%98%E9%87%8F%E5%90%8D/004.png" class="" title="image.png"></p><p>这里建议我们使用包装类型，原因是什么呢？</p><p>举一个扣费的例子，我们做一个扣费系统，扣费时需要从外部的定价系统中读取一个费率的值，我们预期该接口的返回值中会包含一个浮点型的费率字段。当我们取到这个值得时候就使用公式：金额*费率&#x3D;费用 进行计算，计算结果进行划扣。</p><p>如果由于计费系统异常，他可能会返回个默认值，如果这个字段是Double类型的话，该默认值为null，如果该字段是double类型的话，该默认值为0.0。</p><p>如果扣费系统对于该费率返回值没做特殊处理的话，拿到null值进行计算会直接报错，阻断程序。拿到0.0可能就直接进行计算，得出接口为0后进行扣费了。这种异常情况就无法被感知。</p><p>这种使用包装类型定义变量的方式，通过异常来阻断程序，进而可以被识别到这种线上问题。如果使用基本数据类型的话，系统可能不会报错，进而认为无异常。</p><p><strong>以上，就是建议在POJO和RPC的返回值中使用包装类型的原因。</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文围绕布尔类型的变量定义的类型和命名展开了介绍，最终我们可以得出结论，在定义一个布尔类型的变量，尤其是一个给外部提供的接口返回值时，要使用<code>success</code> 来命名，阿里巴巴Java开发手册建议使用封装类来定义POJO和RPC返回值中的变量。但是这不意味着可以随意的使用null，我们还是要尽量避免出现对null的处理的。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://mp.weixin.qq.com/s/8030Ddu4_aaXge_H1pFNHw">https://mp.weixin.qq.com/s/8030Ddu4_aaXge_H1pFNHw</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>概念分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SimpleDateFormat时间格式化存在线程安全问题</title>
    <link href="/articles/SimpleDateFormat%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%98%E5%9C%A8%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98.html"/>
    <url>/articles/SimpleDateFormat%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%98%E5%9C%A8%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98.html</url>
    
    <content type="html"><![CDATA[<h3 id="什么是线程安全和线程不安全"><a href="#什么是线程安全和线程不安全" class="headerlink" title="什么是线程安全和线程不安全"></a>什么是线程安全和线程不安全</h3><p>首先明确一下什么是线程安全，是什么是线程不安全，如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。反之就是不安全</p><span id="more"></span><p>线程安全问题都是由全局变量及静态变量引起的。<br>若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步，否则的话就可能影响线程安全。</p><hr><h3 id="SimpleDateFormat时间格式化存在线程安全问题"><a href="#SimpleDateFormat时间格式化存在线程安全问题" class="headerlink" title="SimpleDateFormat时间格式化存在线程安全问题"></a>SimpleDateFormat时间格式化存在线程安全问题</h3><p>SimpleDateFormat 是 Java 中一个非常常用的类，该类用来对日期字符串进行解析和格式化输出，但如果使用不小心会导致非常微妙和难以调试的问题，因为 DateFormat 和 SimpleDateFormat 类不都是线程安全的，在多线程环境下调用 format() 和 parse() 方法应该使用同步代码来避免问题。下面我们通过一个具体的场景来一步步的深入学习和理解SimpleDateFormat类。</p><h4 id="一-引子"><a href="#一-引子" class="headerlink" title="一.引子"></a>一.引子</h4><p>　　我们都知道在程序中我们应当尽量少的创建SimpleDateFormat 实例，因为创建这么一个实例需要耗费很大的代价。在一个读取数据库数据导出到excel文件的例子当中，每次处理一个时间信息的时候，就需要创建一个SimpleDateFormat实例对象，然后再丢弃这个对象。大量的对象就这样被创建出来，占用大量的内存和 jvm空间。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateUtil</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  String <span class="hljs-title function_">formatDate</span><span class="hljs-params">(Date date)</span><span class="hljs-keyword">throws</span> ParseException&#123;<br>         <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-keyword">return</span> sdf.format(date);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title function_">parse</span><span class="hljs-params">(String strDate)</span> <span class="hljs-keyword">throws</span> ParseException&#123;<br>         <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-keyword">return</span> sdf.parse(strDate);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>　　你也许会说，OK，那我就创建一个静态的simpleDateFormat实例，然后放到一个DateUtil类（如下）中，在使用时直接使用这个实例进行操作，这样问题就解决了。改进后的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span>  <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  String <span class="hljs-title function_">formatDate</span><span class="hljs-params">(Date date)</span><span class="hljs-keyword">throws</span> ParseException&#123;<br>        <span class="hljs-keyword">return</span> sdf.format(date);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title function_">parse</span><span class="hljs-params">(String strDate)</span> <span class="hljs-keyword">throws</span> ParseException&#123;<br><br>        <span class="hljs-keyword">return</span> sdf.parse(strDate);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，这个方法的确很不错，在大部分的时间里面都会工作得很好。但当你在生产环境中使用一段时间之后，你就会发现这么一个事实：它不是线程安全的。在正常的测试情况之下，都没有问题，但一旦在生产环境中一定负载情况下时，这个问题就出来了。他会出现各种不同的情况，比如转化的时间不正确，报错等等。我们看下面的测试用例，用事实说话：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateUtil</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span>  <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  String <span class="hljs-title function_">formatDate</span><span class="hljs-params">(Date date)</span><span class="hljs-keyword">throws</span> ParseException&#123;<br>        <span class="hljs-keyword">return</span> sdf.format(date);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title function_">parse</span><span class="hljs-params">(String strDate)</span> <span class="hljs-keyword">throws</span> ParseException&#123;<br><br>        <span class="hljs-keyword">return</span> sdf.parse(strDate);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateUtilTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSimpleDateFormatThreadSafe</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.join(<span class="hljs-number">2000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e1) &#123;<br>                e1.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;:&quot;</span> + DateUtil.parse(<span class="hljs-string">&quot;2013-05-24 06:02:20&quot;</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestSimpleDateFormatThreadSafe</span>().start();<br>        &#125;<br>            <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>　　执行输出如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;Thread-0&quot;</span> Exception in thread <span class="hljs-string">&quot;Thread-1&quot;</span> Thread-<span class="hljs-number">2</span>:Sat May <span class="hljs-number">24</span> <span class="hljs-number">06</span>:<span class="hljs-number">02</span>:<span class="hljs-number">20</span> CST <span class="hljs-number">2200</span><br>java.lang.NumberFormatException: multiple points<br>at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:<span class="hljs-number">1890</span>)<br>at sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:<span class="hljs-number">110</span>)<br>at java.lang.Double.parseDouble(Double.java:<span class="hljs-number">538</span>)<br>at java.text.DigitList.getDouble(DigitList.java:<span class="hljs-number">169</span>)<br>at java.text.DecimalFormat.parse(DecimalFormat.java:<span class="hljs-number">2056</span>)<br>at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:<span class="hljs-number">1869</span>)<br>at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:<span class="hljs-number">1514</span>)<br>at java.text.DateFormat.parse(DateFormat.java:<span class="hljs-number">364</span>)<br>at org.yungu.date.DateUtil.parse(DateUtil.java:<span class="hljs-number">17</span>)<br>at org.yungu.date.DateUtilTest$TestSimpleDateFormatThreadSafe.run(DateUtilTest.java:<span class="hljs-number">17</span>)<br>java.lang.NumberFormatException: multiple points<br>at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:<span class="hljs-number">1890</span>)<br>at sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:<span class="hljs-number">110</span>)<br>at java.lang.Double.parseDouble(Double.java:<span class="hljs-number">538</span>)<br>at java.text.DigitList.getDouble(DigitList.java:<span class="hljs-number">169</span>)<br>at java.text.DecimalFormat.parse(DecimalFormat.java:<span class="hljs-number">2056</span>)<br>at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:<span class="hljs-number">1869</span>)<br>at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:<span class="hljs-number">1514</span>)<br>at java.text.DateFormat.parse(DateFormat.java:<span class="hljs-number">364</span>)<br>at org.yungu.date.DateUtil.parse(DateUtil.java:<span class="hljs-number">17</span>)<br>at org.yungu.date.DateUtilTest$TestSimpleDateFormatThreadSafe.run(DateUtilTest.java:<span class="hljs-number">17</span>)<br><br></code></pre></td></tr></table></figure><p>说明：Thread-1和Thread-0报java.lang.NumberFormatException: multiple points报错，没起来；Thread-2 虽然没有报错，但输出的时间是有错误的，比如我们输入的时间是：2013-05-24 06:02:20 ，但会输出：Sat May 24 06:02:20 CST 2200 </p><h4 id="二-原因"><a href="#二-原因" class="headerlink" title="二.原因"></a>二.原因</h4><p>　　作为一个专业程序员，我们当然都知道，相比于共享一个变量的开销要比每次创建一个新变量要小很多。上面的优化过的静态的SimpleDateFormat版，之所在并发情况下回出现各种灵异错误，是因为SimpleDateFormat和DateFormat类不是线程安全的。我们之所以忽视线程安全的问题，是因为从SimpleDateFormat和DateFormat类提供给我们的接口上来看，实在让人看不出它与线程安全有何相干。只是在JDK文档的最下面有如下说明：  </p><p>SimpleDateFormat中的日期格式不是同步的。推荐（建议）为每个线程创建独立的格式实例。如果多个线程同时访问一个格式，则它必须保持外部同步。</p><p>JDK原始文档如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">　　<br>Synchronization：<br><span class="hljs-type">Date</span> formats are <span class="hljs-keyword">not</span> synchronized. <br>It <span class="hljs-keyword">is</span> recommended <span class="hljs-keyword">to</span> <span class="hljs-keyword">create</span> separate <span class="hljs-keyword">format</span> instances <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> thread. <br><span class="hljs-keyword">If</span> multiple threads <span class="hljs-keyword">access</span> a <span class="hljs-keyword">format</span> <span class="hljs-keyword">concurrently</span>, it must be synchronized externally.<br></code></pre></td></tr></table></figure><p>下面我们通过看JDK源码来看看为什么SimpleDateFormat和DateFormat类不是线程安全的真正原因：</p><p>SimpleDateFormat继承了DateFormat,在DateFormat中定义了一个protected属性的 Calendar类的对象：calendar。只是因为Calendar累的概念复杂，牵扯到时区与本地化等等，Jdk的实现中使用了成员变量来传递参数，这就造成在多线程的时候会出现错误。</p><p>在format方法里，有这样一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> StringBuffer <span class="hljs-title function_">format</span><span class="hljs-params">(Date date, StringBuffer toAppendTo,</span><br><span class="hljs-params">                             FieldDelegate delegate)</span> &#123;<br>     <span class="hljs-comment">// Convert input date to time field list</span><br>     calendar.setTime(date);<br><br>     <span class="hljs-type">boolean</span> <span class="hljs-variable">useDateFormatSymbols</span> <span class="hljs-operator">=</span> useDateFormatSymbols();<br><br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; compiledPattern.length; ) &#123;<br>         <span class="hljs-type">int</span> <span class="hljs-variable">tag</span> <span class="hljs-operator">=</span> compiledPattern[i] &gt;&gt;&gt; <span class="hljs-number">8</span>;<br>         <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> compiledPattern[i++] &amp; <span class="hljs-number">0xff</span>;<br>         <span class="hljs-keyword">if</span> (count == <span class="hljs-number">255</span>) &#123;<br>             count = compiledPattern[i++] &lt;&lt; <span class="hljs-number">16</span>;<br>             count |= compiledPattern[i++];<br>         &#125;<br><br>         <span class="hljs-keyword">switch</span> (tag) &#123;<br>         <span class="hljs-keyword">case</span> TAG_QUOTE_ASCII_CHAR:<br>             toAppendTo.append((<span class="hljs-type">char</span>)count);<br>             <span class="hljs-keyword">break</span>;<br><br>         <span class="hljs-keyword">case</span> TAG_QUOTE_CHARS:<br>             toAppendTo.append(compiledPattern, i, count);<br>             i += count;<br>             <span class="hljs-keyword">break</span>;<br><br>         <span class="hljs-keyword">default</span>:<br>             subFormat(tag, count, delegate, toAppendTo, useDateFormatSymbols);<br>             <span class="hljs-keyword">break</span>;<br>         &#125;<br>     &#125;<br>     <span class="hljs-keyword">return</span> toAppendTo;<br> &#125;<br></code></pre></td></tr></table></figure><p>线程1调用format方法，改变了calendar这个字段。<br>中断来了。<br>线程2开始执行，它也改变了calendar。<br>又中断了。<br>线程1回来了，此时，calendar已然不是它所设的值，而是走上了线程2设计的道路。如果多个线程同时争抢calendar对象，则会出现各种问题，时间不对等等。<br>分析一下format的实现，我们不难发现，用到成员变量calendar，唯一的好处，就是在调用subFormat时，少了一个参数，却带来了这许多的问题。其实，只要在这里用一个局部变量，一路传递下去，所有问题都将迎刃而解。</p><p>这个问题背后隐藏着一个更为重要的问题–无状态：无状态方法的好处之一，就是它在各种环境下，都可以安全的调用。衡量一个方法是否是有状态的，就看它是否改动了其它的东西，比如全局变量，比如实例的字段。format方法在运行过程中改动了SimpleDateFormat的calendar字段，所以，它是有状态的。</p><p>这也同时提醒我们在开发和设计系统的时候注意下一下三点:</p><p>1.自己写公用类的时候，要对多线程调用情况下的后果在注释里进行明确说明</p><p>2.对线程环境下，对每一个共享的可变变量都要注意其线程安全性</p><p>3.我们的类和方法在做设计的时候，要尽量设计成无状态的</p><h4 id="三-解决办法"><a href="#三-解决办法" class="headerlink" title="三.解决办法"></a>三.解决办法</h4><p>1.需要的时候创建新实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateUtil</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  String <span class="hljs-title function_">formatDate</span><span class="hljs-params">(Date date)</span><span class="hljs-keyword">throws</span> ParseException&#123;<br>         <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-keyword">return</span> sdf.format(date);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title function_">parse</span><span class="hljs-params">(String strDate)</span> <span class="hljs-keyword">throws</span> ParseException&#123;<br>         <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-keyword">return</span> sdf.parse(strDate);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：在需要用到SimpleDateFormat 的地方新建一个实例，不管什么时候，将有线程安全问题的对象由共享变为局部私有都能避免多线程问题，不过也加重了创建对象的负担。在一般情况下，这样其实对性能影响比不是很明显的。</p><p>2.使用同步：同步SimpleDateFormat对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateSyncUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>      <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">formatDate</span><span class="hljs-params">(Date date)</span><span class="hljs-keyword">throws</span> ParseException&#123;<br>        <span class="hljs-keyword">synchronized</span>(sdf)&#123;<br>            <span class="hljs-keyword">return</span> sdf.format(date);<br>        &#125;  <br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title function_">parse</span><span class="hljs-params">(String strDate)</span> <span class="hljs-keyword">throws</span> ParseException&#123;<br>        <span class="hljs-keyword">synchronized</span>(sdf)&#123;<br>            <span class="hljs-keyword">return</span> sdf.parse(strDate);<br>        &#125;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>说明：当线程较多时，当一个线程调用该方法时，其他想要调用此方法的线程就要block，多线程并发量大的时候会对性能有一定的影响。</p><p>3.使用ThreadLocal：　</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.DateFormat;<br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcurrentDateUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;DateFormat&gt; threadLocal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;DateFormat&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> DateFormat <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title function_">parse</span><span class="hljs-params">(String dateStr)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-keyword">return</span> threadLocal.get().parse(dateStr);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">format</span><span class="hljs-params">(Date date)</span> &#123;<br>        <span class="hljs-keyword">return</span> threadLocal.get().format(date);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外一种写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.DateFormat;<br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocalDateUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">date_format</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;DateFormat&gt; threadLocal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;DateFormat&gt;(); <br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DateFormat <span class="hljs-title function_">getDateFormat</span><span class="hljs-params">()</span>   <br>    &#123;  <br>        <span class="hljs-type">DateFormat</span> <span class="hljs-variable">df</span> <span class="hljs-operator">=</span> threadLocal.get();  <br>        <span class="hljs-keyword">if</span>(df==<span class="hljs-literal">null</span>)&#123;  <br>            df = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(date_format);  <br>            threadLocal.set(df);  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> df;  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">formatDate</span><span class="hljs-params">(Date date)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-keyword">return</span> getDateFormat().format(date);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title function_">parse</span><span class="hljs-params">(String strDate)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-keyword">return</span> getDateFormat().parse(strDate);<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><p>说明：使用ThreadLocal, 也是将共享变量变为独享，线程独享肯定能比方法独享在并发环境中能减少不少创建对象的开销。如果对性能要求比较高的情况下，一般推荐使用这种方法。</p><p>4.抛弃JDK，使用其他类库中的时间格式化类：</p><p>1.使用Apache commons 里的FastDateFormat，宣称是既快又线程安全的SimpleDateFormat, 可惜它只能对日期进行format, 不能对日期串进行解析。</p><p>2.使用Joda-Time类库来处理时间相关问题</p><p>做一个简单的压力测试，方法一最慢，方法三最快，但是就算是最慢的方法一性能也不差，一般系统方法一和方法二就可以满足，所以说在这个点很难成为你系统的瓶颈所在。从简单的角度来说，建议使用方法一或者方法二，如果在必要的时候，追求那么一点性能提升的话，可以考虑用方法三，用ThreadLocal做缓存。</p><p><strong>参考链接</strong></p><ul><li><a href="https://www.cnblogs.com/peida/archive/2013/05/31/3070790.html">https://www.cnblogs.com/peida/archive/2013/05/31/3070790.html</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>概念分析</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos安装jdk</title>
    <link href="/articles/centos%E5%AE%89%E8%A3%85jdk.html"/>
    <url>/articles/centos%E5%AE%89%E8%A3%85jdk.html</url>
    
    <content type="html"><![CDATA[<h1 id="下载jdk-找到自己需要的版本，选择tar-gz格式的"><a href="#下载jdk-找到自己需要的版本，选择tar-gz格式的" class="headerlink" title="下载jdk,找到自己需要的版本，选择tar.gz格式的"></a>下载jdk,找到自己需要的版本，选择tar.gz格式的</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.oracle.com<span class="hljs-regexp">/technetwork/</span>java<span class="hljs-regexp">/javase/</span>downloads/index.html<br></code></pre></td></tr></table></figure><span id="more"></span><h1 id="解压jdk"><a href="#解压jdk" class="headerlink" title="解压jdk"></a>解压jdk</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -xzvf jdk-<span class="hljs-number">8</span>u172-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><h1 id="编辑环境变量"><a href="#编辑环境变量" class="headerlink" title="编辑环境变量"></a>编辑环境变量</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gedit ~/.bashrc<br></code></pre></td></tr></table></figure><h1 id="写入环境变量"><a href="#写入环境变量" class="headerlink" title="写入环境变量"></a>写入环境变量</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">export JAVA_HOME=/usr/local/java/jdk1.8.0_25  <br>export JRE_HOME=$&#123;JAVA_HOME&#125;/jre  <br>export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib  <br>export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH<br></code></pre></td></tr></table></figure><h1 id="生效-刷新入内存中"><a href="#生效-刷新入内存中" class="headerlink" title="生效(刷新入内存中)"></a>生效(刷新入内存中)</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span>  ~/.bashrc<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>heic to jpg</title>
    <link href="/articles/heic-to-jpg.html"/>
    <url>/articles/heic-to-jpg.html</url>
    
    <content type="html"><![CDATA[<p>heic：<a href="https://baike.baidu.com/item/HEIC/10444257?fr=aladdin">https://baike.baidu.com/item/HEIC/10444257</a><br />jpg: <a href="https://baike.baidu.com/item/JPEG%E6%A0%BC%E5%BC%8F/3462770?fromtitle=JPG&fromid=880403&fr=aladdin">https://baike.baidu.com/item/JPEG%E6%A0%BC%E5%BC%8F/3462770</a><br />HEIF &amp; HEVC 研究  <a href="https://juejin.im/post/59ddc13ff265da432319f438">https://juejin.im/post/59ddc13ff265da432319f438</a></p><span id="more"></span><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>前景提要： heic格式图片不能直接在浏览器上显示<br />因业务需要在浏览器上展示用户上传的图片文件，heic也不例外，所以我们就需要heic to jpg</p><h3 id="方案："><a href="#方案：" class="headerlink" title="方案："></a>方案：</h3><ul><li>使用某些已经提供了heic to jpg api的网站进行转换</li></ul><p><a href="https://cloudconvert.com/heic-to-jpg">https://cloudconvert.com/heic-to-jpg</a><br />优点：比较稳定<br />缺点：收费</p><ul><li>自己开发heic to jpg功能</li></ul><p><a href="https://github.com/monostream/tifig">https://github.com/monostream/tifig</a><br />优点：自己开发，可控<br /></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论:"></a>结论:</h3><p>因为之前项目中存在有iwork to pdf的先例，所以heic to jpg个人以为最好还是采用类似方案，便于开发整合</p><h3 id="开发过程："><a href="#开发过程：" class="headerlink" title="开发过程："></a>开发过程：</h3><h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install cmake vips ffmpeg pkg-config<br></code></pre></td></tr></table></figure><h4 id="1-1在执行命令过程中报一下错误"><a href="#1-1在执行命令过程中报一下错误" class="headerlink" title="1.1在执行命令过程中报一下错误"></a>1.1在执行命令过程中报一下错误</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Error: cmake: &quot;cxx11&quot; is not a recognized standard<br></code></pre></td></tr></table></figure><p>在网上搜索我找到<a href="https://github.com/caskformula/homebrew-caskformula/issues/74">https://github.com/caskformula/homebrew-caskformula/issues/74</a> 这个链接，但是按照里面的方法并没有解决问题</p><h4 id="1-2-然后考虑到可能是之前升级mac系统之后brew出现了什么某些问题，然后我卸载重装然后问题就解决了"><a href="#1-2-然后考虑到可能是之前升级mac系统之后brew出现了什么某些问题，然后我卸载重装然后问题就解决了" class="headerlink" title="1.2 然后考虑到可能是之前升级mac系统之后brew出现了什么某些问题，然后我卸载重装然后问题就解决了"></a>1.2 然后考虑到可能是之前升级mac系统之后brew出现了什么某些问题，然后我<a href="https://blog.csdn.net/qq_41234116/article/details/79366454">卸载重装</a>然后问题就解决了</h4><h4 id="2-build"><a href="#2-build" class="headerlink" title="2. build"></a>2. build</h4><p>2.1 拉取代码</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/monostream/tifig<br></code></pre></td></tr></table></figure><p>2.2执行cmake .过程中报错，缺少依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">-- Checking for module &#x27;vips-cpp&#x27;<br>--   Package &#x27;libffi&#x27;, required by &#x27;gobject-2.0&#x27;, not found<br></code></pre></td></tr></table></figure><p>Google之后执行了以下命令，就ok了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export PKG_CONFIG_PATH=&quot;$&#123;PKG_CONFIG_PATH&#125;:/usr/local/opt/libffi/lib/pkgconfig&quot;<br></code></pre></td></tr></table></figure><p>2.3</p><p>2.3.1 重新编译发现没有2.2的错误，但是发现lib的依赖库貌似不存在<br>2.3.2然后去对应的github仓库下载了对应的依赖库，再次进行编译(一定要下载对应引用版本，要不然可能存在不兼容)</p><h4 id="3-进行make"><a href="#3-进行make" class="headerlink" title="3. 进行make"></a>3. 进行make</h4><p>3.3.1 发现make过程中有许多报错的地方，根据自己经验以及Google搜索对代码进行相应修改，最后编译完成</p><h4 id="4-测试软件"><a href="#4-测试软件" class="headerlink" title="4.测试软件"></a>4.测试软件</h4><p>4.4.1 根据官方文档发现没有问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tifig -v -p image.heic output.jpg<br></code></pre></td></tr></table></figure><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后对于基于官方最后一个发布版代码的修改提交到自己仓库，方便下次使用<br /><a href="https://gitee.com/king_wyx/tifig.git">https://gitee.com/king_wyx&#x2F;tifig.git</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>文件处理</tag>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何设置数据库连接池的大小</title>
    <link href="/articles/%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9A%84%E5%A4%A7%E5%B0%8F.html"/>
    <url>/articles/%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9A%84%E5%A4%A7%E5%B0%8F.html</url>
    
    <content type="html"><![CDATA[<p>基本上来说，大部分项目都需要跟数据库做交互，那么，数据库连接池的大小设置成多大合适呢？</p><p>一些开发老鸟可能还会告诉你：<strong>没关系，尽量设置的大些，比如设置成 200，这样数据库性能会高些，吞吐量也会大些！</strong></p><p>你也许会点头称是，真的是这样吗？<br /></p><span id="more"></span><p> <img src="/articles/%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9A%84%E5%A4%A7%E5%B0%8F/001.png" class="" title="image.png"></p><p>可以很直接的说，关于数据库连接池大小的设置，每个开发者都可能在一环节掉进坑里，事实上呢，大部分程序员可能都会依靠自己的直觉去设置它的大小，设置成 100 ？思量许久后，自顾自想，应该差不多吧？</p><h2 id="假设你的服务有1万并发的访问"><a href="#假设你的服务有1万并发的访问" class="headerlink" title="假设你的服务有1万并发的访问"></a>假设你的服务有1万并发的访问</h2><p>不妨意淫一下，你手里有个网站，并发压力虽然还没到 Facebook 那个级别，但是呢？也有个1万上下的并发量！也就是说差不多2万左右的 <a href="https://blog.csdn.net/graylf/article/details/80314635">TPS</a>。</p><p>那么问题来了！<strong>这个网站的数据库连接池应该设置成多大合适呢？</strong><br />其实这个问法本身就是有问题的，我们需要反过来问，正确问法应该是：<br /><strong>这个网站的数据库连接池应该设置成多小合适呢？</strong></p><p>PS: 这里有一个 Oracle 性能小组发布的简短视频，链接地址为: <a href="http://www.dailymotion.com/video/x2s8uec">http://www.dailymotion.com/video/x2s8uec</a></p><p>口述一下，视频中对 Oracle 数据库进行了压力测试，模拟 9600 个并发线程来操作数据库，每两次数据库操作之间 sleep 550ms，注意，视频中刚开始设置的线程池大小为 2048。<br />让我们来看看数据库连接池的大小为 2048 性能测试结果的鬼样子：<br /><strong>每个请求要在连接池队列里等待 33ms，获得连接之后，执行SQL需要耗时77ms, CPU 消耗维持在 95% 左右；</strong><br />接下来，我们将连接池的大小改小点，设置成 1024，其他测试参数不变，结果咋样？<br /><strong>“这里，获取连接等待时长基本不变，但是 SQL 的执行耗时降低了！”</strong></p><p>接下来，我们再设置小些，连接池的大小降低到 96，并发数等其他参数不变，看看结果如何：<br /><strong>每个请求在连接池队列中的平均等待时间为 1ms, SQL 执行耗时为 2ms</strong>.</p><p><strong>我们没调整任何东西，仅仅只是将数据库连接池的大小降低了，这样，就能把之前平均 100ms 响应时间缩短到了 3ms。吞吐量指数级上升！</strong></p><h2 id="为啥有这种效果"><a href="#为啥有这种效果" class="headerlink" title="为啥有这种效果?"></a>为啥有这种效果?</h2><p>我们不妨想一下，为啥 Nginx 内部仅仅使用了 4 个线程，其性能就大大超越了 100 个进程的 Apache HTTPD 呢？追究其原因的话，回想一下计算机科学的基础知识，答案其实非常明显。</p><p>要知道，即使是单核 CPU 的计算机也能“同时”运行着数百个线程。但我们其实都知道，这只不过是操作系统快速切换时间片，跟我们玩的一个小把戏罢了。</p><p>一核 CPU同一时刻只能执行一个线程，然后操作系统切换上下文，CPU 核心快速调度，执行另一个线程的代码，不停反复，给我们造成了所有进程同时运行假象。</p><p>其实，在一核 CPU 的机器上，顺序执行<strong>A</strong>和<strong>B</strong>永远比通过时间分片切换“同时”执行<strong>A</strong>和<strong>B</strong>要快，其中原因，学过操作系统这门课程的童鞋应该很清楚。一旦线程的数量超过了 CPU 核心的数量，再增加线程数系统就只会更慢，而不是更快，因为这里涉及到上下文切换耗费的额外的性能。<br />说到这里，你应该恍然大悟了 ……</p><h2 id="其他应该考虑到的因素"><a href="#其他应该考虑到的因素" class="headerlink" title="其他应该考虑到的因素"></a>其他应该考虑到的因素</h2><p>上面说到了主要原因，但其实没有这么简单，我们还需要考虑到一些其他的因素。</p><p>当我们在寻找数据库的性能瓶颈时，大致可归为三类：</p><ul><li><strong>CPU</strong></li><li><strong>磁盘 IO</strong></li><li><strong>网络 IO</strong></li></ul><p>也许你会说，还有内存这一因素？内存的确是需要考虑的，但是比起<strong>磁盘IO</strong>和<strong>网络IO</strong>，稍显微不足道，这里就不加了。</p><p>假设我们不考虑磁盘 IO 和网络 IO，就很好定论了，在一个 8 核的服务器上，数据库连接数&#x2F;线程数设置为 8 能够提供最优的性能，如果再增加连接数，反而会因为上下文切换导致性能下降。</p><p>大家都知道，数据库通常把数据存储在磁盘上，而磁盘呢，通常是由一些旋转着的金属碟片和一个装在步进马达上的读写头组成的。读&#x2F;写头同一时刻只能出现在一个位置，当它需要再次执行读写操作时，它必须“寻址”到另外一个位置才能完成任务。所以呢？这里就有了<strong>寻址的耗时</strong>，此外还有<strong>旋转耗时</strong>，读写头需要等待磁盘碟片上的目标数据“旋转到位”才能进行读写操作。使用缓存当然是能够提升性能的，但上述原理仍然适用。</p><p>在这段（”I&#x2F;O等待”）时间内，线程是处于“阻塞”等待状态，也就是说没干啥正事！此时操作系统可以将这个空闲的CPU 核心用于服务其他线程。</p><p>这里我们可以总结一下，当你的线程处理的是 I&#x2F;O 密集型业务时，便可以让线程&#x2F;连接数设置的比 CPU核心大一些，这样就能够在同样的时间内，完成更多的工作，提升吞吐量。</p><p>那么问题又来了？<br />大小设置成多少合适呢？<br />这要取决于<strong>磁盘</strong>，如果你使用的是 SSD 固态硬盘，它不需要寻址，也不需要旋转碟片。打住打住！！！你千万可别理所当然的认为：“<strong>既然SSD速度更快，我们把线程数的大小设置的大些吧！！</strong>”<br />结论正好相反！无需寻址和没有旋回耗时的确意味着<strong>更少的阻塞</strong>，所以更少的线程（更接近于CPU核心数）会发挥出更高的性能。只有当阻塞密集时，更多的线程数才能发挥出更好的性能。</p><p>上面我们已经说过了磁盘 IO, 接下来我们谈谈网络 IO！<br />网络 IO 其实也是非常相似的。通过以太网接口读写数据时也会造成阻塞，10G带宽会比1G带宽的阻塞耗时少一些，而 1G 带宽又会比 100M 带宽的阻塞少一些。通常情况下，我们把网络 IO 放在第三顺位来考虑，然而有些人会在性能计算中忽略网络 IO 带来的影响。</p><h2 id="连接数计算公式"><a href="#连接数计算公式" class="headerlink" title="连接数计算公式"></a>连接数计算公式</h2><p>下面公式由 PostgreSQL 提供，不过底层原理是不变的，它适用于市面上绝大部分数据库产品。还有，你应该模拟预期的访问量，并通过下面的公式先设置一个偏合理的值，然后在实际的测试中，通过微调，来寻找最合适的连接数大小。</p><p><strong>连接数 &#x3D; ((核心数 * 2) + 有效磁盘数)</strong></p><blockquote><p>核心数不应包含&gt; <a href="">超线程</a>&gt; (hyper thread)，即使打开了超线程也是如此，如果热点数据全被缓存了，那么有效磁盘数实际是0，随着缓存命中率的下降，有效磁盘数也逐渐趋近于实际的磁盘数。另外需要注意，这一公式作用于SSD 的效果如何，尚未明了<br>好了，按照这个公式，如果说你的服务器 CPU 是 4核 i7 的，连接池大小应该为 <code>((4 * 2) + 1) = 9</code>。<br />取个整, 我们就设置为 10 吧。你这个行不行啊？10 也太小了吧！</p></blockquote><p>你要是觉得不太行的话，可以跑个性能测试看看，我们可以保证，它能轻松支撑 3000 用户以 6000 TPS 的速率并发执行简单查询的场景。你还可以将连接池大小超过 10，那时，你会看到响应时长开始增加，TPS 开始下降。</p><h2 id="额外需要注意的点"><a href="#额外需要注意的点" class="headerlink" title="额外需要注意的点"></a>额外需要注意的点</h2><p>实际上，连接池的大小的设置还是要结合实际的业务场景来说事。<br />比如说，你的系统同时混合了<strong>长事务</strong>和<strong>短事务</strong>，这时，根据上面的公式来计算就很难办了。正确的做法应该是创建两个连接池，一个服务于长事务，一个服务于”实时”查询，也就是短事务。<br />还有一种情况，比方说一个系统执行一个任务队列，业务上要求同一时间内只允许执行一定数量的任务，这时，我们就应该让并发任务数去适配连接池连接数，而不是连接数大小去适配并发任务数。</p><p><strong>参考链接</strong></p><ul><li><a href="https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing">https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么说Java中只有值传递</title>
    <link href="/articles/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4Java%E4%B8%AD%E5%8F%AA%E6%9C%89%E5%80%BC%E4%BC%A0%E9%80%92.html"/>
    <url>/articles/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4Java%E4%B8%AD%E5%8F%AA%E6%9C%89%E5%80%BC%E4%BC%A0%E9%80%92.html</url>
    
    <content type="html"><![CDATA[<h3 id="实参与形参"><a href="#实参与形参" class="headerlink" title="实参与形参"></a>实参与形参</h3><blockquote><p>形式参数：是在定义函数名和函数体的时候使用的参数,目的是用来接收调用该函数时传入的参数。</p><p>实际参数：在调用有参函数时，主调函数和被调函数之间有数据传递关系。在主调函数中调用一个函数时，函数名后面括号中的参数称为“实际参数”。</p></blockquote><span id="more"></span><p>简单举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <span class="hljs-type">ParamTest</span> <span class="hljs-variable">pt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParamTest</span>();<br>  pt.sout(<span class="hljs-string">&quot;Hollis&quot;</span>);<span class="hljs-comment">//实际参数为 Hollis</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sout</span><span class="hljs-params">(String name)</span> &#123; <span class="hljs-comment">//形式参数为 name</span><br>  System.out.println(name);<br>&#125;<br></code></pre></td></tr></table></figure><p>实际参数是调用有参方法的时候真正传递的内容，而形式参数是用于接收实参内容的参数。</p><h3 id="值传递与引用传递"><a href="#值传递与引用传递" class="headerlink" title="值传递与引用传递"></a>值传递与引用传递</h3><hr/><h4 id="结论概述"><a href="#结论概述" class="headerlink" title="结论概述"></a>结论概述</h4><p>C语言的旷世经典《The C Programming Language》开篇的第一章中，谈到实际参数时说，“在C中，所有函数的实际参数都是传‘值’的”。<br>马上会有人站出来，“错了，还有传地址，比如以指针传递就是传地址”。<br>不错，传指针就是传地址。在把指针视为地址的时候，是否考虑过这样一个问题，它也是一个变量。前面的讨论中说过了，参数传递必须要把参数压入栈中，作为地址的指针也不例外。所以，必须把这个指针也复制一份。函数中对于指针操作实际上是对于这个指针副本的操作。<br>Java的reference等于C的指针。所以，在Java的方法调用中，reference也要复制一份压入堆栈。在方法中对reference的操作就是对这个reference副本的操作。<br>谜底揭晓<br>好，让我们回到最初的问题上。<br>在changeReference中对于reference的赋值实际上是对这个reference的副本进行赋值，而对于reference的本尊没有产生丝毫的影响。<br>回到调用点，本尊醒来，它并不知道自己睡去的这段时间内发生过什么，所以只好当作什么都没发生过一般。就这样，副本消失了，在方法中对它的修改也就烟消云散了。 </p><p>也许你会问出这样的问题，“听了你的解释，我反而对changeInteger感到迷惑了，既然是对于副本的操作，为什么changeInteger可以运作正常？”<br>呵呵，很有趣的大脑短路现象。<br>好，那我就用前面的说法解释一下changeInteger的运作。<br>所谓复制，其结果必然是副本完全等同于本尊。reference复制的结果必然是两个reference指向同一块内存空间。<br>虽然在方法中对于副本的操作并不会影响到本尊，但对内存空间的修改确实实实在在的。<br>回到调用点，虽然本尊依然不知道曾经发生过的一切，但它按照原来的方式访问内存的时候，取到的确是经过方法修改之后的内容。 </p><hr/><h4 id="概念分析"><a href="#概念分析" class="headerlink" title="概念分析"></a>概念分析</h4><p>上面提到了，当我们调用一个有参函数的时候，会把实际参数传递给形式参数。但是，在程序语言中，这个传递过程中传递的两种情况，即值传递和引用传递。我们来看下程序语言中是如何定义和区分值传递和引用传递的。</p><blockquote><p>值传递（pass by value）是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</p><p>引用传递（pass by reference）是指在调用函数时将实际参数的地址直接传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。</p></blockquote><p>有了上面的概念，然后大家就可以写代码实践了，来看看Java中到底是值传递还是引用传递 ，于是，最简单的一段代码出来了：</p><p>1️⃣示例一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <span class="hljs-type">ParamTest</span> <span class="hljs-variable">pt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParamTest</span>();<br><br>  <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>  pt.pass(<span class="hljs-number">10</span>);<br>  System.out.println(<span class="hljs-string">&quot;print in main , i is &quot;</span> + i);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pass</span><span class="hljs-params">(<span class="hljs-type">int</span> j)</span> &#123;<br>  j = <span class="hljs-number">20</span>;<br>  System.out.println(<span class="hljs-string">&quot;print in pass , j is &quot;</span> + j);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码中，我们在pass方法中修改了参数j的值，然后分别在pass方法和main方法中打印参数的值。输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">print in pass , j is <span class="hljs-number">20</span><br>print in main , i is <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>可见，pass方法内部对name的值的修改并没有改变实际参数i的值。那么，按照上面的定义，有人得到结论：Java的方法传递是值传递。</p><p>但是，很快就有人提出质疑了。然后，他们会搬出以下代码：</p><p>2️⃣示例二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <span class="hljs-type">ParamTest</span> <span class="hljs-variable">pt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParamTest</span>();<br><br>  <span class="hljs-type">User</span> <span class="hljs-variable">hollis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>  hollis.setName(<span class="hljs-string">&quot;Hollis&quot;</span>);<br>  hollis.setGender(<span class="hljs-string">&quot;Male&quot;</span>);<br>  pt.pass(hollis);<br>  System.out.println(<span class="hljs-string">&quot;print in main , user is &quot;</span> + hollis);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pass</span><span class="hljs-params">(User user)</span> &#123;<br>  user.setName(<span class="hljs-string">&quot;hollischuang&quot;</span>);<br>  System.out.println(<span class="hljs-string">&quot;print in pass , user is &quot;</span> + user);<br>&#125;<br></code></pre></td></tr></table></figure><p>同样是一个pass方法，同样是在pass方法内修改参数的值。输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">print in pass , user is User&#123;name=<span class="hljs-string">&#x27;hollischuang&#x27;</span>, gender=<span class="hljs-string">&#x27;Male&#x27;</span>&#125;<br>print in main , user is User&#123;name=<span class="hljs-string">&#x27;hollischuang&#x27;</span>, gender=<span class="hljs-string">&#x27;Male&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>经过pass方法执行后，实参的值竟然被改变了，那按照上面的引用传递的定义，实际参数的值被改变了，这不就是引用传递了么。于是，根据上面的两段代码，有人得出一个新的结论：Java的方法中，在传递普通类型的时候是值传递，在传递对象类型的时候是引用传递。</p><p>但是，这种表述仍然是错误的。不信你看下面这个参数类型为对象的参数传递：</p><p>3️⃣示例三</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <span class="hljs-type">ParamTest</span> <span class="hljs-variable">pt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParamTest</span>();<br><br>  <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hollis&quot;</span>;<br>  pt.pass(name);<br>  System.out.println(<span class="hljs-string">&quot;print in main , name is &quot;</span> + name);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pass</span><span class="hljs-params">(String name)</span> &#123;<br>  name = <span class="hljs-string">&quot;hollischuang&quot;</span>;<br>  System.out.println(<span class="hljs-string">&quot;print in pass , name is &quot;</span> + name);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码输出结果为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">print in pass , name is hollischuang<br>print in main , name is Hollis<br></code></pre></td></tr></table></figure><p>这又作何解释呢？同样传递了一个对象，但是原始参数的值并没有被修改，难道传递对象又变成值传递了？</p><h3 id="Java中的值传递"><a href="#Java中的值传递" class="headerlink" title="Java中的值传递"></a>Java中的值传递</h3><p>上面，我们举了三个例子，表现的结果却不一样，这也是导致很多初学者，甚至很多高级程序员对于Java的传递类型有困惑的原因。</p><p>其实，我想告诉大家的是，上面的概念没有错，只是代码的例子有问题。来，我再来给大家画一下概念中的重点，然后再举几个真正恰当的例子。</p><blockquote><p>值传递（pass by value）是指在调用函数时将实际参数<code>复制</code>一份传递到函数中，这样在函数中如果对<code>参数</code>进行修改，将不会影响到实际参数。</p><p>引用传递（pass by reference）是指在调用函数时将实际参数的地址<code>直接</code>传递到函数中，那么在函数中对<code>参数</code>所进行的修改，将影响到实际参数。</p></blockquote><p>那么，我来给大家总结一下，值传递和引用传递之前的区别的重点是什么。</p><img src="/articles/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4Java%E4%B8%AD%E5%8F%AA%E6%9C%89%E5%80%BC%E4%BC%A0%E9%80%92/000.jpeg" class="" title="pass"><p>我们上面看过的几个pass的例子中，都只关注了实际参数内容是否有改变。如传递的是User对象，我们试着改变他的name属性的值，然后检查是否有改变。其实，在实验方法上就错了，当然得到的结论也就有问题了。</p><p>为什么说实验方法错了呢？这里我们来举一个形象的例子。再来深入理解一下值传递和引用传递，然后你就知道为啥错了。</p><p>你有一把钥匙，当你的朋友想要去你家的时候，如果你<code>直接</code>把你的钥匙给他了，这就是引用传递。这种情况下，如果他对这把钥匙做了什么事情，比如他在钥匙上刻下了自己名字，那么这把钥匙还给你的时候，你自己的钥匙上也会多出他刻的名字。</p><p>你有一把钥匙，当你的朋友想要去你家的时候，你<code>复刻</code>了一把新钥匙给他，自己的还在自己手里，这就是值传递。这种情况下，他对这把钥匙做什么都不会影响你手里的这把钥匙。</p><p>但是，不管上面那种情况，你的朋友拿着你给他的钥匙，进到你的家里，把你家的电视砸了。那你说你会不会受到影响？而我们在pass方法中，改变user对象的name属性的值的时候，不就是在“砸电视”么。</p><p>还拿上面的一个例子来举例，我们<code>真正的改变参数</code>，看看会发生什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <span class="hljs-type">ParamTest</span> <span class="hljs-variable">pt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParamTest</span>();<br><br>  <span class="hljs-type">User</span> <span class="hljs-variable">hollis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>  hollis.setName(<span class="hljs-string">&quot;Hollis&quot;</span>);<br>  hollis.setGender(<span class="hljs-string">&quot;Male&quot;</span>);<br>  pt.pass(hollis);<br>  System.out.println(<span class="hljs-string">&quot;print in main , user is &quot;</span> + hollis);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pass</span><span class="hljs-params">(User user)</span> &#123;<br>  user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>  user.setName(<span class="hljs-string">&quot;hollischuang&quot;</span>);<br>  user.setGender(<span class="hljs-string">&quot;Male&quot;</span>);<br>  System.out.println(<span class="hljs-string">&quot;print in pass , user is &quot;</span> + user);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码中，我们在pass方法中，改变了user对象，输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">print in pass , user is User&#123;name=<span class="hljs-string">&#x27;hollischuang&#x27;</span>, gender=<span class="hljs-string">&#x27;Male&#x27;</span>&#125;<br>print in main , user is User&#123;name=<span class="hljs-string">&#x27;Hollis&#x27;</span>, gender=<span class="hljs-string">&#x27;Male&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>我们来画一张图，看一下整个过程中发生了什么，然后我再告诉你，为啥Java中只有值传递。</p><img src="/articles/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4Java%E4%B8%AD%E5%8F%AA%E6%9C%89%E5%80%BC%E4%BC%A0%E9%80%92/001.png" class="" title="pass1"><p>稍微解释下这张图，当我们在main中创建一个User对象的时候，在堆中开辟一块内存，其中保存了name和gender等数据。然后hollis持有该内存的地址<code>0x123456</code>（图1）。当尝试调用pass方法，并且hollis作为实际参数传递给形式参数user的时候，会把这个地址<code>0x123456</code>交给user，这时，user也指向了这个地址（图2）。然后在pass方法内对参数进行修改的时候，即<code>user = new User();</code>，会重新开辟一块<code>0X456789</code>的内存，赋值给user。后面对user的任何修改都不会改变内存<code>0X123456</code>的内容（图3）。</p><p>上面这种传递是什么传递？肯定不是引用传递，如果是引用传递的话，在<code>user=new User()</code>的时候，实际参数的引用也应该改为指向<code>0X456789</code>，但是实际上并没有。</p><p>通过概念我们也能知道，这里是把实际参数的引用的地址复制了一份，传递给了形式参数。所以，<strong>上面的参数其实是值传递，把实参对象引用的地址当做值传递给了形式参数。</strong></p><p>我们再来回顾下之前的那个“砸电视”的例子，看那个例子中的传递过程发生了什么。</p><img src="/articles/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4Java%E4%B8%AD%E5%8F%AA%E6%9C%89%E5%80%BC%E4%BC%A0%E9%80%92/002.png" class="" title="pass1"><p>同样的，在参数传递的过程中，实际参数的地址<code>0X1213456</code>被拷贝给了形参，只是，在这个方法中，并没有对形参本身进行修改，而是修改的形参持有的地址中存储的内容。</p><p>所以，值传递和引用传递的区别并不是传递的内容。而是实参到底有没有被复制一份给形参。在判断实参内容有没有受影响的时候，要看传的的是什么，如果你传递的是个地址，那么就看这个地址的变化会不会有影响，而不是看地址指向的对象的变化。就像钥匙和房子的关系。</p><p>那么，既然这样，为啥上面同样是传递对象，传递的String对象和User对象的表现结果不一样呢？我们在pass方法中使用<code>name = &quot;hollischuang&quot;;</code>试着去更改name的值，阴差阳错的直接改变了name的引用的地址。因为这段代码，会new一个String，在把引用交给name，即等价于<code>name = new String(&quot;hollischuang&quot;);</code>。而原来的那个”Hollis”字符串还是由实参持有着的，所以，并没有修改到实际参数的值。</p><img src="/articles/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4Java%E4%B8%AD%E5%8F%AA%E6%9C%89%E5%80%BC%E4%BC%A0%E9%80%92/003.png" class="" title="pass1"><p><strong>所以说，Java中其实还是值传递的，只不过对于对象参数，值的内容是对象的引用。</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>无论是值传递还是引用传递，其实都是一种求值策略(<a href="https://en.wikipedia.org/wiki/Evaluation_strategy">Evaluation strategy</a>)。在求值策略中，还有一种叫做按共享传递(call by sharing)。其实Java中的参数传递严格意义上说应该是按共享传递。</p><blockquote><p>按共享传递，是指在调用函数时，传递给函数的是实参的地址的拷贝（如果实参在栈中，则直接拷贝该值）。在函数内部对参数进行操作时，需要先拷贝的地址寻找到具体的值，再进行操作。如果该值在栈中，那么因为是直接拷贝的值，所以函数内部对参数进行操作不会对外部变量产生影响。如果原来拷贝的是原值在堆中的地址，那么需要先根据该地址找到堆中对应的位置，再进行操作。因为传递的是地址的拷贝所以函数内对值的操作对外部变量是可见的。</p></blockquote><p>简单点说，Java中的传递，是值传递，而这个值，实际上是对象的引用。</p><p>而按共享传递其实只是按值传递的一个特例罢了。所以我们可以说Java的传递是按共享传递，或者说Java中的传递是值传递。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://github.com/hollischuang/toBeTopJavaer/blob/master/basics/java-basic/java-pass-by.md">https://github.com/hollischuang/toBeTopJavaer/blob/master/basics/java-basic/java-pass-by.md</a></p><p><a href="https://blog.csdn.net/jiangnan2014/article/details/22944075">https://blog.csdn.net/jiangnan2014/article/details/22944075</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>概念分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP、JAVA、C#、Object-C 通用的DES加密</title>
    <link href="/articles/PHP%E3%80%81JAVA%E3%80%81C-%E3%80%81Object-C-%E9%80%9A%E7%94%A8%E7%9A%84DES%E5%8A%A0%E5%AF%86.html"/>
    <url>/articles/PHP%E3%80%81JAVA%E3%80%81C-%E3%80%81Object-C-%E9%80%9A%E7%94%A8%E7%9A%84DES%E5%8A%A0%E5%AF%86.html</url>
    
    <content type="html"><![CDATA[<p>PHP：</p><span id="more"></span><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JoDES</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$_instance</span> = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> JoDES</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">share</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable">$_instance</span>)) &#123;<br>            <span class="hljs-built_in">self</span>::<span class="hljs-variable">$_instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">JoDES</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$_instance</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $str 要处理的字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $key 加密Key，为8个字节长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encode</span>(<span class="hljs-params"><span class="hljs-variable">$str</span>, <span class="hljs-variable">$key</span></span>) </span>&#123;<br>        <span class="hljs-variable">$size</span> = <span class="hljs-title function_ invoke__">mcrypt_get_block_size</span>(MCRYPT_DES, MCRYPT_MODE_CBC);<br>        <span class="hljs-variable">$str</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">pkcs5Pad</span>(<span class="hljs-variable">$str</span>, <span class="hljs-variable">$size</span>);<br>        <span class="hljs-variable">$aaa</span> = <span class="hljs-title function_ invoke__">mcrypt_cbc</span>(MCRYPT_DES, <span class="hljs-variable">$key</span>, <span class="hljs-variable">$str</span>, MCRYPT_ENCRYPT, <span class="hljs-variable">$key</span>);<br>        <span class="hljs-variable">$ret</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$aaa</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$ret</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $str 要处理的字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $key 解密Key，为8个字节长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decode</span>(<span class="hljs-params"><span class="hljs-variable">$str</span>, <span class="hljs-variable">$key</span></span>) </span>&#123;<br>        <span class="hljs-variable">$strBin</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$str</span>);<br>        <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">mcrypt_cbc</span>(MCRYPT_DES, <span class="hljs-variable">$key</span>, <span class="hljs-variable">$strBin</span>, MCRYPT_DECRYPT, <span class="hljs-variable">$key</span>);<br>        <span class="hljs-variable">$str</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">pkcs5Unpad</span>(<span class="hljs-variable">$str</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hex2bin</span>(<span class="hljs-params"><span class="hljs-variable">$hexData</span></span>) </span>&#123;<br>        <span class="hljs-variable">$binData</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$hexData</span>); <span class="hljs-variable">$i</span> += <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-variable">$binData</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$hexData</span>, <span class="hljs-variable">$i</span>, <span class="hljs-number">2</span>)));<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$binData</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pkcs5Pad</span>(<span class="hljs-params"><span class="hljs-variable">$text</span>, <span class="hljs-variable">$blocksize</span></span>) </span>&#123;<br>        <span class="hljs-variable">$pad</span> = <span class="hljs-variable">$blocksize</span> - (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$text</span>) % <span class="hljs-variable">$blocksize</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$text</span> . <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$pad</span>), <span class="hljs-variable">$pad</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pkcs5Unpad</span>(<span class="hljs-params"><span class="hljs-variable">$text</span></span>) </span>&#123;<br>        <span class="hljs-variable">$pad</span> = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$text</span> &#123;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$text</span>) - <span class="hljs-number">1</span>&#125;);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pad</span> &gt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$text</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strspn</span>(<span class="hljs-variable">$text</span>, <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$pad</span>), <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$text</span>) - <span class="hljs-variable">$pad</span>) != <span class="hljs-variable">$pad</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$text</span>, <span class="hljs-number">0</span>, - <span class="hljs-number">1</span> * <span class="hljs-variable">$pad</span>);<br>    &#125;<br><br>&#125;  <br></code></pre></td></tr></table></figure><p>C# </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyDes</span><br>    &#123;<br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> DES加密方法</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;strPlain&quot;&gt;</span>明文<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;strDESKey&quot;&gt;</span>密钥<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;strDESIV&quot;&gt;</span>向量<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span>密文<span class="hljs-doctag">&lt;/returns&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">Encode</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> source, <span class="hljs-built_in">string</span> _DESKey</span>)</span><br>        &#123;<br>            StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>            <span class="hljs-keyword">using</span> (DESCryptoServiceProvider des = <span class="hljs-keyword">new</span> DESCryptoServiceProvider())<br>            &#123;<br>                <span class="hljs-built_in">byte</span>[] key = ASCIIEncoding.ASCII.GetBytes(_DESKey);<br>                <span class="hljs-built_in">byte</span>[] iv = ASCIIEncoding.ASCII.GetBytes(_DESKey);<br>                <span class="hljs-built_in">byte</span>[] dataByteArray = Encoding.UTF8.GetBytes(source);<br>                des.Mode = System.Security.Cryptography.CipherMode.CBC;<br>                des.Key = key;<br>                des.IV = iv;<br>                <span class="hljs-built_in">string</span> encrypt = <span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-keyword">using</span> (MemoryStream ms = <span class="hljs-keyword">new</span> MemoryStream())<br>                <span class="hljs-keyword">using</span> (CryptoStream cs = <span class="hljs-keyword">new</span> CryptoStream(ms, des.CreateEncryptor(), CryptoStreamMode.Write))<br>                &#123;<br>                    cs.Write(dataByteArray, <span class="hljs-number">0</span>, dataByteArray.Length);<br>                    cs.FlushFinalBlock();<br>                    encrypt = Convert.ToBase64String(ms.ToArray());<br>                &#125;<br>                <span class="hljs-keyword">return</span> encrypt;<br>            &#125;<br>        &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 进行DES解密。</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;pToDecrypt&quot;&gt;</span>要解密的base64串<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;sKey&quot;&gt;</span>密钥，且必须为8位。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span>已解密的字符串。<span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">Decode</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> source, <span class="hljs-built_in">string</span> sKey</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">byte</span>[] inputByteArray = System.Convert.FromBase64String(source);<span class="hljs-comment">//Encoding.UTF8.GetBytes(source);</span><br>        <span class="hljs-keyword">using</span> (DESCryptoServiceProvider des = <span class="hljs-keyword">new</span> DESCryptoServiceProvider())<br>        &#123;<br>            des.Key = ASCIIEncoding.ASCII.GetBytes(sKey);<br>            des.IV = ASCIIEncoding.ASCII.GetBytes(sKey);<br>            System.IO.MemoryStream ms = <span class="hljs-keyword">new</span> System.IO.MemoryStream();<br>            <span class="hljs-keyword">using</span> (CryptoStream cs = <span class="hljs-keyword">new</span> CryptoStream(ms, des.CreateDecryptor(), CryptoStreamMode.Write))<br>            &#123;<br>                cs.Write(inputByteArray, <span class="hljs-number">0</span>, inputByteArray.Length);<br>                cs.FlushFinalBlock();<br>                cs.Close();<br>            &#125;<br>            <span class="hljs-built_in">string</span> str = Encoding.UTF8.GetString(ms.ToArray());<br>            ms.Close();<br>            <span class="hljs-keyword">return</span> str;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Object-C</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><code class="hljs objective-c"><br>/***  JoDes.h ***/<br><br>#import &lt;Foundation/Foundation.h&gt;<br>#import &lt;CommonCrypto/CommonDigest.h&gt;<br>#import &lt;CommonCrypto/CommonCryptor.h&gt;<br><br>@interface JoDes : NSObject<br><br>+ (NSString *) encode:(NSString *)str key:(NSString *)key;<br>+ (NSString *) decode:(NSString *)str key:(NSString *)key;<br><br>@end<br><br>/***  JoDes.m ***/<br><br><br><br>#import &quot;JoDes.h&quot;<br><br>@interface JoDes()<br><br>+ (NSString *) encodeBase64WithString:(NSString *)strData;<br>+ (NSString *) encodeBase64WithData:(NSData *)objData;<br>+ (NSData *) decodeBase64WithString:(NSString *)strBase64;<br><br>+ (NSString *)doCipher:(NSString *)sTextIn key:(NSString *)sKey<br>         context:(CCOperation)encryptOrDecrypt;<br><br>@end<br><br>@implementation JoDes<br><br>+ (NSString *) encode:(NSString *)str key:(NSString *)key<br>  &#123;<br>    // doCipher 不能编汉字，所以要进行 url encode<br>    NSMutableString* str1 = [JoDes urlEncode:str];<br>    NSMutableString* encode = [NSMutableString stringWithString:[JoDes doCipher:str1 key:key context:kCCEncrypt]];<br>    [JoDes formatSpecialCharacters:encode];<br>    return encode;<br>  &#125;<br><br>+ (NSString *) decode:(NSString *)str key:(NSString *)key<br>  &#123;<br>    NSMutableString *str1 = [NSMutableString stringWithString:str];<br>    [JoDes reformatSpecialCharacters:str1];<br>    NSString *rt = [JoDes doCipher:str1 key:key context:kCCDecrypt];<br>    return rt;<br>  &#125;<br><br>+ (NSMutableString *)urlEncode:(NSString*)str<br>  &#123;<br>    NSMutableString* encodeStr = [NSMutableString stringWithString:[str stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];<br>    [encodeStr replaceOccurrencesOfString:@&quot;+&quot; withString:@&quot;%2B&quot; options:NSWidthInsensitiveSearch range:NSMakeRange(0, [encodeStr length])];<br>    [encodeStr replaceOccurrencesOfString:@&quot;/&quot; withString:@&quot;%2F&quot; options:NSWidthInsensitiveSearch range:NSMakeRange(0, [encodeStr length])];<br>    return encodeStr;<br>  &#125;<br><br>+ (void)formatSpecialCharacters:(NSMutableString *)str<br>  &#123;<br>    [str replaceOccurrencesOfString:@&quot;+&quot; withString:@&quot;$$&quot; options:NSWidthInsensitiveSearch range:NSMakeRange(0, [str length])];<br>    [str replaceOccurrencesOfString:@&quot;/&quot; withString:@&quot;@@&quot; options:NSWidthInsensitiveSearch range:NSMakeRange(0, [str length])];<br>  &#125;<br><br><br>+ (void)reformatSpecialCharacters:(NSMutableString *)str<br>  &#123;<br>    [str replaceOccurrencesOfString:@&quot;$$&quot; withString:@&quot;+&quot; options:NSWidthInsensitiveSearch range:NSMakeRange(0, [str length])];<br>    [str replaceOccurrencesOfString:@&quot;@@&quot; withString:@&quot;/&quot; options:NSWidthInsensitiveSearch range:NSMakeRange(0, [str length])];<br>  &#125;<br><br>+ (NSString *)encodeBase64WithString:(NSString *)strData &#123;<br>    return [JoDes encodeBase64WithData:[strData dataUsingEncoding:NSUTF8StringEncoding]];<br>    &#125;<br><br><br>+ (NSString *)encodeBase64WithData:(NSData *)objData &#123;<br>    NSString *encoding = nil;<br>    unsigned char *encodingBytes = NULL;<br>    @try &#123;<br>        static char encodingTable[64] = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;;<br>        static NSUInteger paddingTable[] = &#123;0,2,1&#125;;<br>         <br>    NSUInteger dataLength = [objData length];<br>    NSUInteger encodedBlocks = (dataLength * 8) / 24;<br>    NSUInteger padding = paddingTable[dataLength % 3];<br>    if( padding &gt; 0 ) encodedBlocks++;<br>    NSUInteger encodedLength = encodedBlocks * 4;<br><br>    encodingBytes = malloc(encodedLength);<br>    if( encodingBytes != NULL ) &#123;<br>        NSUInteger rawBytesToProcess = dataLength;<br>        NSUInteger rawBaseIndex = 0;<br>        NSUInteger encodingBaseIndex = 0;<br>        unsigned char *rawBytes = (unsigned char *)[objData bytes];<br>        unsigned char rawByte1, rawByte2, rawByte3;<br>        while( rawBytesToProcess &gt;= 3 ) &#123;<br>            rawByte1 = rawBytes[rawBaseIndex];<br>            rawByte2 = rawBytes[rawBaseIndex+1];<br>            rawByte3 = rawBytes[rawBaseIndex+2];<br>            encodingBytes[encodingBaseIndex] = encodingTable[((rawByte1 &gt;&gt; 2) &amp; 0x3F)];<br>            encodingBytes[encodingBaseIndex+1] = encodingTable[((rawByte1 &lt;&lt; 4) &amp; 0x30) | ((rawByte2 &gt;&gt; 4) &amp; 0x0F) ];<br>            encodingBytes[encodingBaseIndex+2] = encodingTable[((rawByte2 &lt;&lt; 2) &amp; 0x3C) | ((rawByte3 &gt;&gt; 6) &amp; 0x03) ];<br>            encodingBytes[encodingBaseIndex+3] = encodingTable[(rawByte3 &amp; 0x3F)];<br>             <br>            rawBaseIndex += 3;<br>            encodingBaseIndex += 4;<br>            rawBytesToProcess -= 3;<br>        &#125;<br>        rawByte2 = 0;<br>        switch (dataLength-rawBaseIndex) &#123;<br>            case 2:<br>                rawByte2 = rawBytes[rawBaseIndex+1];<br>            case 1:<br>                rawByte1 = rawBytes[rawBaseIndex];<br>                encodingBytes[encodingBaseIndex] = encodingTable[((rawByte1 &gt;&gt; 2) &amp; 0x3F)];<br>                encodingBytes[encodingBaseIndex+1] = encodingTable[((rawByte1 &lt;&lt; 4) &amp; 0x30) | ((rawByte2 &gt;&gt; 4) &amp; 0x0F) ];<br>                encodingBytes[encodingBaseIndex+2] = encodingTable[((rawByte2 &lt;&lt; 2) &amp; 0x3C) ];<br>                // we can skip rawByte3 since we have a partial block it would always be 0<br>                break;<br>        &#125;<br>        // compute location from where to begin inserting padding, it may overwrite some bytes from the partial block encoding<br>        // if their value was 0 (cases 1-2).<br>        encodingBaseIndex = encodedLength - padding;<br>        while( padding-- &gt; 0 ) &#123;<br>            encodingBytes[encodingBaseIndex++] = &#x27;=&#x27;;<br>        &#125;<br>        encoding = [[NSString alloc] initWithBytes:encodingBytes length:encodedLength encoding:NSASCIIStringEncoding];<br>    &#125;<br><br>    &#125;<br>    @catch (NSException *exception) &#123;<br>        encoding = nil;<br>        NSLog(@&quot;WARNING: error occured while tring to encode base 32 data: %@&quot;, exception);<br>    &#125;<br>    @finally &#123;<br>        if( encodingBytes != NULL ) &#123;<br>            free( encodingBytes );<br>        &#125;<br>    &#125;<br>    return encoding;<br><br>&#125;<br><br>+ (NSData *)decodeBase64WithString:(NSString *)strBase64 &#123;<br>    NSData *data = nil;<br>    unsigned char *decodedBytes = NULL;<br>    @try &#123;<br>#define __ 255<br>        static char decodingTable[256] = &#123;<br>            __,__,__,__, __,__,__,__, __,__,__,__, __,__,__,__,  // 0x00 - 0x0F<br>            __,__,__,__, __,__,__,__, __,__,__,__, __,__,__,__,  // 0x10 - 0x1F<br>            __,__,__,__, __,__,__,__, __,__,__,62, __,__,__,63,  // 0x20 - 0x2F<br>            52,53,54,55, 56,57,58,59, 60,61,__,__, __, 0,__,__,  // 0x30 - 0x3F<br>            __, 0, 1, 2,  3, 4, 5, 6,  7, 8, 9,10, 11,12,13,14,  // 0x40 - 0x4F<br>            15,16,17,18, 19,20,21,22, 23,24,25,__, __,__,__,__,  // 0x50 - 0x5F<br>            __,26,27,28, 29,30,31,32, 33,34,35,36, 37,38,39,40,  // 0x60 - 0x6F<br>            41,42,43,44, 45,46,47,48, 49,50,51,__, __,__,__,__,  // 0x70 - 0x7F<br>            __,__,__,__, __,__,__,__, __,__,__,__, __,__,__,__,  // 0x80 - 0x8F<br>            __,__,__,__, __,__,__,__, __,__,__,__, __,__,__,__,  // 0x90 - 0x9F<br>            __,__,__,__, __,__,__,__, __,__,__,__, __,__,__,__,  // 0xA0 - 0xAF<br>            __,__,__,__, __,__,__,__, __,__,__,__, __,__,__,__,  // 0xB0 - 0xBF<br>            __,__,__,__, __,__,__,__, __,__,__,__, __,__,__,__,  // 0xC0 - 0xCF<br>            __,__,__,__, __,__,__,__, __,__,__,__, __,__,__,__,  // 0xD0 - 0xDF<br>            __,__,__,__, __,__,__,__, __,__,__,__, __,__,__,__,  // 0xE0 - 0xEF<br>            __,__,__,__, __,__,__,__, __,__,__,__, __,__,__,__,  // 0xF0 - 0xFF<br>        &#125;;<br>        strBase64 = [strBase64 stringByReplacingOccurrencesOfString:@&quot;=&quot; withString:@&quot;&quot;];<br>        NSData *encodedData = [strBase64 dataUsingEncoding:NSASCIIStringEncoding];<br>        unsigned char *encodedBytes = (unsigned char *)[encodedData bytes];<br>         <br>        NSUInteger encodedLength = [encodedData length];<br>        NSUInteger encodedBlocks = (encodedLength+3) &gt;&gt; 2;<br>        NSUInteger expectedDataLength = encodedBlocks * 3;<br>         <br>        unsigned char decodingBlock[4];<br>         <br>        decodedBytes = malloc(expectedDataLength);<br>        if( decodedBytes != NULL ) &#123;<br>             <br>            NSUInteger i = 0;<br>            NSUInteger j = 0;<br>            NSUInteger k = 0;<br>            unsigned char c;<br>            while( i &lt; encodedLength ) &#123;<br>                c = decodingTable[encodedBytes[i]];<br>                i++;<br>                if( c != __ ) &#123;<br>                    decodingBlock[j] = c;<br>                    j++;<br>                    if( j == 4 ) &#123;<br>                        decodedBytes[k] = (decodingBlock[0] &lt;&lt; 2) | (decodingBlock[1] &gt;&gt; 4);<br>                        decodedBytes[k+1] = (decodingBlock[1] &lt;&lt; 4) | (decodingBlock[2] &gt;&gt; 2);<br>                        decodedBytes[k+2] = (decodingBlock[2] &lt;&lt; 6) | (decodingBlock[3]);<br>                        j = 0;<br>                        k += 3;<br>                    &#125;<br>                &#125;<br>            &#125;<br>             <br>            // Process left over bytes, if any<br>            if( j == 3 ) &#123;<br>                decodedBytes[k] = (decodingBlock[0] &lt;&lt; 2) | (decodingBlock[1] &gt;&gt; 4);<br>                decodedBytes[k+1] = (decodingBlock[1] &lt;&lt; 4) | (decodingBlock[2] &gt;&gt; 2);<br>                k += 2;<br>            &#125; else if( j == 2 ) &#123;<br>                decodedBytes[k] = (decodingBlock[0] &lt;&lt; 2) | (decodingBlock[1] &gt;&gt; 4);<br>                k += 1;<br>            &#125;<br>            data = [[NSData alloc] initWithBytes:decodedBytes length:k];<br>        &#125;<br>    &#125;<br>    @catch (NSException *exception) &#123;<br>        data = nil;<br>        NSLog(@&quot;WARNING: error occured while decoding base 32 string: %@&quot;, exception);<br>    &#125;<br>    @finally &#123;<br>        if( decodedBytes != NULL ) &#123;<br>            free( decodedBytes );<br>        &#125;<br>    &#125;<br>    return data;<br><br>&#125;<br><br><br>+ (NSString *)doCipher:(NSString *)sTextIn key:(NSString *)sKey<br>         context:(CCOperation)encryptOrDecrypt &#123;<br><br>    NSStringEncoding EnC = NSUTF8StringEncoding;<br>     <br>    NSMutableData *dTextIn;<br>    if (encryptOrDecrypt == kCCDecrypt) &#123;<br>        dTextIn = [[JoDes decodeBase64WithString:sTextIn] mutableCopy];<br>    &#125;<br>    else&#123;<br>        dTextIn = [[sTextIn dataUsingEncoding: EnC] mutableCopy];<br>    &#125;<br>    NSMutableData * dKey = [[sKey dataUsingEncoding:EnC] mutableCopy];<br>    [dKey setLength:kCCBlockSizeDES];<br>    uint8_t *bufferPtr1 = NULL;<br>    size_t bufferPtrSize1 = 0;<br>    size_t movedBytes1 = 0;<br>    //uint8_t iv[kCCBlockSizeDES];<br>    //memset((void *) iv, 0x0, (size_t) sizeof(iv));<br>    //    Byte iv[] = &#123;0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF&#125;;<br>    bufferPtrSize1 = ([sTextIn length] + kCCKeySizeDES) &amp; ~(kCCKeySizeDES -1);<br>    bufferPtr1 = malloc(bufferPtrSize1 * sizeof(uint8_t));<br>    memset((void *)bufferPtr1, 0x00, bufferPtrSize1);<br>     <br>    CCCrypt(encryptOrDecrypt, // CCOperation op<br>            kCCAlgorithmDES, // CCAlgorithm alg<br>            kCCOptionPKCS7Padding, // CCOptions options<br>            [dKey bytes], // const void *key<br>            [dKey length], // size_t keyLength //<br>            [dKey bytes], // const void *iv<br>            [dTextIn bytes], // const void *dataIn<br>            [dTextIn length],  // size_t dataInLength<br>            (void *)bufferPtr1, // void *dataOut<br>            bufferPtrSize1,     // size_t dataOutAvailable<br>            &amp;movedBytes1);<br>     <br>    //[dTextIn release];<br>    //[dKey release];<br>     <br>    NSString * sResult;<br>    if (encryptOrDecrypt == kCCDecrypt)&#123;<br>        sResult = [[NSString alloc] initWithData:[NSData dataWithBytes:bufferPtr1 length:movedBytes1] encoding:EnC];<br>        free(bufferPtr1);<br>    &#125;<br>    else &#123;<br>        NSData *dResult = [NSData dataWithBytes:bufferPtr1 length:movedBytes1];<br>        free(bufferPtr1);<br>        sResult = [JoDes encodeBase64WithData:dResult];<br>    &#125;<br>    return sResult;<br>&#125;<br><br> <br><br>@end<br></code></pre></td></tr></table></figure><p>JAVA</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.SecretKey;<br><span class="hljs-keyword">import</span> javax.crypto.SecretKeyFactory;<br><span class="hljs-keyword">import</span> javax.crypto.spec.DESKeySpec;<br><span class="hljs-keyword">import</span> javax.crypto.spec.IvParameterSpec;<br><br><span class="hljs-keyword">import</span> android.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DES</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">DES_KEY_STRING</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ABSujsuu&quot;</span>;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encrypt</span><span class="hljs-params">(String message, String key)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;DES/CBC/PKCS5Padding&quot;</span>);<br> <br>    <span class="hljs-type">DESKeySpec</span> <span class="hljs-variable">desKeySpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DESKeySpec</span>(key.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br> <br>    <span class="hljs-type">SecretKeyFactory</span> <span class="hljs-variable">keyFactory</span> <span class="hljs-operator">=</span> SecretKeyFactory.getInstance(<span class="hljs-string">&quot;DES&quot;</span>);<br>    <span class="hljs-type">SecretKey</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> keyFactory.generateSecret(desKeySpec);<br>    <span class="hljs-type">IvParameterSpec</span> <span class="hljs-variable">iv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(key.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>    cipher.init(Cipher.ENCRYPT_MODE, secretKey, iv);<br> <br>    <span class="hljs-keyword">return</span> encodeBase64(cipher.doFinal(message.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>)));<br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">decrypt</span><span class="hljs-params">(String message, String key)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br> <br>    <span class="hljs-type">byte</span>[] bytesrc = decodeBase64(message);<span class="hljs-comment">//convertHexString(message);</span><br>    <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;DES/CBC/PKCS5Padding&quot;</span>);<br>    <span class="hljs-type">DESKeySpec</span> <span class="hljs-variable">desKeySpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DESKeySpec</span>(key.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>    <span class="hljs-type">SecretKeyFactory</span> <span class="hljs-variable">keyFactory</span> <span class="hljs-operator">=</span> SecretKeyFactory.getInstance(<span class="hljs-string">&quot;DES&quot;</span>);<br>    <span class="hljs-type">SecretKey</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> keyFactory.generateSecret(desKeySpec);<br>    <span class="hljs-type">IvParameterSpec</span> <span class="hljs-variable">iv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(key.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br> <br>    cipher.init(Cipher.DECRYPT_MODE, secretKey, iv);<br> <br>    <span class="hljs-type">byte</span>[] retByte = cipher.doFinal(bytesrc);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(retByte);<br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] convertHexString(String ss) &#123;<br>    <span class="hljs-type">byte</span> digest[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[ss.length() / <span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; digest.length; i++) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">byteString</span> <span class="hljs-operator">=</span> ss.substring(<span class="hljs-number">2</span> * i, <span class="hljs-number">2</span> * i + <span class="hljs-number">2</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">byteValue</span> <span class="hljs-operator">=</span> Integer.parseInt(byteString, <span class="hljs-number">16</span>);<br>        digest[i] = (<span class="hljs-type">byte</span>) byteValue;<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> digest;<br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toHexString</span><span class="hljs-params">(<span class="hljs-type">byte</span> b[])</span> &#123;<br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">hexString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; b.length; i++) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">plainText</span> <span class="hljs-operator">=</span> Integer.toHexString(<span class="hljs-number">0xff</span> &amp; b[i]);<br>        <span class="hljs-keyword">if</span> (plainText.length() &lt; <span class="hljs-number">2</span>)<br>            plainText = <span class="hljs-string">&quot;0&quot;</span> + plainText;<br>        hexString.append(plainText);<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> hexString.toString();<br>&#125;<br><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encodeBase64</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b)</span> &#123;<br>        <span class="hljs-keyword">return</span> Base64.encodeToString(b, Base64.DEFAULT);<br>    &#125;<br>     <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] decodeBase64(String base64String) &#123;<br>        <span class="hljs-keyword">return</span> Base64.decode(base64String, Base64.DEFAULT);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu 19.04安装docker</title>
    <link href="/articles/ubuntu-19-04%E5%AE%89%E8%A3%85docker.html"/>
    <url>/articles/ubuntu-19-04%E5%AE%89%E8%A3%85docker.html</url>
    
    <content type="html"><![CDATA[<p>从ubuntu仓库安装docker</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> docker.io<br></code></pre></td></tr></table></figure><span id="more"></span><p>启动docker</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">service docker <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><p>执行下面的命令查看存在的镜像</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo docker images</span><br></code></pre></td></tr></table></figure><p>如果命令没有sudo会出现以下错误,表示权限不足,但是每次都要加sudo很烦,可以执行下面的免sudo的命令</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">Got permission denied <span class="hljs-keyword">while</span> trying to <span class="hljs-keyword">connect</span> to the Docker daemon <span class="hljs-keyword">socket</span> at unix:<span class="hljs-regexp">//</span><span class="hljs-regexp">/var/run</span><span class="hljs-regexp">/docker.sock: Get http:/</span><span class="hljs-regexp">/%2Fvar%2Frun%2Fdocker.sock/</span>v1.<span class="hljs-number">39</span>/containers/json: dial unix /var/run/docker.sock: <span class="hljs-keyword">connect</span>: permission denied<br></code></pre></td></tr></table></figure><p>免sudo命令</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sudo addgroup --system docker<br>sudo adduser $<span class="hljs-keyword">USER</span> <span class="hljs-title">docker</span><br>newgrp docker<br></code></pre></td></tr></table></figure><hr/>参考链接:https://www.jianshu.com/p/3ff8913a5934]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos安装mysql5.7</title>
    <link href="/articles/centos%E5%AE%89%E8%A3%85mysql5-7.html"/>
    <url>/articles/centos%E5%AE%89%E8%A3%85mysql5-7.html</url>
    
    <content type="html"><![CDATA[<p>下载 mysql57-community-release-el7-8.noarch.rpm 的 YUM 源：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">wget http:<span class="hljs-comment">//repo.mysql.com/mysql57-community-release-el7-8.noarch.rpm</span><br></code></pre></td></tr></table></figure><span id="more"></span><p>安装 mysql57-community-release-el7-8.noarch.rpm</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -ivh mysql57-community-release-el7-<span class="hljs-number">8</span>.noarch.rpm<br></code></pre></td></tr></table></figure><p>安装 MySQL：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">yum install mysql-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">service mysqld <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><p>安装完毕后，在  &#x2F;var&#x2F;log&#x2F;mysqld.log 文件中会自动生成一个随机的密码，我们需要先取得这个随机密码，以用于登录 MySQL 服务端</p><p>登录到 MySQL 服务端并更新用户 root 的密码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span> = <span class="hljs-keyword">PASSWORD</span>(<span class="hljs-string">&#x27;123456Aa#.&#x27;</span>); <br></code></pre></td></tr></table></figure><p>刷新权限</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">flush privileges<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac安装mysql</title>
    <link href="/articles/mac%E5%AE%89%E8%A3%85mysql.html"/>
    <url>/articles/mac%E5%AE%89%E8%A3%85mysql.html</url>
    
    <content type="html"><![CDATA[<p>1.安装mysql</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>mysql <br></code></pre></td></tr></table></figure><span id="more"></span><p>2.启动服务</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql.<span class="hljs-keyword">server</span> <span class="hljs-keyword">start</span><br></code></pre></td></tr></table></figure><p>3.初始化mysql配置</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mysql_secure_installation</span><br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">cometdeMacBook-Pro:~ comet$ mysql_secure_installation<br><br>Securing <span class="hljs-keyword">the</span> MySQL server deployment.<br><br>Connecting <span class="hljs-built_in">to</span> MySQL <span class="hljs-keyword">using</span> <span class="hljs-keyword">a</span> blank password.<br><br>VALIDATE PASSWORD PLUGIN can be used <span class="hljs-built_in">to</span> test passwords<br><span class="hljs-keyword">and</span> improve security. It checks <span class="hljs-keyword">the</span> strength <span class="hljs-keyword">of</span> password<br><span class="hljs-keyword">and</span> allows <span class="hljs-keyword">the</span> users <span class="hljs-built_in">to</span> <span class="hljs-built_in">set</span> only those passwords which are<br>secure enough. Would you like <span class="hljs-built_in">to</span> setup VALIDATE PASSWORD plugin?<br><br>Press y|Y <span class="hljs-keyword">for</span> Yes, <span class="hljs-keyword">any</span> other key <span class="hljs-keyword">for</span> No: N  <span class="hljs-comment"> // 这个选yes的话密码长度就必须要设置为8位以上，但我只想要6位的</span><br>Please <span class="hljs-built_in">set</span> <span class="hljs-keyword">the</span> password <span class="hljs-keyword">for</span> root here.<br><br>New password:            <span class="hljs-comment">　// 设置密码</span><br><br>Re-enter <span class="hljs-built_in">new</span> password:    <span class="hljs-comment"> // 再一次确认密码</span><br>By default, <span class="hljs-keyword">a</span> MySQL installation has <span class="hljs-keyword">an</span> anonymous user,<br>allowing anyone <span class="hljs-built_in">to</span> <span class="hljs-built_in">log</span> <span class="hljs-keyword">into</span> MySQL <span class="hljs-keyword">without</span> having <span class="hljs-built_in">to</span> have<br><span class="hljs-keyword">a</span> user account created <span class="hljs-keyword">for</span> them. This is intended only <span class="hljs-keyword">for</span><br>testing, <span class="hljs-keyword">and</span> <span class="hljs-built_in">to</span> make <span class="hljs-keyword">the</span> installation go <span class="hljs-keyword">a</span> bit smoother.<br>You should remove them <span class="hljs-keyword">before</span> moving <span class="hljs-keyword">into</span> <span class="hljs-keyword">a</span> production<br>environment.<br><br>Remove anonymous users? (Press y|Y <span class="hljs-keyword">for</span> Yes, <span class="hljs-keyword">any</span> other key <span class="hljs-keyword">for</span> No) : Y   <span class="hljs-comment"> // 移除不用密码的那个账户</span><br>Success.<br><br><br>Normally, root should only be allowed <span class="hljs-built_in">to</span> connect <span class="hljs-built_in">from</span><br><span class="hljs-string">&#x27;localhost&#x27;</span>. This ensures that someone cannot guess <span class="hljs-keyword">at</span><br><span class="hljs-keyword">the</span> root password <span class="hljs-built_in">from</span> <span class="hljs-keyword">the</span> network.<br><br>Disallow root login remotely? (Press y|Y <span class="hljs-keyword">for</span> Yes, <span class="hljs-keyword">any</span> other key <span class="hljs-keyword">for</span> No) : n　<span class="hljs-comment">　//不接受root远程登录账号</span><br><br> ... skipping.<br>By default, MySQL comes <span class="hljs-keyword">with</span> <span class="hljs-keyword">a</span> database named <span class="hljs-string">&#x27;test&#x27;</span> that<br>anyone can access. This is also intended only <span class="hljs-keyword">for</span> testing,<br><span class="hljs-keyword">and</span> should be removed <span class="hljs-keyword">before</span> moving <span class="hljs-keyword">into</span> <span class="hljs-keyword">a</span> production<br>environment.<br><br><br>Remove test database <span class="hljs-keyword">and</span> access <span class="hljs-built_in">to</span> <span class="hljs-keyword">it</span>? (Press y|Y <span class="hljs-keyword">for</span> Yes, <span class="hljs-keyword">any</span> other key <span class="hljs-keyword">for</span> No) : y　<span class="hljs-comment">　//删除test数据库</span><br> - Dropping test database...<br>Success.<br><br> - Removing privileges <span class="hljs-keyword">on</span> <span class="hljs-title">test</span> <span class="hljs-title">database</span>...<br>Success.<br><br>Reloading <span class="hljs-keyword">the</span> privilege tables will ensure that all changes<br>made so far will take effect immediately.<br><br>Reload privilege tables now? (Press y|Y <span class="hljs-keyword">for</span> Yes, <span class="hljs-keyword">any</span> other key <span class="hljs-keyword">for</span> No) : y<br>Success.<br><br>All done!<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows安装mysql5.7.19</title>
    <link href="/articles/windows%E5%AE%89%E8%A3%85mysql5-7-19.html"/>
    <url>/articles/windows%E5%AE%89%E8%A3%85mysql5-7-19.html</url>
    
    <content type="html"><![CDATA[<p>1.下载地址</p><p><a href="https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip">https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip</a></p><p>2.下载下来之后解压到D:\mysql-5.7.19-winx64</p><span id="more"></span><p>3.在D:\mysql-5.7.19-winx64里面新建my.ini</p><p>4.用文本编辑器或其他编辑器打开 my.ini 文件，把以下代码复制粘贴进去，保存退出</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#代码开始</span><br><span class="hljs-section">[Client]</span><br><span class="hljs-comment">#设置3306端口</span><br><span class="hljs-attr">port</span> = <span class="hljs-number">3306</span><br> <br><span class="hljs-section">[mysqld]</span><br><span class="hljs-comment">#设置3306端口</span><br><span class="hljs-attr">port</span> = <span class="hljs-number">3306</span><br><span class="hljs-comment"># 设置mysql的安装目录</span><br><span class="hljs-attr">basedir</span>=D:\mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">19</span>-winx64<br><span class="hljs-comment"># 设置mysql数据库的数据的存放目录</span><br><span class="hljs-attr">datadir</span>=D:\mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">19</span>-winx64\data<br><span class="hljs-comment"># 允许最大连接数</span><br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">200</span><br><span class="hljs-comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="hljs-attr">character-set-server</span>=utf8<br><span class="hljs-comment"># 创建新表时将使用的默认存储引擎</span><br><span class="hljs-attr">default-storage-engine</span>=INNODB<br><span class="hljs-attr">sql_mode</span>=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES<br> <br><span class="hljs-section">[mysql]</span><br><span class="hljs-comment"># 设置mysql客户端默认字符集</span><br><span class="hljs-attr">default-character-set</span>=utf8<br><span class="hljs-comment">#代码结束</span><br></code></pre></td></tr></table></figure><p>5、以管理员身份运行命令提示符cmd</p><p>6.使用dos指令，进入D:\mysql-5.7.19-winx64\bin目录，运行以下指令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mysqld <span class="hljs-attr">--defaults-file</span>=my<span class="hljs-selector-class">.ini</span> <span class="hljs-attr">--initialize-insecure</span><br>mysqld <span class="hljs-attr">--install</span><br>net start mysql<br></code></pre></td></tr></table></figure><p>如果缺少msvcr120.dll 安装microsoft c++ 2013<br><a href="http://blog.csdn.net/m0_37530301/article/details/70634507?locationNum=3&fps=1">http://blog.csdn.net/m0_37530301/article/details/70634507?locationNum=3&amp;fps=1</a></p><p>7.设置密码和修改密码过期策略</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql -u root -p<br>use mysql;<br><span class="hljs-keyword">update</span> mysql.<span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> authentication_string=<span class="hljs-keyword">password</span>(<span class="hljs-string">&#x27;123456&#x27;</span>) <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span>=<span class="hljs-string">&#x27;root&#x27;</span> <span class="hljs-keyword">and</span> Host = <span class="hljs-string">&#x27;localhost&#x27;</span>;<br><span class="hljs-keyword">update</span> mysql.<span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> password_expired=<span class="hljs-string">&#x27;N&#x27;</span>;<br>flush <span class="hljs-keyword">privileges</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
